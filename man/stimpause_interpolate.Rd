% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stimulation_pauses.R
\name{stimpause_interpolate}
\alias{stimpause_interpolate}
\alias{stimpause_find}
\alias{stimpause_extract}
\alias{stimpause_align}
\title{Find and interpolate stimulation pauses}
\usage{
stimpause_find(
  signal,
  sample_rate,
  pause_duration,
  n_pauses = NA,
  threshold = NA
)

stimpause_extract(
  signal,
  pause_info,
  expand_timepoints = c(-10, 20),
  center = TRUE
)

stimpause_align(signal, pause_info, expand_timepoints = c(-10, 20))

stimpause_interpolate(
  signal,
  sample_rate,
  pause_info,
  max_offset = c(-2e-04, 5e-04)
)
}
\arguments{
\item{signal}{a channel signal trace}

\item{sample_rate}{sample rate}

\item{pause_duration}{stimulation pause duration in seconds}

\item{n_pauses}{suggested number of pauses}

\item{threshold}{suggested suggested threshold of responses to find
stimulation pauses}

\item{pause_info}{a list containing number of pauses \code{n_pause},
onset index (\code{onset_index}, first time-point is 1), offset index
(\code{offset_index}); this can be generated by \code{stimpause_find};
see 'Examples' below}

\item{expand_timepoints}{point offsets allowed to align the pauses}

\item{center}{whether to center the pauses by median; default is true}

\item{max_offset}{maximum (edge) offsets in seconds to interpolate the
pauses; default is \code{-0.0002} seconds before stimulation onset
and \code{0.0005} seconds after the stimulation offset}
}
\value{
\code{stimpause_find} and \code{stimpause_align} returns the pause
information (\code{pause_info}) with the time-points of detected or corrected
stimulation on-set and off-set. The time-points are 1-indexed.
\code{stimpause_extract} extract the signals around pauses;
\code{stimpause_interpolate} returns interpolated signals.
}
\description{
Find and interpolate stimulation pauses
}
\examples{


data("stimulation_signal")

signal <- stimulation_signal$signal
sample_rate <- stimulation_signal$sample_rate

# each pause is roughly <0.001 seconds
pause_durations <- 0.001

# Initial pauses
pause_info <- stimpause_find(signal, sample_rate, pause_durations)

# number of pauses detected
pause_info$n_pauses

# extract responses -10 points before onset ~ 20 points after offset
expand_timepoints <- c(-20, 80)
pauses_snippets <- stimpause_extract(
  signal = signal,
  pause_info = pause_info,
  expand_timepoints = expand_timepoints
)

# Visualize the pauses
snippet_time <- seq(
  expand_timepoints[[1]], by = 1,
  length.out = nrow(pauses_snippets)) / sample_rate * 1000
matplot(snippet_time, pauses_snippets, type = 'l', lty = 1, col = 'gray80',
        xlab = "Time (ms)", ylab = "uV", main = "Initial find")

# Align the pauses
pause_info <- stimpause_align(signal, pause_info)

# Estimated pause duration
estimated_duration <-
  (pause_info$offset_index - pause_info$onset_index + 1) / sample_rate

# reload aligned pauses
pauses_snippets <- stimpause_extract(
  signal = signal,
  pause_info = pause_info,
  expand_timepoints = expand_timepoints
)
matplot(snippet_time, pauses_snippets, type = 'l', lty = 1, col = 'gray80',
        xlab = "Time (ms)", ylab = "uV", main = "Aligned pauses")
lines(snippet_time, rowMeans(pauses_snippets), col = 'red')


# Interpolate the pauses
interpolated <- stimpause_interpolate(
  signal = signal,
  sample_rate = sample_rate,
  pause_info = pause_info,
  max_offset = c(-0.0003, 0.0005)
)


interp_snippets <- stimpause_extract(
  signal = interpolated,
  pause_info = pause_info,
  expand_timepoints = expand_timepoints
)

oldpar <- par(mfrow = c(2, 2))
on.exit(par(oldpar))
matplot(snippet_time, pauses_snippets, type = 'l', lty = 1,
        col = 'gray80', xlab = "Time (ms)", ylab = "uV",
        main = "Stim Pauses", ylim = c(-600, 400))
lines(snippet_time, rowMeans(pauses_snippets), col = 'red')
abline(v = max(estimated_duration) * 1000, lty = 2)

plot(pwelch(
  x = signal,
  fs = sample_rate,
  window = sample_rate,
  noverlap = sample_rate / 2
),
log = "y")

matplot(snippet_time, interp_snippets, type = 'l', lty = 1,
        col = 'gray80', xlab = "Time (ms)", ylab = "uV",
        main = "Interpolated 0.5 ms bandwidth", ylim = c(-600, 400))
lines(snippet_time, rowMeans(interp_snippets), col = 'red')
abline(v = max(estimated_duration) * 1000, lty = 2, col = "gray40")
abline(v = max(estimated_duration) * 1000 + 0.5, lty = 2)

plot(pwelch(
  x = interpolated,
  fs = sample_rate,
  window = sample_rate,
  noverlap = sample_rate / 2
),
log = "y")




}
