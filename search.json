[{"path":"https://dipterix.org/ravetools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhengjia Wang. Author, maintainer, copyright holder. Beauchamp lab. Copyright holder. Karim Rahim. Copyright holder.            R package fftwtools Prerau Lab. Copyright holder.            Multitaper Spectrogram Code RcppParallel Authors. Copyright holder.            TinyParallel Code comes RcppParallel Marcus Geelnard. Copyright holder.            TinyThread library Stefan Schlager. Copyright holder.            Rvcg interface","code":""},{"path":"https://dipterix.org/ravetools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magnotti, JF, Wang, Z, Beauchamp, MS. RAVE: comprehensive open-source software reproducible analysis visualization intracranial EEG data. NeuroImage, 223, p.117341.","code":"@Article{,   title = {{RAVE}: Comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data},   author = {John F. Magnotti and Zhengjia Wang and Michael S. Beauchamp},   journal = {NeuroImage},   year = {2020},   volume = {223},   pages = {117341},   doi = {10.1016/j.neuroimage.2020.117341}, }"},{"path":"https://dipterix.org/ravetools/index.html","id":"ravetools","dir":"","previous_headings":"","what":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"goal ravetools provide memory-efficient signal & image processing toolbox intracranial Electroencephalography. Highlighted features include: Notch filter (remove electrical line frequencies) Welch Periodogram (averaged power frequencies) Wavelet (frequency-time decomposition) 2D, 3D image convolution via FFT CT/MRI MRI image alignment","code":""},{"path":"https://dipterix.org/ravetools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"package available CRAN. install compiled version, simply run: Installing package source requires installation proper compilers C libraries; see document details.","code":"install.packages(\"ravetools\")"},{"path":"https://dipterix.org/ravetools/index.html","id":"ieeg-preprocess-pipeline","dir":"","previous_headings":"","what":"iEEG preprocess pipeline","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"basic example shows preprocess iEEG signal. goal : Plot diagnostic graphs inspect channels Apply Notch filters remove electrical line noise Frequency-time decomposition show power densities * Channel referencing included","code":""},{"path":"https://dipterix.org/ravetools/index.html","id":"id_1-generate-toy-examples","dir":"","previous_headings":"iEEG preprocess pipeline","what":"1. Generate toy examples:","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"","code":"library(ravetools)  # Generate 20 second data at 2000 Hz time <- seq(0, 20, by = 1 / 2000) signal <- sin( 120 * pi * time) +    sin(time * 20*pi) +    exp(-time^2) *    cos(time * 10*pi) +   rnorm(length(time))  diagnose_channel(signal, srate = 2000)"},{"path":"https://dipterix.org/ravetools/index.html","id":"id_2-apply-notch-filters-and-inspect-periodograms","dir":"","previous_headings":"iEEG preprocess pipeline","what":"2. Apply Notch filters and inspect Periodograms","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"","code":"## ------- Notch filter -------- signal2 <- notch_filter(signal, sample_rate = 2000)  diagnose_channel(signal, signal2, srate = 2000,                  name = c(\"Raw\", \"Filtered\"))"},{"path":"https://dipterix.org/ravetools/index.html","id":"id_3-frequency-time-decomposition","dir":"","previous_headings":"iEEG preprocess pipeline","what":"3. Frequency-time decomposition","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"Current version ravetools provides two approaches: Wavelet Multi-taper. Wavelet uses Morlet wavelet obtains amplitude phase data, Multi-taper generate phase data. However, amplitude obtained Multi-taper smoother Wavelet.","code":""},{"path":"https://dipterix.org/ravetools/index.html","id":"using-wavelet","dir":"","previous_headings":"iEEG preprocess pipeline > 3. Frequency-time decomposition","what":"Using Wavelet:","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"","code":"## ---------- Wavelet ----------- coef <- morlet_wavelet(   signal2, freqs = seq(1, 100, by = 1),    srate = 2000, wave_num = c(2, 15)) amplitude <- 20 * log10(Mod(coef[]))  # For each frequency, decimate to 100 Hz downsample_amp <- apply(amplitude, 2, decimate, q = 20) downsample_time <- decimate(time, q = 20)  par(mfrow = c(1,1)) image(   z = downsample_amp,   x = downsample_time,   y = seq(1, 100, by = 1),   xlab = \"Time (s)\",   ylab = \"Frequency (Hz)\",   main = \"Amplitude (dB)\",   sub = \"Wavelet at 2000 Hz, then down-sampled to 100 Hz\",    col = matlab_palette() )"},{"path":"https://dipterix.org/ravetools/index.html","id":"multi-taper","dir":"","previous_headings":"iEEG preprocess pipeline > 3. Frequency-time decomposition","what":"Multi-taper","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"Alternatively can use Multi-tapers obtain amplitude data. algorithm modified source code . Please credit well adopt approach.","code":"## ---------- Multitaper ----------- res <- multitaper(   data = signal2,   fs = 2000,   frequency_range = c(1, 100),   time_bandwidth = 1.5,   window_params = c(2, 0.01),   nfft = 100 )  par(mfrow = c(1,1)) image(   x = res$time,   y = res$frequency,   z = 10 * log10(res$spec),   xlab = \"Time (s)\",   ylab = 'Frequency (Hz)',   col = matlab_palette(),   main = \"Amplitude (dB)\" )"},{"path":"https://dipterix.org/ravetools/index.html","id":"image-alignment","dir":"","previous_headings":"iEEG preprocess pipeline > 3. Frequency-time decomposition","what":"Image alignment","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"ravetools provides imaging co-registration via NiftyReg (doi.org/10.1117/1.JMI.1.2.024003). can align CT MRI, MRI (T2) MRI (T1). method can body rigid, affine, non-linear.","code":"source <- system.file(\"extdata\", \"epi_t2.nii.gz\", package=\"RNiftyReg\") target <- system.file(\"extdata\", \"flash_t1.nii.gz\", package=\"RNiftyReg\") aligned <- register_volume(source, target, verbose = FALSE)  source_img <- aligned$source[[1]] target_img <- aligned$target aligned_img <- aligned$image  par(mfrow = c(2, 2), mar = c(0.1, 0.1, 3.1, 0.1))  pal <- grDevices::grey.colors(256, alpha = 1) image(source_img[,,30], asp = 1, axes = FALSE,       col = pal, main = \"Source image\") image(target_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Target image\") image(aligned_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Aligned image\")  # bucket fill and calculate differences aligned_img[is.nan(aligned_img) | aligned_img <= 1] <- 1 target_img[is.nan(target_img) | aligned_img <= 1] <- 1 diff <- abs(aligned_img / target_img - 1) image(diff[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Percentage Difference\")"},{"path":[]},{"path":"https://dipterix.org/ravetools/index.html","id":"to-cite-ravetools-in-publications-use-please-cite-the-rave-paper-from-beauchamps-lab","dir":"","previous_headings":"References","what":"To cite ravetools in publications use, please cite the RAVE paper from Beauchamp's lab","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"multitaper function (MIT License) uses script derived Prerau's lab. TinyParallel script derived RcppParallel package (GPL License) TBB features removed (use tinythreads). register_volume function uses NiftyReg (BSD License) developed CMIC University College London, UK (R implementation released GPL license).","code":"Magnotti, JF, and Wang, Z, and Beauchamp, MS. RAVE: comprehensive   open-source software for reproducible analysis and visualization of   intracranial EEG data. NeuroImage, 223, p.117341. [1] Magnotti, JF, and Wang, Z, and Beauchamp, MS. RAVE: comprehensive     open-source software for reproducible analysis and visualization of     intracranial EEG data. NeuroImage, 223, p.117341. [2] Prerau, Michael J, and Brown, Ritchie E, and Bianchi, Matt T, and     Ellenbogen, Jeffrey M, and Purdon, Patrick L. Sleep Neurophysiological     Dynamics Through the Lens of Multitaper Spectral Analysis. Physiology,     December 7, 2016, 60-92. [3] Modat, M., Cash, D.M., Daga, P., Winston, G.P., Duncan, J.S. and      Ourselin, S., 2014. Global image registration using a symmetric      block-matching approach. Journal of medical imaging, 1(2), pp.024003-024003. [4] JJ Allaire, Romain Francois, Kevin Ushey, Gregory Vandenbrouck, Marcus     Geelnard and Intel (2022). RcppParallel: Parallel Programming Tools for     'Rcpp'. R package version 5.1.5.     https://CRAN.R-project.org/package=RcppParallel"},{"path":"https://dipterix.org/ravetools/installation.html","id":null,"dir":"","previous_headings":"","what":"Full Installation-from-Source Guide for ravetools","title":"Full Installation-from-Source Guide for ravetools","text":"package ravetools contains C++ code requires general compilers gcc clang compile. addition, signal processing code requires FFTW3 library, installed easily. guide contains three parts. first part, install proper compilers machine. already installed , please skip proceed second part, install FFTW3 library. last part simply installs ravetools.","code":""},{"path":"https://dipterix.org/ravetools/installation.html","id":"prerequisite","dir":"","previous_headings":"","what":"Prerequisite","title":"Full Installation-from-Source Guide for ravetools","text":"development ravetools always latest version R. try best maximize backward compatibility, unlikely test ravetools every single old versions R. Choosing latest R always best choice.","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_1-install-building-tools","dir":"","previous_headings":"Installing on Windows","what":"1. Install Building Tools","title":"Full Installation-from-Source Guide for ravetools","text":"Please go website follow instructions download Rtools. ravetools developed (R version 4.1.2), latest Rtools version 4. Rtools downloaded installed, please open R console, copy-paste following R command hit return:","code":"write('PATH=\"${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}\"', file = \"~/.Renviron\", append = TRUE)"},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_2-install-fftw3","dir":"","previous_headings":"Installing on Windows","what":"2. Install FFTW3","title":"Full Installation-from-Source Guide for ravetools","text":"start menu, Rtools Bash application icon purple letter M Open Windows start menu, search Rtools Bash. Rtools installed successfully, see application purple icon letter M. Open application, see terminal window. terminal, paste following script execute. prompted question Proceed installation? (Y/n). Please enter Y agree. FFTW3 library added system.","code":"pacman -S  mingw-w64-{i686,x86_64}-fftw"},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_3-install-ravetools","dir":"","previous_headings":"Installing on Windows","what":"3. Install ravetools","title":"Full Installation-from-Source Guide for ravetools","text":"previously opened , please close just case. Open R RStudio. newly opened R console, paste following code return line--line.","code":"if(system.file(package = 'remotes') == \"\"){ install.packages('remotes') }  remotes::install_github('dipterix/ravetools')"},{"path":[]},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_1-check-your-r-architecture","dir":"","previous_headings":"Installing on MacOSX","what":"1. Check your R architecture","title":"Full Installation-from-Source Guide for ravetools","text":"Open R. start-message, see text similar Alternatively, can run following R command: Check architecture keywords Platform. see aarch64, ARM CPU (M1 chip), ARM version R installed. see x86_64, Intel version R installed (even ARM chips, R still Intel-based). ARM CPU (like M1-chip), always (strongly) recommended install R architecture, compilers need consistent architectures. Intel-based R installed, set whole compiler chain Intel-based. (tutorial cover advanced case)","code":"R version 4.1.2 (2021-11-01) -- \"Bird Hippie\" Copyright (C) 2021 The R Foundation for Statistical Computing Platform: aarch64-apple-darwin20 (64-bit) R.version$platform ##> [1] \"aarch64-apple-darwin20\""},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_2-install-command-line-tools","dir":"","previous_headings":"Installing on MacOSX","what":"2. Install command-line tools","title":"Full Installation-from-Source Guide for ravetools","text":"Open Terminal.app. can easily found /Application folder, pressing command key space key time, type “terminal”. Run xcode-select --install terminal hit return/enter key. prompted “Agreement” window. Please accept wait installation process finish. see message: code-select: error: command line tools already installed, use \"Software Update\" install updates, means command-line tools already installed machine past, safe proceed next step.","code":""},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_3-install-homebrew","dir":"","previous_headings":"Installing on MacOSX","what":"3. Install HomeBrew","title":"Full Installation-from-Source Guide for ravetools","text":"Please go HomeBrew’s installation site install HomeBrew. don’t like read, simply paste following command terminal window hit return key: Please answer prompted questions wait till brew brew .","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\""},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_4-install-pkg-config-and-fftw3","dir":"","previous_headings":"Installing on MacOSX","what":"4. Install pkg-config and FFTW3","title":"Full Installation-from-Source Guide for ravetools","text":"Open new terminal window. using ARM CPU, type Intel-based machine, type","code":"eval \"$(/opt/homebrew/bin/brew shellenv)\" brew install pkg-config fftw eval \"$(/usr/local/bin/brew shellenv)\" brew install pkg-config fftw"},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_5-install-ravetools","dir":"","previous_headings":"Installing on MacOSX","what":"5. Install ravetools","title":"Full Installation-from-Source Guide for ravetools","text":"previously opened , please close just case. Open R RStudio. newly opened R console, paste following code return line--line.","code":"if(system.file(package = 'remotes') == \"\"){ install.packages('remotes') }  remotes::install_github('dipterix/ravetools')"},{"path":"https://dipterix.org/ravetools/installation.html","id":"installing-on-ubuntu","dir":"","previous_headings":"","what":"Installing on Ubuntu","title":"Full Installation-from-Source Guide for ravetools","text":"following command install essential build tools, system package configuration tools, FFTW3 Please search alternatives using Linux systems RedHat CentOS. installation, type R terminal, hit return/enter key open R environment, run following R commands.","code":"sudo apt-get install build-essential pkg-config libfftw3-dev if(system.file(package = 'remotes') == \"\"){ install.packages('remotes') }  remotes::install_github('dipterix/ravetools')"},{"path":"https://dipterix.org/ravetools/installation.html","id":"installing-with-docker","dir":"","previous_headings":"","what":"Installing with Docker","title":"Full Installation-from-Source Guide for ravetools","text":"Please check Dockerfile. takes 24 minutes compile everything source 2 CPUs, 1 GB RAM","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":null,"dir":"Reference","previous_headings":"","what":"Band-pass signals — band_pass","title":"Band-pass signals — band_pass","text":"Band-pass signals","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Band-pass signals — band_pass","text":"","code":"band_pass1(x, sample_rate, lb, ub, domain = 1, ...)  band_pass2(   x,   sample_rate,   lb,   ub,   order,   method = c(\"fir\", \"butter\"),   direction = c(\"both\", \"forward\", \"backward\"),   window = \"hamming\",   ... )"},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Band-pass signals — band_pass","text":"x input signals, numeric vector matrix. x must row-major input matrix: row channel, column time-point. sample_rate sampling frequency lb lower frequency bound band-passing filter, must positive ub upper frequency bound band-passing filter, must greater lower bound smaller half sampling frequency domain 1 x time-domain, 0 x frequency domain ... ignored order order filter, must positive integer less one-third sample rate method filter type, choices 'fir' 'butter' direction filter direction, choices 'forward', 'backward', '' directions window window type, can character, function, vector. character, window function name signal package, example, 'hanning'; function, window takes one integer argument returns numeric vector length input; vectors, window numeric vector o length order+1.","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Band-pass signals — band_pass","text":"Filtered signals, vector x vector, matrix dimension x","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Band-pass signals — band_pass","text":"","code":"t <- seq(0, 1, by = 0.0005) x <- sin(t * 0.4 * pi) + sin(t * 4 * pi) + 2 * sin(t * 120 * pi)  par(mfrow = c(2, 2), mar = c(3.1, 2.1, 3.1, 0.1)) # ---- Using band_pass1 ------------------------------------------------  y1 <- band_pass1(x, 2000, 0.1, 1) y2 <- band_pass1(x, 2000, 1, 5) y3 <- band_pass1(x, 2000, 10, 80)  plot(t, x, type = 'l', xlab = \"Time\", ylab = \"\",      main = \"Mixture of 0.2, 2, and 60Hz\") lines(t, y1, col = 'red') lines(t, y2, col = 'blue') lines(t, y3, col = 'green') legend(   \"topleft\", c(\"Input\", \"Pass: 0.1-1Hz\", \"Pass 1-5Hz\", \"Pass 10-80Hz\"),   col = c(par(\"fg\"), \"red\", \"blue\", \"green\"), lty = 1,   cex = 0.6 )  # plot pwelch pwelch(x, fs = 2000, window = 4000, noverlap = 2000, plot = 1) pwelch(y1, fs = 2000, window = 4000, noverlap = 2000,        plot = 2, col = \"red\") pwelch(y2, fs = 2000, window = 4000, noverlap = 2000,        plot = 2, col = \"blue\") pwelch(y3, fs = 2000, window = 4000, noverlap = 2000,        plot = 2, col = \"green\")   # ---- Using band_pass2 with FIR filters --------------------------------  order <- floor(2000 / 3) z1 <- band_pass2(x, 2000, 0.1, 1, method = \"fir\", order = order) z2 <- band_pass2(x, 2000, 1, 5, method = \"fir\", order = order) z3 <- band_pass2(x, 2000, 10, 80, method = \"fir\", order = order)  plot(t, x, type = 'l', xlab = \"Time\", ylab = \"\",      main = \"Mixture of 0.2, 2, and 60Hz\") lines(t, z1, col = 'red') lines(t, z2, col = 'blue') lines(t, z3, col = 'green') legend(   \"topleft\", c(\"Input\", \"Pass: 0.1-1Hz\", \"Pass 1-5Hz\", \"Pass 10-80Hz\"),   col = c(par(\"fg\"), \"red\", \"blue\", \"green\"), lty = 1,   cex = 0.6 )  # plot pwelch pwelch(x, fs = 2000, window = 4000, noverlap = 2000, plot = 1) pwelch(z1, fs = 2000, window = 4000, noverlap = 2000,        plot = 2, col = \"red\") pwelch(z2, fs = 2000, window = 4000, noverlap = 2000,        plot = 2, col = \"blue\") pwelch(z3, fs = 2000, window = 4000, noverlap = 2000,        plot = 2, col = \"green\")"},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Contrasts of Arrays in Different Methods — baseline_array","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"Provides five methods baseline array calculate contrast.","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"","code":"baseline_array(x, along_dim, unit_dims = seq_along(dim(x))[-along_dim], ...)  # S3 method for array baseline_array(   x,   along_dim,   unit_dims = seq_along(dim(x))[-along_dim],   method = c(\"percentage\", \"sqrt_percentage\", \"decibel\", \"zscore\", \"sqrt_zscore\",     \"subtract_mean\"),   baseline_indexpoints = NULL,   baseline_subarray = NULL,   ... )"},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"x array (tensor) calculate contrast along_dim integer range 1 maximum dimension x. baseline along dimension, usually time dimension. unit_dims integer vector, baseline unit: see Details. ... passed methods method character, baseline method options : \"percentage\", \"sqrt_percentage\", \"decibel\", \"zscore\", \"sqrt_zscore\" baseline_indexpoints integer vector, index points counted baseline window? index ranges 1 dim(x)[[along_dim]]. See Details. baseline_subarray sub-arrays used calculate baseline; default NULL (automatically determined baseline_indexpoints).","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"Contrast array dimension x.","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"Consider scenario want baseline bunch signals recorded different locations. location, record n sessions. session, signal decomposed frequency-time domain. case, input x following form: $$session x frequency x time x location$$ Now want calibrate signals session, frequency location using first 100 time points baseline points, code $$baseline_array(x, along_dim=3, baseline_window=1:100, unit_dims=c(1,2,4))$$ along_dim=3 dimension time, case, third dimension x. baseline_indexpoints=1:100, meaning first 100 time points used calculate baseline. unit_dims defines unit signal. value c(1,2,4) means unit signal per session (first dimension), per frequency (second) per location (fourth). cases, might want calculate baseline across frequencies unit signal \\(frequency x time\\), .e. signals share session location also share baseline. case, assign unit_dims=c(1,4). five baseline methods. fit different types data. Denote \\(z\\) unit signal, \\(z_0\\) baseline slice. baseline methods : \"percentage\" $$   \\frac{z - \\bar{z_{0}}}{\\bar{z_{0}}} \\times 100\\% $$ \"sqrt_percentage\" $$   \\frac{\\sqrt{z} - \\bar{\\sqrt{z_{0}}}}{\\bar{\\sqrt{z_{0}}}} \\times 100\\% $$ \"decibel\" $$   10 \\times ( \\log_{10}(z) - \\bar{\\log_{10}(z_{0})} ) $$ \"zscore\" $$   \\frac{z-\\bar{z_{0}}}{sd(z_{0})} $$ \"sqrt_zscore\" $$   \\frac{\\sqrt{z}-\\bar{\\sqrt{z_{0}}}}{sd(\\sqrt{z_{0}})} $$","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)   library(ravetools) set.seed(1)  # Generate sample data dims = c(10,20,30,2) x = array(rnorm(prod(dims))^2, dims)  # Set baseline window to be arbitrary 10 timepoints baseline_window = sample(30, 10)  # ----- baseline percentage change ------  # Using base functions re1 <- aperm(apply(x, c(1,2,4), function(y){   m <- mean(y[baseline_window])   (y/m - 1) * 100 }), c(2,3,1,4))  # Using ravetools re2 <- baseline_array(x, 3, c(1,2,4),                       baseline_indexpoints = baseline_window,                       method = 'percentage')  # Check different, should be very tiny (double precisions) range(re2 - re1) #> [1] -5.684342e-13  1.818989e-12  # Check speed for large dataset if(interactive()){  ravetools_threads(n_threads = -1)  dims <- c(200,20,300,2) x <- array(rnorm(prod(dims))^2, dims) # Set baseline window to be arbitrary 10 timepoints baseline_window <- seq_len(100) f1 <- function(){   aperm(apply(x, c(1,2,4), function(y){     m <- mean(y[baseline_window])     (y/m - 1) * 100   }), c(2,3,1,4)) } f2 <- function(){   # equivalent as bl = x[,,baseline_window, ]   #   baseline_array(x, along_dim = 3,                  baseline_indexpoints = baseline_window,                  unit_dims = c(1,2,4), method = 'percentage') } range(f1() - f2()) microbenchmark::microbenchmark(f1(), f2(), times = 10L)  }"},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse array — collapse","title":"Collapse array — collapse","text":"Collapse array","code":""},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse array — collapse","text":"","code":"collapse(x, keep, ...)  # S3 method for array collapse(   x,   keep,   average = TRUE,   transform = c(\"asis\", \"10log10\", \"square\", \"sqrt\"),   ... )"},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse array — collapse","text":"x numeric multi-mode tensor (array), without NA keep dimension keep ... passed methods average collapse sum mean transform transform data applying collapsing; choices 'asis' (change), '10log10' (used calculate decibel), 'square' (sum-squared), 'sqrt' (square-root collapse)","code":""},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse array — collapse","text":"collapsed array values mean summation along collapsing dimensions","code":""},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse array — collapse","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)  # Example 1 x = matrix(1:16, 4)  # Keep the first dimension and calculate sums along the rest collapse(x, keep = 1) #> [1]  7  8  9 10 rowMeans(x)  # Should yield the same result #> [1]  7  8  9 10  # Example 2 x = array(1:120, dim = c(2,3,4,5)) result = collapse(x, keep = c(3,2)) compare = apply(x, c(3,2), mean) sum(abs(result - compare)) # The same, yield 0 or very small number (1e-10) #> [1] 5.684342e-14   if(interactive()){ ravetools_threads(n_threads = -1)  # Example 3 (performance)  # Small data, no big difference x = array(rnorm(240), dim = c(4,5,6,2)) microbenchmark::microbenchmark(   result = collapse(x, keep = c(3,2)),   compare = apply(x, c(3,2), mean),   times = 1L, check = function(v){     max(abs(range(do.call('-', v)))) < 1e-10   } )  # large data big difference x = array(rnorm(prod(300,200,105)), c(300,200,105,1)) microbenchmark::microbenchmark(   result = collapse(x, keep = c(3,2)),   compare = apply(x, c(3,2), mean),   times = 1L , check = function(v){     max(abs(range(do.call('-', v)))) < 1e-10   })  }"},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Convolution of 1D, 2D, 3D data via FFT — convolve","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"Use 'Fast-Fourier' transform compute convolutions two data zero padding.","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"","code":"convolve_signal(x, filter)  convolve_image(x, filter)  convolve_volume(x, filter)"},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"x one-dimensional signal vector, two-dimensional image, three-dimensional volume; numeric complex filter kernel number dimensions x","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"Convolution results length dimensions x. x complex, results complex, otherwise results real numbers.","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"implementation uses 'Fast-Fourier' transform perform 1D, 2D, 3D convolution. Compared implementations using original mathematical definition convolution, approach much faster, especially image volume convolutions. input x zero-padded beyond edges. common image volume convolution, less optimal periodic one-dimensional signals. Please use implementations non-zero padding needed. convolution results might different ground truth precision error, usually 1e-13 level, depending 'FFTW3' library precision implementation.","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"","code":"# ---- 1D convolution ------------------------------------ x <- cumsum(rnorm(100)) filter <- dnorm(-2:2) # normalize filter <- filter / sum(filter) smoothed <- convolve_signal(x, filter)  plot(x, pch = 20) lines(smoothed, col = 'red')   # ---- 2D convolution ------------------------------------ x <- array(0, c(100, 100)) x[   floor(runif(10, min = 1, max = 100)),   floor(runif(10, min = 1, max = 100)) ] <- 1  # smooth kernel <- outer(dnorm(-2:2), dnorm(-2:2), FUN = \"*\") kernel <- kernel / sum(kernel)  y <- convolve_image(x, kernel)  par(mfrow = c(1,2)) image(x, asp = 1, axes = FALSE, main = \"Origin\") image(y, asp = 1, axes = FALSE, main = \"Smoothed\")"},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Decimate with 'FIR' or 'IIR' filter — decimate","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"Decimate 'FIR' 'IIR' filter","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"","code":"decimate(x, q, n = if (ftype == \"iir\") 8 else 30, ftype = \"fir\")"},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"x signal decimated q integer factor -sample n filter order used -sampling; default 30 ftype='fir', 8 ftype='iir' ftype filter type, choices 'fir' (default) 'iir'","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"Decimated signal","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"function migrated signal package, bugs fixed 'FIR' filters. result agrees 'Matlab' decimate function 'FIR' filters. 'IIR' filters, function identical signal::decimate, slightly different 'Matlab' version.","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"","code":"x <- 1:100 y <- decimate(x, 2, ftype = \"fir\") y #>  [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 #> [26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99  # compare with signal package z <- signal::decimate(x, 2, ftype = \"fir\")  # Compare decimated results plot(x, type = 'l') points(seq(1,100, 2), y, col = \"green\") points(seq(1,100, 2), z, col = \"red\")"},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the trend for one or more signals — detrend","title":"Remove the trend for one or more signals — detrend","text":"'Detrending' often used signal power calculation.","code":""},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the trend for one or more signals — detrend","text":"","code":"detrend(x, trend = c(\"constant\", \"linear\"), break_points = NULL)"},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the trend for one or more signals — detrend","text":"x numerical complex, vector matrix trend trend signal; choices 'constant' 'linear' break_points integer vector, NULL; used trend 'linear' remove piecewise linear trend; throw warnings trend 'constant'","code":""},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the trend for one or more signals — detrend","text":"signals trend removed matrix form; number columns number signals, number rows length signals","code":""},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the trend for one or more signals — detrend","text":"","code":"x <- rnorm(100, mean = 1) + c(   seq(0, 5, length.out = 50),   seq(5, 3, length.out = 50)) plot(x)   plot(detrend(x, 'constant'))  plot(detrend(x, 'linear'))  plot(detrend(x, 'linear', 50))"},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":null,"dir":"Reference","previous_headings":"","what":"Show channel signals with diagnostic plots — diagnose_channel","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"diagnostic plots include 'Welch Periodogram' (pwelch) histogram (hist)","code":""},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"","code":"diagnose_channel(   s1,   s2 = NULL,   sc = NULL,   srate,   name = \"\",   try_compress = TRUE,   max_freq = 300,   window = ceiling(srate * 2),   noverlap = window/2,   std = 3,   which = NULL,   main = \"Channel Inspection\",   col = c(\"black\", \"red\"),   cex = 1.2,   cex.lab = 1,   lwd = 0.5,   plim = NULL,   nclass = 100,   start_time = 0,   boundary = NULL,   mar = c(3.1, 4.1, 2.1, 0.8) * (0.25 + cex * 0.75) + 0.1,   mgp = cex * c(2, 0.5, 0),   xaxs = \"i\",   yaxs = \"i\",   xline = 1.66 * cex,   yline = 2.66 * cex,   tck = -0.005 * (3 + cex),   ... )"},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"s1 main signal draw s2 comparing signal draw; usually s1 filters; must sampling rate s1; can NULL sc decimated s1 show srate high; automatically generated NULL srate sampling rate name name s1, vector two names s1 s2 s2 provided try_compress whether try compress (decimate) s1 srate high performance concerns max_freq maximum frequency display 'Welch Periodograms' window, noverlap see pwelch std standard deviation channel signals used determine boundary; default plus-minus 3 standard deviation NULL integer 1 4; NULL, plots displayed; otherwise subplot displayed main title signal plot col colors s1 s2 cex, lwd, mar, cex.lab, mgp, xaxs, yaxs, tck, ... graphical parameters; see par plim y-axis limit draw 'Welch Periodograms' nclass number classes show histogram (hist) start_time starting time channel (used draw signals) boundary red boundary show channel plot; default automatically determined std xline, yline distance axis labels towards ticks","code":""},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"list boundary y-axis limit used draw channel","code":""},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"","code":"library(ravetools)  # Generate 20 second data at 2000 Hz time <- seq(0, 20, by = 1 / 2000) signal <- sin( 120 * pi * time) +   sin(time * 20*pi) +   exp(-time^2) *   cos(time * 10*pi) +   rnorm(length(time))  signal2 <- notch_filter(signal, 2000)  diagnose_channel(signal, signal2, srate = 2000,                  name = c(\"Raw\", \"Filtered\"), cex = 1)"},{"path":"https://dipterix.org/ravetools/reference/dijkstras-path.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate distances along a surface — dijkstras-path","title":"Calculate distances along a surface — dijkstras-path","text":"Calculate surface distances graph mesh using 'Dijkstra' method.","code":""},{"path":"https://dipterix.org/ravetools/reference/dijkstras-path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate distances along a surface — dijkstras-path","text":"","code":"dijkstras_surface_distance(   start_node,   positions,   faces,   face_index_start = NA,   max_search_distance = NA,   max_edge_length = NA,   verbose = FALSE )  surface_path(x, target_node)"},{"path":"https://dipterix.org/ravetools/reference/dijkstras-path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate distances along a surface — dijkstras-path","text":"start_node integer, row index positions start calculating distances. integer must 1-indexed exceed total number positions rows positions numeric matrix NA values. number row total count nodes (vertices), number columns represent node dimension. row represents node. faces integer matrix row containing indices nodes. graphs, faces matrix two columns defining connecting edges; '3D' mesh, faces three-column matrix defining face index mesh triangles. face_index_start integer, start nodes faces; please specify input explicitly first node contained faces. Default NA (determined minimal number faces). reason set input programs use 1 represent first node, start 0. max_search_distance numeric, maximum distance iterate; default NA, iterate search whole mesh max_edge_length numeric, maximum edge length consider; default NA, consider edges. triangular mesh objects, possible edges long consider \"valid\" path. User input ignore edges. verbose whether verbose progress; default false x distance calculation results returned dijkstras_surface_distance function target_node target node number reach (starting node); target_node always 1-indexed.","code":""},{"path":"https://dipterix.org/ravetools/reference/dijkstras-path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate distances along a surface — dijkstras-path","text":"dijkstras_surface_distance returns list distance table meta configurations. surface_path returns data frame node ID (start_node target_node) cumulative distance along shortest path.","code":""},{"path":"https://dipterix.org/ravetools/reference/dijkstras-path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate distances along a surface — dijkstras-path","text":"","code":"# ---- Toy example --------------------  # Position is 2D, total 6 points positions <- matrix(runif(6 * 2), ncol = 2)  # edges defines connected nodes edges <- matrix(ncol = 2, byrow = TRUE, data = c(   1,2,   2,3,   1,3,   2,4,   3,4,   2,5,   4,5,   2,5,   4,6,   5,6 ))  # calculate distances ret <- dijkstras_surface_distance(   start_node = 1,   positions = positions,   faces = edges,   face_index_start = 1 )  # get shortest path from the first node to the last path <- surface_path(ret, target_node = 6)  # plot the results from_node <- path$path[-nrow(path)] to_node <- path$path[-1] plot(positions, pch = 16, axes = FALSE,      xlab = \"X\", ylab = \"Y\", main = \"Dijkstra's shortest path\") segments(   x0 = positions[edges[,1],1], y0 = positions[edges[,1],2],   x1 = positions[edges[,2],1], y1 = positions[edges[,2],2] )  points(positions[path$path,], col = \"steelblue\", pch = 16) arrows(   x0 = positions[from_node,1], y0 = positions[from_node,2],   x1 = positions[to_node,1], y1 = positions[to_node,2],   col = \"steelblue\", lwd = 2, length = 0.1, lty = 2 )  points(positions[1,,drop=FALSE], pch = 16, col = \"orangered\") points(positions[6,,drop=FALSE], pch = 16, col = \"purple3\")   # ---- Example with mesh ------------------------------------ read.fs.surface <- internal_rave_function(   \"read.fs.surface\", \"threeBrain\")  if(interactive() && is.function(read.fs.surface)) {    # Please install package `threeBrain`. and library(threeBrain)   # the following code set up the files   read.fs.surface <- internal_rave_function(     \"read.fs.surface\", \"threeBrain\")   default_template_directory <- internal_rave_function(     \"default_template_directory\", \"threeBrain\")   surface_path <- file.path(default_template_directory(),                             \"N27\", \"surf\", \"lh.pial\")   if(!file.exists(surface_path)) {     internal_rave_function(       \"download_N27\", \"threeBrain\")()   }    # Example starts from here --->   # Load the mesh   mesh <- read.fs.surface(surface_path)    # Calculate the path with maximum radius 100   ret <- dijkstras_surface_distance(     start_node = 1,     positions = mesh$vertices,     faces = mesh$faces,     max_search_distance = 100,     verbose = TRUE   )    # get shortest path from the first node to node 43144   path <- surface_path(ret, target_node = 43144)    # plot   from_nodes <- path$path[-nrow(path)]   to_nodes <- path$path[-1]   # calculate colors   pal <- colorRampPalette(     colors = c(\"red\", \"orange\", \"orange3\", \"purple3\", \"purple4\")   )(1001)   col <- pal[ceiling(     path$distance / max(path$distance, na.rm = TRUE) * 1000   ) + 1]   par(mfrow = c(2, 2), mar = c(0, 0, 0, 0))   for(xdim in c(1, 2, 3)) {     if( xdim < 3 ) {       ydim <- xdim + 1     } else {       ydim <- 3       xdim <- 1     }     plot(       mesh$vertices[, xdim], mesh$vertices[, ydim],       pch = \".\", col = \"#BEBEBE33\", axes = FALSE,       xlab = \"P - A\", ylab = \"S - I\", asp = 1     )     segments(       x0 = mesh$vertices[from_nodes, xdim],       y0 = mesh$vertices[from_nodes, ydim],       x1 = mesh$vertices[to_nodes, xdim],       y1 = mesh$vertices[to_nodes, ydim],       col = col     )   }    # plot distance map   distances <- ret$paths$distance   col <- pal[ceiling(distances / max(distances, na.rm = TRUE) * 1000) + 1]   selection <- !is.na(distances)    plot(     mesh$vertices[, 2], mesh$vertices[, 3],     pch = \".\", col = \"#BEBEBE33\", axes = FALSE,     xlab = \"P - A\", ylab = \"S - I\", asp = 1   )   points(     mesh$vertices[selection, c(2, 3)],     col = col[selection],     pch = \".\"   )    # reset graphic state   par(mfrow = c(1, 1), mar = c(5.1, 4.1, 4.1, 2.1))  }"},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate massive covariance matrix in parallel — fast_cov","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"Speed covariance calculation large matrices. default behavior cov ('pearson', NA handling).","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"","code":"fast_cov(x, y = NULL, col_x = NULL, col_y = NULL, df = NA)"},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"x numeric vector, matrix data frame; matrix highly recommended maximize performance y NULL (default) vector, matrix data frame compatible dimensions x; default equivalent y = x col_x integers indicating subset indices (columns) x calculate covariance, NULL include columns; default NULL col_y integers indicating subset indices (columns) y calculate covariance, NULL include columns; default NULL df scalar indicating degrees freedom; default nrow(x)-1","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"covariance matrix x y. Note NA handling. missing values lead NA resulting covariance matrices.","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)  x <- matrix(rnorm(400), nrow = 100)  # Call `cov(x)` to compare fast_cov(x) #>             [,1]        [,2]        [,3]        [,4] #> [1,]  1.17573362 -0.03815376 -0.02612938  0.09084506 #> [2,] -0.03815376  0.98190035 -0.04280019  0.04419732 #> [3,] -0.02612938 -0.04280019  1.17968697 -0.02620016 #> [4,]  0.09084506  0.04419732 -0.02620016  0.92915144  # Calculate covariance of subsets fast_cov(x, col_x = 1, col_y = 1:2) #>          [,1]        [,2] #> [1,] 1.175734 -0.03815376  if(interactive()){  # Speed comparison, better to use multiple cores (4, 8, or more) # to show the differences.  ravetools_threads(n_threads = -1) x <- matrix(rnorm(100000), nrow = 1000) microbenchmark::microbenchmark(   fast_cov = {     fast_cov(x, col_x = 1:50, col_y = 51:100)   },   cov = {     cov(x[,1:50], x[,51:100])   },   unit = 'ms', times = 10 )  }"},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute quantiles — fast_quantile","title":"Compute quantiles — fast_quantile","text":"Compute quantiles","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute quantiles — fast_quantile","text":"","code":"fast_quantile(x, prob = 0.5, na.rm = FALSE, ...)  fast_median(x, na.rm = FALSE, ...)  fast_mvquantile(x, prob = 0.5, na.rm = FALSE, ...)  fast_mvmedian(x, na.rm = FALSE, ...)"},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute quantiles — fast_quantile","text":"x numerical-value vector fast_quantile fast_median, column-major matrix fast_mvquantile fast_mvmedian prob probability value 0 1 na.rm logical; true, NA removed x quantiles computed ... reserved future use","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute quantiles — fast_quantile","text":"fast_quantile fast_median calculate univariate quantiles (single-value return); fast_mvquantile fast_mvmedian calculate multivariate quantiles (column, result lengths equal number columns).","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute quantiles — fast_quantile","text":"","code":"fast_quantile(runif(1000), 0.1) #> [1] 0.08398884 fast_median(1:100) #> [1] 50.5  x <- matrix(rnorm(100), ncol = 2) fast_mvquantile(x, 0.2) #> [1] -0.6648696 -0.9950019 fast_mvmedian(x) #> [1] 0.25158133 0.01044387  # Compare speed for vectors (usually 30% faster) x <- rnorm(10000) microbenchmark::microbenchmark(   fast_median = fast_median(x),   base_median = median(x),   # bioc_median = Biobase::rowMedians(matrix(x, nrow = 1)),   times = 100, unit = \"milliseconds\" ) #> Unit: milliseconds #>         expr      min        lq      mean   median       uq      max neval #>  fast_median 0.081542 0.1237360 0.1401410 0.144860 0.158856 0.189212   100 #>  base_median 0.182360 0.1923685 0.1988962 0.198009 0.203209 0.279722   100  # Multivariate cases # (5~7x faster than base R) # (3~5x faster than Biobase rowMedians) x <- matrix(rnorm(100000), ncol = 20) microbenchmark::microbenchmark(   fast_median = fast_mvmedian(x),   base_median = apply(x, 2, median),   # bioc_median = Biobase::rowMedians(t(x)),   times = 10, unit = \"milliseconds\" ) #> Unit: milliseconds #>         expr      min       lq     mean   median       uq      max neval #>  fast_median 0.927138 0.966732 1.074122 1.093519 1.176073 1.232077    10 #>  base_median 2.821800 2.860262 2.919782 2.865041 2.926304 3.159099    10"},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill a volume cube based on water-tight surface — fill_surface","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"Create cube volume (256 'voxels' margin), fill 'voxels' inside surface.","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"","code":"fill_surface(   surface,   inflate = 0,   IJK2RAS = NULL,   preview = FALSE,   preview_frame = 128 )"},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"surface surface mesh, can mesh objects rgl freesurferformats packages inflate amount 'voxels' inflate final result; must non-negative integer. zero inflate value means resulting volume tightly close surface IJK2RAS volume 'IJK' (zero-indexed coordinate index) 'tkrRAS' transform, default automatically determined leave `NULL` know set preview whether preview results; default false preview_frame integer 1 256 depth frame used generate preview.","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"list containing filled volume parameters used generate volume","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"function creates volume (256 margin) fill volume surface mesh. surface vertex points embedded volume first. points may connected together, hence 'voxel', cube patch applied grow volume. , volume bucket-filled corner, forming negated mask \"outside--surface\" area. inverted bucket-filled volume shrunk mask boundary tightly fits surface","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"Zhengjia Wang","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"","code":"if(interactive()) { # takes > 5s to run example  # Generate a sphere surface <- vcg_sphere() surface$vb[1:3, ] <- surface$vb[1:3, ] * 50  fill_surface(surface, preview = TRUE)  }"},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter one-dimensional signal — filter_signal","title":"Filter one-dimensional signal — filter_signal","text":"function written scratch. result compared 'Matlab' filter function one-dimensional real inputs. situations matrix b multi-dimensional x implemented.","code":""},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter one-dimensional signal — filter_signal","text":"","code":"filter_signal(b, a, x, z)"},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter one-dimensional signal — filter_signal","text":"b one-dimensional real numerical vector, moving-average coefficients ARMA filter auto-regressive (recursive) coefficients ARMA filter x numerical vector input (real value) z initial condition, must length n-1, n maximum lengths b; default zeros","code":""},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter one-dimensional signal — filter_signal","text":"list two vectors: first vector filtered signal; second vector final state z","code":""},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter one-dimensional signal — filter_signal","text":"","code":"t <- seq(0, 1, by = 0.01) x <- sin(2 * pi * t * 2.3) bf <- signal::butter(2, c(0.15, 0.3))  res <- filter_signal(bf$b, bf$a, x) y <- res[[1]] z <- res[[2]]  ## Matlab (2022a) equivalent: # t = [0:0.01:1]; # x = sin(2 * pi * t * 2.3); # [b,a] = butter(2,[.15,.3]); # [y,z] = filter(b, a, x)"},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward and reverse filter a one-dimensional signal — filtfilt","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"result tested 'Matlab' filtfilt function. Currently function supports one filter time.","code":""},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"","code":"filtfilt(b, a, x)"},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"b one-dimensional real numerical vector, moving-average coefficients ARMA filter auto-regressive (recursive) coefficients ARMA filter x numerical vector input (real value)","code":""},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"filtered signal, normally length input signal x.","code":""},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"","code":"t <- seq(0, 1, by = 0.01) x <- sin(2 * pi * t * 2.3) bf <- signal::butter(2, c(0.15, 0.3))  res <- filtfilt(bf$b, bf$a, x)  ## Matlab (2022a) equivalent: # t = [0:0.01:1]; # x = sin(2 * pi * t * 2.3); # [b,a] = butter(2,[.15,.3]); # res = filtfilt(b, a, x)"},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Grow volume mask — grow_volume","title":"Grow volume mask — grow_volume","text":"Grow volume mask","code":""},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grow volume mask — grow_volume","text":"","code":"grow_volume(volume, x, y = x, z = x, threshold = 0.5)"},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grow volume mask — grow_volume","text":"volume volume mask array, must 3-dimensional array x, y, z size grow along direction threshold threshold convolution","code":""},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grow volume mask — grow_volume","text":"","code":"par(mfrow = c(2,3), mar = c(0.1,0.1,3.1,0.1))  mask <- array(0, c(21,21,21)) mask[11,11,11] <- 1 image(mask[11,,], asp = 1,       main = \"Original mask\", axes = FALSE) image(grow_volume(mask, 2)[11,,], asp = 1,       main = \"Dilated (size=2) mask\", axes = FALSE) image(grow_volume(mask, 5)[11,,], asp = 1,       main = \"Dilated (size=5) mask\", axes = FALSE)  mask[11, sample(11,2), sample(11,2)] <- 1 image(mask[11,,], asp = 1,       main = \"Original mask\", axes = FALSE) image(grow_volume(mask, 2)[11,,], asp = 1,       main = \"Dilated (size=2) mask\", axes = FALSE) image(grow_volume(mask, 5)[11,,], asp = 1,       main = \"Dilated (size=5) mask\", axes = FALSE)"},{"path":"https://dipterix.org/ravetools/reference/internal_rave_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Get external function from 'RAVE' — internal_rave_function","title":"Get external function from 'RAVE' — internal_rave_function","text":"Internal function used examples relative 'RAVE' project used directly.","code":""},{"path":"https://dipterix.org/ravetools/reference/internal_rave_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get external function from 'RAVE' — internal_rave_function","text":"","code":"internal_rave_function(name, pkg, inherit = TRUE, on_missing = NULL)"},{"path":"https://dipterix.org/ravetools/reference/internal_rave_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get external function from 'RAVE' — internal_rave_function","text":"name function variable name pkg 'RAVE' package name inherit passed get0 on_missing default value return function found","code":""},{"path":"https://dipterix.org/ravetools/reference/internal_rave_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get external function from 'RAVE' — internal_rave_function","text":"Function object found, otherwise on_missing.","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and interpolate stimulation signals — interpolate_stimulation","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"Find interpolate stimulation signals","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"","code":"interpolate_stimulation(   x,   sample_rate,   duration = 40/sample_rate,   ord = 4L,   nknots = 100,   nsd = 1,   nstim = NULL,   regularization = 0.5 )"},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"x numerical vector representing analog signal sample_rate sampling frequency duration time second: duration interpolation ord spline order, default 4 nknots rough number knots use, default 100 nsd number standard deviation detect stimulation signals, default 1 nstim number stimulation pulses, default auto-detect regularization regularization parameter case inverting singular matrices, default 0.5","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"Interpolated signal attribute sample points interpolated","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"","code":"x0 <- rnorm(1000) / 5 + sin(1:1000 / 300)  # Simulates pulase signals x <- x0 x[400:410] <- -100 x[420:430] <- 100  fitted <- interpolate_stimulation(x, 100, duration = 0.3, nknots = 10, nsd = 2)  par(mfrow = c(2, 1))  plot(fitted, type = 'l', col = 'blue', lwd = 2) lines(x, col = 'red') lines(x0, col = 'black') legend(\"topleft\", c(\"Interpolated\", \"Observed\", \"Underlying\"),        lty = 1, col = c(\"blue\", \"red\", \"black\"))  pwelch(x0, 100, 200, 100, plot = 1, col = 'black', ylim = c(-50, 50)) pwelch(x, 100, 200, 100, plot = 2, col = 'red') pwelch(fitted, 100, 200, 100, plot = 2, col = 'blue')"},{"path":"https://dipterix.org/ravetools/reference/is_not_cran.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function — is_not_cran","title":"Internal function — is_not_cran","text":"call function directly","code":""},{"path":"https://dipterix.org/ravetools/reference/is_not_cran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function — is_not_cran","text":"","code":"is_not_cran(if_interactive = TRUE, verbose = FALSE)"},{"path":"https://dipterix.org/ravetools/reference/is_not_cran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function — is_not_cran","text":"if_interactive, verbose default TRUE","code":""},{"path":"https://dipterix.org/ravetools/reference/is_not_cran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function — is_not_cran","text":"logical","code":""},{"path":"https://dipterix.org/ravetools/reference/left_hippocampus_mask.html","id":null,"dir":"Reference","previous_headings":"","what":"Left 'Hippocampus' of 'N27-Collin' brain — left_hippocampus_mask","title":"Left 'Hippocampus' of 'N27-Collin' brain — left_hippocampus_mask","text":"Left 'Hippocampus' 'N27-Collin' brain","code":""},{"path":"https://dipterix.org/ravetools/reference/left_hippocampus_mask.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left 'Hippocampus' of 'N27-Collin' brain — left_hippocampus_mask","text":"","code":"left_hippocampus_mask"},{"path":"https://dipterix.org/ravetools/reference/left_hippocampus_mask.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Left 'Hippocampus' of 'N27-Collin' brain — left_hippocampus_mask","text":"three-mode integer mask array values 1 ('Hippocampus') 0 (brain tissues)","code":""},{"path":"https://dipterix.org/ravetools/reference/matlab_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"'Matlab' heat-map plot palette — matlab_palette","title":"'Matlab' heat-map plot palette — matlab_palette","text":"'Matlab' heat-map plot palette","code":""},{"path":"https://dipterix.org/ravetools/reference/matlab_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Matlab' heat-map plot palette — matlab_palette","text":"","code":"matlab_palette()"},{"path":"https://dipterix.org/ravetools/reference/matlab_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Matlab' heat-map plot palette — matlab_palette","text":"vector 64 colors","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 3D mesh surface from volume data — mesh_from_volume","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"function soft-deprecated. Please use vcg_mesh_volume, vcg_uniform_remesh, vcg_smooth_explicit vcg_smooth_implicit.","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"","code":"mesh_from_volume(   volume,   output_format = c(\"rgl\", \"freesurfer\"),   IJK2RAS = NULL,   threshold = 0,   verbose = TRUE,   remesh = TRUE,   remesh_voxel_size = 1,   remesh_multisample = TRUE,   remesh_automerge = TRUE,   smooth = FALSE,   smooth_lambda = 10,   smooth_delta = 20,   smooth_method = \"surfPreserveLaplace\" )"},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"volume 3-dimensional volume array output_format resulting data format, choices 'rgl' 'freesurfer' IJK2RAS volume 'IJK' (zero-indexed coordinate index) 'tkrRAS' transform, default automatically determined threshold threshold used create volume mask; surface created fit mask boundaries verbose whether verbose progress remesh whether re-sample mesh using vcg_uniform_remesh remesh_voxel_size, remesh_multisample, remesh_automerge see arguments vcg_uniform_remesh smooth whether smooth mesh via vcg_smooth_explicit smooth_lambda, smooth_delta, smooth_method see vcg_smooth_explicit","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"'mesh3d' surface output_format 'rgl', 'fs.surface' surface otherwise.","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"","code":"volume <- array(0, dim = c(8,8,8)) volume[4:5, 4:5, 4:5] <- 1  graphics::image(x = volume[4,,])   # you can use rgl::wire3d(mesh) to visualize the mesh mesh <- mesh_from_volume(volume, verbose = FALSE)"},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute 'multitaper' spectral densities of time-series data — multitaper","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"Compute 'multitaper' spectral densities time-series data","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"","code":"multitaper_config(   data_length,   fs,   frequency_range = NULL,   time_bandwidth = 5,   num_tapers = NULL,   window_params = c(5, 1),   nfft = NA,   detrend_opt = \"linear\" )  multitaper(   data,   fs,   frequency_range = NULL,   time_bandwidth = 5,   num_tapers = NULL,   window_params = c(5, 1),   nfft = NA,   detrend_opt = \"linear\" )"},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"data_length length data fs sampling frequency 'Hz' frequency_range frequency range look ; length two time_bandwidth number indicating time-half bandwidth product; .e. window duration times half bandwidth main lobe; default 5 num_tapers number 'DPSS' tapers use; default NULL automatically computed floor(2*time_bandwidth - 1) window_params vector two numbers; first number window size seconds; second number step size; default c(5, 1) nfft 'NFFT' size, positive; see 'Details' detrend_opt want remove trend data window; options 'linear' (default), 'constant', '' data numerical vector, signal traces","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"multitaper_config returns list configuration parameters filters; multitaper also returns time, frequency corresponding spectral power.","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"original source code comes 'Prerau' Lab (see 'Github' repository 'multitaper_toolbox' user 'preraulab'). results tend agree 'Python' implementation precision order 1E-7 standard deviation 1E-5. original copy licensed Creative Commons Attribution 'NC'-'SA' 4.0 International License (https://creativecommons.org/licenses/-nc-sa/4.0/). package ('ravetools') redistributes multitaper function minor modifications nfft. original copy parameter control exact numbers nfft, nfft always power 2. choosing nfft power 2 always recommended, modified code allows choices.","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"","code":"if(interactive()) {  time <- seq(0, 3, by = 0.001) x <- sin(time * 20*pi) + exp(-time^2) * cos(time * 10*pi)  res <- multitaper(   x, 1000, frequency_range = c(0,15),   time_bandwidth=1.5,   window_params=c(2,0.01) )   image(   x = res$time,   y = res$frequency,   z = 10 * log10(res$spec),   xlab = \"Time (s)\",   ylab = 'Frequency (Hz)',   col = matlab_palette() )  }"},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"Create Matrix4 instance 'Affine' transform","code":""},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"","code":"new_matrix4()  as_matrix4(m)"},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"m matrix vector converted Matrix4 instance; m must one followings: matrices, dimension must 4x4, 3x4 (last row 0 0 0 1), 3x3 (linear transform); vectors, length must 16, 12 (append 0 0 0 1 internally), 3 (translation), 1 (scale).","code":""},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"Matrix4 instance","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Quaternion instance to store '3D' rotation — new_quaternion","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"Create instances mimic 'three.js' syntax.","code":""},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"","code":"new_quaternion(x = 0, y = 0, z = 0, w = 1)  as_quaternion(q)"},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"x, y, z, w numeric length one q R object converted Quaternion","code":""},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"Quaternion instance","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector3 instance to store '3D' points — new_vector3","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"Create instances mimic 'three.js' syntax.","code":""},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"","code":"new_vector3(x = 0, y = 0, z = 0)  as_vector3(v)"},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"x, y, z numeric, must length, 'xyz' positions v R object converted Vector3 instance","code":""},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"Vector3 instance","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"","code":"vec3 <- new_vector3(   x = 1:9,   y = 9:1,   z = rep(c(1,2,3), 3) )  vec3[] #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    1    2    3    4    5    6    7    8    9 #> [2,]    9    8    7    6    5    4    3    2    1 #> [3,]    1    2    3    1    2    3    1    2    3  # transform m <- new_matrix4()  # rotation xy plane by 30 degrees m$make_rotation_z(pi / 6) #> <Matrix4> #>           [,1]       [,2] [,3] [,4] #> [1,] 0.8660254 -0.5000000    0    0 #> [2,] 0.5000000  0.8660254    0    0 #> [3,] 0.0000000  0.0000000    1    0 #> [4,] 0.0000000  0.0000000    0    1  vec3$apply_matrix4(m) #> <Vector3: len=9> #>            x        y z #> 1 -3.6339746 8.294229 1 #> 2 -2.2679492 7.928203 2 #> 3 -0.9019238 7.562178 3 #> 4  0.4641016 7.196152 1 #> 5  1.8301270 6.830127 2 #> ...  vec3[] #>           [,1]      [,2]       [,3]      [,4]     [,5]     [,6]     [,7] #> [1,] -3.633975 -2.267949 -0.9019238 0.4641016 1.830127 3.196152 4.562178 #> [2,]  8.294229  7.928203  7.5621778 7.1961524 6.830127 6.464102 6.098076 #> [3,]  1.000000  2.000000  3.0000000 1.0000000 2.000000 3.000000 1.000000 #>          [,8]     [,9] #> [1,] 5.928203 7.294229 #> [2,] 5.732051 5.366025 #> [3,] 2.000000 3.000000  as_vector3(c(1,2,3)) #> <Vector3: len=1> #>   x y z #> 1 1 2 3"},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply 'Notch' filter — notch_filter","title":"Apply 'Notch' filter — notch_filter","text":"Apply 'Notch' filter","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply 'Notch' filter — notch_filter","text":"","code":"notch_filter(   s,   sample_rate,   lb = c(59, 118, 178),   ub = c(61, 122, 182),   domain = 1 )"},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply 'Notch' filter — notch_filter","text":"s numerical vector domain=1 (voltage signals), complex vector domain=0 sample_rate sample rate lb filter lower bound frequencies remove ub filter upper bound frequencies remove; shares length lb domain 1 input signal time domain, 0 frequency domain","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply 'Notch' filter — notch_filter","text":"filtered signal time domain (real numerical vector)","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply 'Notch' filter — notch_filter","text":"Mainly used remove electrical line frequencies 60, 120, 180 Hz.","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply 'Notch' filter — notch_filter","text":"","code":"time <- seq(0, 3, 0.005) s <- sin(120 * pi * time) + rnorm(length(time))  # Welch periodogram shows a peak at 60Hz pwelch(s, 200, plot = 1, log = \"y\")  # notch filter to remove 60Hz s1 <- notch_filter(s, 200, lb = 59, ub = 61) pwelch(s1, 200, plot = 2, log = \"y\", col = \"red\")"},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get thread options — parallel-options","title":"Set or get thread options — parallel-options","text":"Set get thread options","code":""},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get thread options — parallel-options","text":"","code":"detect_threads()  ravetools_threads(n_threads = \"auto\", stack_size = \"auto\")"},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get thread options — parallel-options","text":"n_threads number threads set stack_size Stack size (bytes) use worker threads. default used \"auto\" 2MB 32-bit systems 4MB 64-bit systems.","code":""},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or get thread options — parallel-options","text":"detect_threads returns integer default threads determined number CPU cores; ravetools_threads returns nothing.","code":""},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or get thread options — parallel-options","text":"","code":"if(interactive()){   detect_threads()   ravetools_threads(n_threads = 2) }"},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot one or more signal traces in the same figure — plot_signals","title":"Plot one or more signal traces in the same figure — plot_signals","text":"Plot one signal traces figure","code":""},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot one or more signal traces in the same figure — plot_signals","text":"","code":"plot_signals(   signals,   sample_rate = 1,   col = graphics::par(\"fg\"),   space = 0.995,   space_mode = c(\"quantile\", \"absolute\"),   start_time = 0,   duration = NULL,   compress = TRUE,   channel_names = NULL,   time_shift = 0,   xlab = \"Time (s)\",   ylab = \"Electrode\",   lwd = 0.5,   new_plot = TRUE,   xlim = NULL,   cex = 1,   cex.lab = 1,   mar = c(3.1, 2.1, 2.1, 0.8) * (0.25 + cex * 0.75) + 0.1,   mgp = cex * c(2, 0.5, 0),   xaxs = \"r\",   yaxs = \"i\",   xline = 1.5 * cex,   yline = 1 * cex,   tck = -0.005 * (3 + cex),   ... )"},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot one or more signal traces in the same figure — plot_signals","text":"signals numerical matrix row signal trace column contains signal values time point sample_rate sampling frequency col signal color, can vector one space vertical spacing among traces; values greater 1, spacing absolute; default 0.995; values less equal 1, percentile whole data. However, quantile mode can manually turned \"absolute\" required; see space_mode space_mode mode spacing, used space less equal one; default quantile start_time time start drawing relative first column duration duration signal draw compress whether compress signals data large channel_names NULL character vector channel names time_shift actual start time signal. Unlike start_time, actual physical time represented first column xlab, ylab, lwd, xlim, cex, cex.lab, mar, mgp, xaxs, yaxs, tck, ... plot parameters; see plot par new_plot whether draw new plot; default true xline, yline gap axis label","code":""},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot one or more signal traces in the same figure — plot_signals","text":"","code":"n <- 1000 base_signal <- c(rep(0, n/2), sin(seq(0,10,length.out = n/2))) * 10 signals <- rbind(rnorm(n) + base_signal,                  rbinom(n, 10, 0.3) + base_signal,                  rt(n, 5) + base_signal) plot_signals(signals, sample_rate = 100)  plot_signals(signals, sample_rate = 100, start_time = 5)  plot_signals(signals, sample_rate = 100,              start_time = 5, time_shift = 100)"},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 'Welch Periodogram' — pwelch","title":"Calculate 'Welch Periodogram' — pwelch","text":"pwelch single signal trace ; mv_pwelch multiple traces. Currently mv_pwelch experimental called directly.","code":""},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 'Welch Periodogram' — pwelch","text":"","code":"pwelch(   x,   fs,   window = 64,   noverlap = 8,   nfft = 256,   col = \"black\",   xlim = NULL,   ylim = NULL,   main = \"Welch periodogram\",   plot = 0,   log = c(\"xy\", \"\", \"x\", \"y\"),   ... )  # S3 method for pwelch print(x, ...)  # S3 method for pwelch plot(   x,   log = c(\"xy\", \"x\", \"y\", \"\"),   se = FALSE,   xticks,   type = \"l\",   add = FALSE,   col = graphics::par(\"fg\"),   col.se = \"orange\",   alpha.se = 0.5,   lty = 1,   lwd = 1,   cex = 1,   las = 1,   main = \"Welch periodogram\",   xlab,   ylab,   xlim = NULL,   ylim = NULL,   xaxs = \"i\",   yaxs = \"i\",   xline = 1.2 * cex,   yline = 2 * cex,   mar = c(2.6, 3.8, 2.1, 0.6) * (0.5 + cex/2),   mgp = cex * c(2, 0.5, 0),   tck = -0.02 * cex,   grid = TRUE,   ... )  mv_pwelch(x, margin, fs, nfft)"},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 'Welch Periodogram' — pwelch","text":"x numerical vector row-major vector, signals. x matrix, row channel. plot function, x instance returned pwelch function. fs sample rate, average number time points per second window window length time points, default size 64 noverlap overlap two adjacent windows, measured time points; default 8 nfft number basis functions apply col, xlim, ylim, main, type, cex, las, xlab, ylab, lty, lwd, xaxs, yaxs, mar, mgp, tck parameters passed plot.default plot integer, whether plot result ; choices 0, plot; 1 plot new canvas; 2 add existing canvas log indicates axis log10-transformed, used plot function. 'x' axis, log10-transform; 'y' axis, 10log10-transform (decibel unit). Choices \"xy\", \"x\", \"y\", \"\". ... passed plot.pwelch ignored se logical positive number indicating whether plot standard error mean; default false. provided number, multiple standard error drawn. option available power log-scale (decibel unit) xticks ticks show frequency axis add logical, whether plot added existing canvas col.se, alpha.se controls color opacity standard error xline, yline controls close axis labels corresponding axes grid whether draw rectangular grid lines plot; respected add=FALSE; default true margin margin pwelch applied ","code":""},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 'Welch Periodogram' — pwelch","text":"list class 'ravetools-pwelch' contains following items: freq frequencies used calculate 'periodogram' spec resulting spectral power frequency window window function (numerical vector) used noverlap number overlapping time-points two adjacent windows nfft number basis functions fs sample rate x_len input signal length method character string 'Welch'","code":""},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate 'Welch Periodogram' — pwelch","text":"","code":"x <- rnorm(1000) pwel <- pwelch(x, 100) pwel #> Welch Periodogram: #>   # channels: 1 #>   time points: 1000 #>   sample rate: 100.00 #>   window size: 64 #>   window overlaps: 8 #>   filter count: 256  plot(pwel, log = \"xy\")"},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw vectors to R vectors — raw-to-sexp","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"Convert raw vectors R vectors","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"","code":"raw_to_uint8(x)  raw_to_uint16(x)  raw_to_uint32(x)  raw_to_int8(x)  raw_to_int16(x)  raw_to_int32(x)  raw_to_int64(x)  raw_to_float(x)  raw_to_string(x)"},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"x raw vector bytes","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"Numeric vectors, except raw_to_string, returns string.","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"numeric conversions, function names straightforward. example, raw_to_uintN converts raw vectors unsigned integers, raw_to_intN converts raw vectors signed integers. number 'N' stands number bits used store integer. example raw_to_uint8 uses 8 bits (1 byte) store integer, hence value range 0-255. input data length must multiple element size represented underlying data. example uint16 integer uses 16 bites, one raw number uses 8 bits, hence two raw vectors can form one unsigned integer-16. , raw_to_uint16 requires length input multiple two. easy calculation : length x times 8, must divided 'N' (see last paragraph definition). returned data uses closest available R native data type can fully represent data. example, R single float type, hence raw_to_float returns double type, can represent possible values float. raw_to_uint32, potential value range 0 - (2^32-1). exceeds limit R integer type (-2^31) - (2^31-1). Therefore, returned values real (double float) data type. native data type can store integer-64 data R, package bit64 provides integer64 type, used raw_to_int64. Currently solution convert raw unsigned integer-64 type. raw_to_string converts raw character string. function respects null character, hence slightly different native rawToChar, translates raw byte--byte. raw byte represents valid character, two functions returns result. However, characters represented raw bytes invalid, raw_to_string stop parsing returns valid characters, rawToChar still try parse, likely result errors. Please see Examples comparisons.","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"","code":"# 0x00, 0x7f, 0x80, 0xFF x <- as.raw(c(0, 127, 128, 255))  raw_to_uint8(x) #> [1]   0 127 128 255  # The first bit becomes the integer sign # 128 -> -128, 255 -> -1 raw_to_int8(x) #> [1]    0  127 -128   -1  ## Comments based on little endian system  # 0x7f00 (32512), 0xFF80 (65408 unsigned, or -128 signed) raw_to_uint16(x) #> [1] 32512 65408 raw_to_int16(x) #> [1] 32512  -128  # 0xFF807F00 (4286611200 unsigned, -8356096 signed) raw_to_uint32(x) #> [1] 4286611200 raw_to_int32(x) #> [1] -8356096  # ---------------------------- String ---------------------------  # ASCII case: all valid x <- charToRaw(\"This is an ASCII string\")  raw_to_string(x) #> [1] \"This is an ASCII string\" rawToChar(x) #> [1] \"This is an ASCII string\"  x <- c(charToRaw(\"This is the end.\"),        as.raw(0),        charToRaw(\"*** is invalid\"))  # rawToChar will raise error raw_to_string(x) #> [1] \"This is the end.\"  # ---------------------------- Integer64 ------------------------ # Runs on little endian system x <- as.raw(c(0x80, 0x00, 0x7f, 0x80, 0xFF, 0x50, 0x7f, 0x00))  # Calculate bitstring, which concaternates the followings # 10000000 (0x80), 00000000 (0x00), 01111111 (0x7f), 10000000 (0x80), # 11111111 (0xFF), 01010000 (0x50), 01111111 (0x7f), 00000000 (0x00)  if(.Platform$endian == \"little\") {   bitstring <- paste0(     \"00000000011111110101000011111111\",     \"10000000011111110000000010000000\"   ) } else {   bitstring <- paste0(     \"00000001000000001111111000000001\",     \"11111111000010101111111000000000\"   ) }  # This is expected value bit64::as.integer64(structure(   bitstring,   class = \"bitstring\" )) #> integer64 #> [1] 35836380344942720  # This is actual value raw_to_int64(x) #> integer64 #> [1] 35836380344942720"},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Imaging registration using 'NiftyReg' — register_volume","title":"Imaging registration using 'NiftyReg' — register_volume","text":"Registers 'CT' 'MRI', 'MRI' another 'MRI'","code":""},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imaging registration using 'NiftyReg' — register_volume","text":"","code":"register_volume(   source,   target,   method = c(\"rigid\", \"affine\", \"nonlinear\"),   interpolation = c(\"cubic\", \"trilinear\", \"nearest\"),   threads = detect_threads(),   symmetric = TRUE,   verbose = TRUE,   ... )"},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imaging registration using 'NiftyReg' — register_volume","text":"source source imaging data, 'nifti' file path; example, 'CT' target target imaging data align ; example, 'MRI' method method transformation, choices 'rigid', 'affine', 'nonlinear' interpolation volumes interpolated, choices 'cubic', 'trilinear', 'nearest' threads, symmetric, verbose, ... see niftyreg","code":""},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imaging registration using 'NiftyReg' — register_volume","text":"See niftyreg","code":""},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imaging registration using 'NiftyReg' — register_volume","text":"","code":"if(interactive()) {  source <- system.file(\"extdata\", \"epi_t2.nii.gz\", package=\"RNiftyReg\") target <- system.file(\"extdata\", \"flash_t1.nii.gz\", package=\"RNiftyReg\") aligned <- register_volume(source, target, verbose = FALSE)  source_img <- aligned$source[[1]] target_img <- aligned$target aligned_img <- aligned$image  par(mfrow = c(2, 2), mar = c(0.1, 0.1, 3.1, 0.1))  pal <- grDevices::grey.colors(256, alpha = 1) image(source_img[,,30], asp = 1, axes = FALSE,       col = pal, main = \"Source image\") image(target_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Target image\") image(aligned_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Aligned image\")  # bucket fill and calculate differences aligned_img[is.nan(aligned_img) | aligned_img <= 1] <- 1 target_img[is.nan(target_img) | aligned_img <= 1] <- 1 diff <- abs(aligned_img / target_img - 1) image(diff[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Percentage Difference\")  }"},{"path":"https://dipterix.org/ravetools/reference/rgl-call.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe ways to call package 'rgl' without requiring 'x11' — rgl-call","title":"Safe ways to call package 'rgl' without requiring 'x11' — rgl-call","text":"Internally used example show-cases. Please install package 'rgl' manually use functions.","code":""},{"path":"https://dipterix.org/ravetools/reference/rgl-call.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe ways to call package 'rgl' without requiring 'x11' — rgl-call","text":"","code":"rgl_call(FUN, ...)  rgl_view(expr, quoted = FALSE, env = parent.frame())  rgl_plot_normals(x, length = 1, lwd = 1, col = 1, ...)"},{"path":"https://dipterix.org/ravetools/reference/rgl-call.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe ways to call package 'rgl' without requiring 'x11' — rgl-call","text":"FUN 'rgl' function name ... passed 'rgl' function expr expression within 'rgl' functions called quoted whether expr quoted env environment expr evaluated x triangular 'mesh3d' object length, lwd, col normal vector length, size, color","code":""},{"path":"https://dipterix.org/ravetools/reference/rgl-call.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe ways to call package 'rgl' without requiring 'x11' — rgl-call","text":"","code":"# Make sure the example does not run when compiling # or check the package if(FALSE) {    volume <- array(0, dim = c(8,8,8))   volume[4:5, 4:5, 4:5] <- 1   mesh <- mesh_from_volume(volume, verbose = FALSE)    rgl_view({      rgl_call(\"shade3d\", mesh, col = 3)     rgl_plot_normals(mesh)    })  }"},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift array by index — shift_array","title":"Shift array by index — shift_array","text":"Re-arrange arrays parallel","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift array by index — shift_array","text":"","code":"shift_array(x, along_margin, unit_margin, shift_amount)"},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift array by index — shift_array","text":"x array, must least matrix along_margin index shifted unit_margin dimension decides shift_amount shift_amount shift amount along along_margin","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift array by index — shift_array","text":"array dimensions input x, index shifted. missing elements filled NA.","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shift array by index — shift_array","text":"simple use-case function think matrix row signal columns stand time. objective align (time-lock) signal according certain events. signal, want shift time points certain amount. case, shift amount defined shift_amount, whose length equals number signals. along_margin=2 want shift time points (column, second dimension) signal. unit_margin=1 shift amount depend signal number.","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift array by index — shift_array","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)    x <- matrix(1:10, nrow = 2, byrow = TRUE) z <- shift_array(x, 2, 1, c(1,2))  y <- NA * x y[1,1:4] = x[1,2:5] y[2,1:3] = x[2,3:5]  # Check if z ang y are the same z - y #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0   NA #> [2,]    0    0    0   NA   NA  # array case # x is Trial x Frequency x Time x <- array(1:27, c(3,3,3))  # Shift time for each trial, amount is 1, -1, 0 shift_amount <- c(1,-1,0) z <- shift_array(x, 3, 1, shift_amount)  if(interactive()){  par(mfrow = c(3, 2), mai = c(0.8, 0.6, 0.4, 0.1)) for( ii in 1:3 ){   image(t(x[ii, ,]), ylab = 'Frequency', xlab = 'Time',         main = paste('Trial', ii))   image(t(z[ii, ,]), ylab = 'Frequency', xlab = 'Time',         main = paste('Shifted amount:', shift_amount[ii])) }  }"},{"path":"https://dipterix.org/ravetools/reference/vcg_isosurface.html","id":null,"dir":"Reference","previous_headings":"","what":"Create surface mesh from 3D-array — vcg_isosurface","title":"Create surface mesh from 3D-array — vcg_isosurface","text":"Create surface 3D-array using marching cubes algorithm","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_isosurface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create surface mesh from 3D-array — vcg_isosurface","text":"","code":"vcg_isosurface(   volume,   threshold_lb = 0,   threshold_ub = NA,   vox_to_ras = diag(c(-1, -1, 1, 1)) )"},{"path":"https://dipterix.org/ravetools/reference/vcg_isosurface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create surface mesh from 3D-array — vcg_isosurface","text":"volume volume mask volume threshold_lb lower-bound threshold creating surface; default 0 threshold_ub upper-bound threshold creating surface; default NA (upper-bound) vox_to_ras 4x4 'affine' transform matrix indicating 'voxel'--world transform.","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_isosurface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create surface mesh from 3D-array — vcg_isosurface","text":"triangular mesh class 'mesh3d'","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_isosurface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create surface mesh from 3D-array — vcg_isosurface","text":"","code":"if(is_not_cran()) {  library(ravetools) data(\"left_hippocampus_mask\")  mesh <- vcg_isosurface(left_hippocampus_mask)   rgl_view({    rgl_call(\"mfrow3d\", 1, 2)    rgl_call(\"title3d\", \"Direct ISOSurface\")   rgl_call(\"shade3d\", mesh, col = 2)    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"ISOSurface + Implicit Smooth\")    rgl_call(\"shade3d\",            vcg_smooth_implicit(mesh, degree = 2),            col = 3) })  } #> Package `rgl` is not installed. Please install `rgl` to use this function. #> Error in loadNamespace(name): there is no package called ‘rgl’"},{"path":"https://dipterix.org/ravetools/reference/vcg_mesh_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute volume for manifold meshes — vcg_mesh_volume","title":"Compute volume for manifold meshes — vcg_mesh_volume","text":"Compute volume manifold meshes","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_mesh_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute volume for manifold meshes — vcg_mesh_volume","text":"","code":"vcg_mesh_volume(mesh)"},{"path":"https://dipterix.org/ravetools/reference/vcg_mesh_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute volume for manifold meshes — vcg_mesh_volume","text":"mesh triangular mesh class 'mesh3d'","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_mesh_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute volume for manifold meshes — vcg_mesh_volume","text":"numeric volume mesh","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_mesh_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute volume for manifold meshes — vcg_mesh_volume","text":"","code":"# Initial mesh mesh <- vcg_sphere()  vcg_mesh_volume(mesh) #> [1] 4.152741"},{"path":"https://dipterix.org/ravetools/reference/vcg_smooth.html","id":null,"dir":"Reference","previous_headings":"","what":"Implicitly smooth a triangular mesh — vcg_smooth","title":"Implicitly smooth a triangular mesh — vcg_smooth","text":"Applies smoothing algorithms triangular mesh.","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_smooth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implicitly smooth a triangular mesh — vcg_smooth","text":"","code":"vcg_smooth_implicit(   mesh,   lambda = 0.2,   use_mass_matrix = TRUE,   fix_border = FALSE,   use_cot_weight = FALSE,   degree = 1L,   laplacian_weight = 1 )  vcg_smooth_explicit(   mesh,   type = c(\"taubin\", \"laplace\", \"HClaplace\", \"fujiLaplace\", \"angWeight\",     \"surfPreserveLaplace\"),   iteration = 10,   lambda = 0.5,   mu = -0.53,   delta = 0.1 )"},{"path":"https://dipterix.org/ravetools/reference/vcg_smooth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implicitly smooth a triangular mesh — vcg_smooth","text":"mesh triangular mesh stored object class 'mesh3d'. lambda vcg_smooth_implicit, amount smoothness, useful use_mass_matrix TRUE; default 0.2. vcg_smooth_explicit, parameter 'taubin' smoothing. use_mass_matrix logical: whether use mass matrix keep mesh close original position (weighted per area distributed vertices); default TRUE fix_border logical: whether fix border vertices mesh; default FALSE use_cot_weight logical: whether use cotangent weight; default FALSE (using uniform 'Laplacian') degree integer: degrees 'Laplacian'; default 1 laplacian_weight numeric: weight use_cot_weight FALSE; default 1.0 type method name explicit smooth, choices 'taubin', 'laplace', 'HClaplace', 'fujiLaplace', 'angWeight', 'surfPreserveLaplace'. iteration number iterations mu parameter 'taubin' explicit smoothing. delta parameter scale-dependent 'Laplacian' smoothing maximum allowed angle ('Radian') deviation surface preserving 'Laplacian'.","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_smooth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implicitly smooth a triangular mesh — vcg_smooth","text":"object class \"mesh3d\" : vb vertex coordinates normals vertex normal vectors triangular face index","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_smooth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Implicitly smooth a triangular mesh — vcg_smooth","text":"","code":"if(is_not_cran()) {  # Prepare mesh with no normals data(\"left_hippocampus_mask\")  # Grow 2mm on each direction to fill holes volume <- grow_volume(left_hippocampus_mask, 2)  # Initial mesh mesh <- vcg_isosurface(volume)  # Start: examples rgl_view({   rgl_call(\"mfrow3d\", 2, 4)   rgl_call(\"title3d\", \"Naive ISOSurface\")   rgl_call(\"shade3d\", mesh, col = 2)    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Implicit Smooth\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_implicit(mesh, degree = 2))    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Explicit Smooth - taubin\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_explicit(mesh, \"taubin\"))    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Explicit Smooth - laplace\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_explicit(mesh, \"laplace\"))    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Explicit Smooth - angWeight\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_explicit(mesh, \"angWeight\"))    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Explicit Smooth - HClaplace\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_explicit(mesh, \"HClaplace\"))    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Explicit Smooth - fujiLaplace\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_explicit(mesh, \"fujiLaplace\"))    rgl_call(\"next3d\")   rgl_call(\"title3d\", \"Explicit Smooth - surfPreserveLaplace\")   rgl_call(\"shade3d\", col = 2,            x = vcg_smooth_explicit(mesh, \"surfPreserveLaplace\")) })  } #> Package `rgl` is not installed. Please install `rgl` to use this function. #> Error in loadNamespace(name): there is no package called ‘rgl’"},{"path":"https://dipterix.org/ravetools/reference/vcg_sphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple 3-dimensional sphere mesh — vcg_sphere","title":"Simple 3-dimensional sphere mesh — vcg_sphere","text":"Simple 3-dimensional sphere mesh","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_sphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple 3-dimensional sphere mesh — vcg_sphere","text":"","code":"vcg_sphere(sub_division = 3L, normals = TRUE)"},{"path":"https://dipterix.org/ravetools/reference/vcg_sphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple 3-dimensional sphere mesh — vcg_sphere","text":"sub_division density vertex resulting mesh normals whether normal vectors calculated","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_sphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple 3-dimensional sphere mesh — vcg_sphere","text":"'mesh3d' object","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_sphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple 3-dimensional sphere mesh — vcg_sphere","text":"","code":"vcg_sphere() #> $vb #>            [,1]        [,2]      [,3]      [,4]      [,5]       [,6]       [,7] #> [1,] 0.39960703  0.39960703 0.2664047 0.2628656 0.5257311  0.2628656 0.13307112 #> [2,] 0.91298246  0.91298246 0.9638612 0.9510565 0.8506508  0.9510565 0.98768836 #> [3,] 0.08232358 -0.08232358 0.0000000 0.1624599 0.0000000 -0.1624599 0.08224247 #> [4,] 1.00000000  1.00000000 1.0000000 1.0000000 1.0000000  1.0000000 1.00000000 #>             [,8] [,9]     [,10]     [,11]    [,12]      [,13]      [,14] #> [1,]  0.13307112    0 0.5192585 0.3861874 0.500000  0.3861874  0.5192585 #> [2,]  0.98768836    1 0.8401779 0.8910066 0.809017  0.8910066  0.8401779 #> [3,] -0.08224247    0 0.1564345 0.2386769 0.309017 -0.2386769 -0.1564345 #> [4,]  1.00000000    1 1.0000000 1.0000000 1.000000  1.0000000  1.0000000 #>          [,15]      [,16]      [,17]      [,18]      [,19]      [,20] #> [1,]  0.500000  0.1327925  0.2640827  0.1316554  0.0000000  0.2598919 #> [2,]  0.809017  0.9663926  0.9162441  0.9243046  0.9619384  0.8626685 #> [3,] -0.309017 -0.2201170 -0.3012589 -0.3582288 -0.2732666 -0.4338886 #> [4,]  1.000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,21]      [,22]      [,23]      [,24]      [,25]     [,26]     [,27] #> [1,]  0.0000000  0.1312004  0.0000000  0.0000000  0.3836137 0.2640827 0.1327925 #> [2,]  0.9150434  0.8649293  0.8506508  0.9904389  0.8439115 0.9162441 0.9663926 #> [3,] -0.4033554 -0.4844417 -0.5257311 -0.1379523 -0.3750386 0.3012589 0.2201170 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 1.0000000 1.0000000 #>          [,28]     [,29]     [,30]     [,31]     [,32]     [,33]     [,34] #> [1,] 0.1316554 0.2598919 0.0000000 0.1312004 0.0000000 0.0000000 0.3836137 #> [2,] 0.9243046 0.8626685 0.9619384 0.8649293 0.9150434 0.8506508 0.8439115 #> [3,] 0.3582288 0.4338886 0.2732666 0.4844417 0.4033554 0.5257311 0.3750386 #> [4,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>          [,35]       [,36]      [,37]     [,38]      [,39]     [,40] #> [1,] 0.0000000  0.62023956 0.62023956 0.7112817  0.7020465 0.7020465 #> [2,] 0.9904389  0.78020436 0.78020436 0.7029070  0.6937805 0.6937805 #> [3,] 0.1379523 -0.08114184 0.08114184 0.0000000 -0.1606220 0.1606220 #> [4,] 1.0000000  1.00000000 1.00000000 1.0000000  1.0000000 1.0000000 #>            [,41]      [,42]     [,43]      [,44]     [,45]       [,46] #> [1,]  0.78384298 0.78384298 0.8506508  0.6068251 0.6068251 -0.39960703 #> [2,]  0.61564207 0.61564207 0.5257311  0.7586523 0.7586523  0.91298246 #> [3,] -0.08108629 0.08108629 0.0000000 -0.2370863 0.2370863 -0.08232358 #> [4,]  1.00000000 1.00000000 1.0000000  1.0000000 1.0000000  1.00000000 #>            [,47]      [,48]      [,49]      [,50]      [,51]       [,52] #> [1,] -0.39960703 -0.2664047 -0.2628656 -0.5257311 -0.2628656 -0.13307112 #> [2,]  0.91298246  0.9638612  0.9510565  0.8506508  0.9510565  0.98768836 #> [3,]  0.08232358  0.0000000 -0.1624599  0.0000000  0.1624599 -0.08224247 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>            [,53]      [,54]      [,55]     [,56]      [,57]      [,58] #> [1,] -0.13307112 -0.5192585 -0.3861874 -0.500000 -0.3861874 -0.5192585 #> [2,]  0.98768836  0.8401779  0.8910066  0.809017  0.8910066  0.8401779 #> [3,]  0.08224247 -0.1564345 -0.2386769 -0.309017  0.2386769  0.1564345 #> [4,]  1.00000000  1.0000000  1.0000000  1.000000  1.0000000  1.0000000 #>          [,59]      [,60]      [,61]      [,62]      [,63]      [,64] #> [1,] -0.500000 -0.1327925 -0.2640827 -0.1316554 -0.2598919 -0.1312004 #> [2,]  0.809017  0.9663926  0.9162441  0.9243046  0.8626685  0.8649293 #> [3,]  0.309017  0.2201170  0.3012589  0.3582288  0.4338886  0.4844417 #> [4,]  1.000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,65]      [,66]      [,67]      [,68]      [,69]      [,70] #> [1,] -0.3836137 -0.2640827 -0.1327925 -0.1316554 -0.2598919 -0.1312004 #> [2,]  0.8439115  0.9162441  0.9663926  0.9243046  0.8626685  0.8649293 #> [3,]  0.3750386 -0.3012589 -0.2201170 -0.3582288 -0.4338886 -0.4844417 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,71]       [,72]       [,73]      [,74]      [,75]      [,76] #> [1,] -0.3836137 -0.62023956 -0.62023956 -0.7112817 -0.7020465 -0.7020465 #> [2,]  0.8439115  0.78020436  0.78020436  0.7029070  0.6937805  0.6937805 #> [3,] -0.3750386  0.08114184 -0.08114184  0.0000000  0.1606220 -0.1606220 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>            [,77]       [,78]      [,79]      [,80]      [,81]       [,82] #> [1,] -0.78384298 -0.78384298 -0.8506508 -0.6068251 -0.6068251  0.39960703 #> [2,]  0.61564207  0.61564207  0.5257311  0.7586523  0.7586523 -0.91298246 #> [3,]  0.08108629 -0.08108629  0.0000000  0.2370863 -0.2370863 -0.08232358 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.00000000 #>            [,83]      [,84]      [,85]      [,86]      [,87]       [,88] #> [1,]  0.39960703  0.2664047  0.2628656  0.5257311  0.2628656  0.13307112 #> [2,] -0.91298246 -0.9638612 -0.9510565 -0.8506508 -0.9510565 -0.98768836 #> [3,]  0.08232358  0.0000000 -0.1624599  0.0000000  0.1624599 -0.08224247 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>            [,89] [,90]      [,91]      [,92]     [,93]      [,94]      [,95] #> [1,]  0.13307112     0  0.5192585  0.3861874  0.500000  0.3861874  0.5192585 #> [2,] -0.98768836    -1 -0.8401779 -0.8910066 -0.809017 -0.8910066 -0.8401779 #> [3,]  0.08224247     0 -0.1564345 -0.2386769 -0.309017  0.2386769  0.1564345 #> [4,]  1.00000000     1  1.0000000  1.0000000  1.000000  1.0000000  1.0000000 #>          [,96]      [,97]      [,98]      [,99]     [,100]     [,101] #> [1,]  0.500000  0.1327925  0.2640827  0.1316554  0.0000000  0.2598919 #> [2,] -0.809017 -0.9663926 -0.9162441 -0.9243046 -0.9619384 -0.8626685 #> [3,]  0.309017  0.2201170  0.3012589  0.3582288  0.2732666  0.4338886 #> [4,]  1.000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,102]     [,103]     [,104]     [,105]     [,106]     [,107] #> [1,]  0.0000000  0.1312004  0.0000000  0.0000000  0.3836137  0.2640827 #> [2,] -0.9150434 -0.8649293 -0.8506508 -0.9904389 -0.8439115 -0.9162441 #> [3,]  0.4033554  0.4844417  0.5257311  0.1379523  0.3750386 -0.3012589 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,108]     [,109]     [,110]     [,111]     [,112]     [,113] #> [1,]  0.1327925  0.1316554  0.2598919  0.0000000  0.1312004  0.0000000 #> [2,] -0.9663926 -0.9243046 -0.8626685 -0.9619384 -0.8649293 -0.9150434 #> [3,] -0.2201170 -0.3582288 -0.4338886 -0.2732666 -0.4844417 -0.4033554 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,114]     [,115]     [,116]      [,117]      [,118]     [,119] #> [1,]  0.0000000  0.3836137  0.0000000  0.62023956  0.62023956  0.7112817 #> [2,] -0.8506508 -0.8439115 -0.9904389 -0.78020436 -0.78020436 -0.7029070 #> [3,] -0.5257311 -0.3750386 -0.1379523  0.08114184 -0.08114184  0.0000000 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,120]     [,121]      [,122]      [,123]     [,124]     [,125] #> [1,]  0.7020465  0.7020465  0.78384298  0.78384298  0.8506508  0.6068251 #> [2,] -0.6937805 -0.6937805 -0.61564207 -0.61564207 -0.5257311 -0.7586523 #> [3,]  0.1606220 -0.1606220  0.08108629 -0.08108629  0.0000000  0.2370863 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,126]      [,127]      [,128]     [,129]     [,130]     [,131] #> [1,]  0.6068251 -0.39960703 -0.39960703 -0.2664047 -0.2628656 -0.5257311 #> [2,] -0.7586523 -0.91298246 -0.91298246 -0.9638612 -0.9510565 -0.8506508 #> [3,] -0.2370863  0.08232358 -0.08232358  0.0000000  0.1624599  0.0000000 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>          [,132]      [,133]      [,134]     [,135]     [,136]    [,137] #> [1,] -0.2628656 -0.13307112 -0.13307112 -0.5192585 -0.3861874 -0.500000 #> [2,] -0.9510565 -0.98768836 -0.98768836 -0.8401779 -0.8910066 -0.809017 #> [3,] -0.1624599  0.08224247 -0.08224247  0.1564345  0.2386769  0.309017 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.000000 #>          [,138]     [,139]    [,140]     [,141]     [,142]     [,143] #> [1,] -0.3861874 -0.5192585 -0.500000 -0.1327925 -0.2640827 -0.1316554 #> [2,] -0.8910066 -0.8401779 -0.809017 -0.9663926 -0.9162441 -0.9243046 #> [3,] -0.2386769 -0.1564345 -0.309017 -0.2201170 -0.3012589 -0.3582288 #> [4,]  1.0000000  1.0000000  1.000000  1.0000000  1.0000000  1.0000000 #>          [,144]     [,145]     [,146]     [,147]     [,148]     [,149] #> [1,] -0.2598919 -0.1312004 -0.3836137 -0.2640827 -0.1327925 -0.1316554 #> [2,] -0.8626685 -0.8649293 -0.8439115 -0.9162441 -0.9663926 -0.9243046 #> [3,] -0.4338886 -0.4844417 -0.3750386  0.3012589  0.2201170  0.3582288 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,150]     [,151]     [,152]      [,153]      [,154]     [,155] #> [1,] -0.2598919 -0.1312004 -0.3836137 -0.62023956 -0.62023956 -0.7112817 #> [2,] -0.8626685 -0.8649293 -0.8439115 -0.78020436 -0.78020436 -0.7029070 #> [3,]  0.4338886  0.4844417  0.3750386 -0.08114184  0.08114184  0.0000000 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,156]     [,157]      [,158]      [,159]     [,160]     [,161] #> [1,] -0.7020465 -0.7020465 -0.78384298 -0.78384298 -0.8506508 -0.6068251 #> [2,] -0.6937805 -0.6937805 -0.61564207 -0.61564207 -0.5257311 -0.7586523 #> [3,] -0.1606220  0.1606220 -0.08108629  0.08108629  0.0000000 -0.2370863 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,162]      [,163]      [,164]     [,165]     [,166]     [,167] #> [1,] -0.6068251  0.91298246  0.91298246  0.9638612  0.9510565  0.8506508 #> [2,] -0.7586523 -0.08232358  0.08232358  0.0000000 -0.1624599  0.0000000 #> [3,]  0.2370863 -0.39960703 -0.39960703 -0.2664047 -0.2628656 -0.5257311 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>          [,168]      [,169]      [,170] [,171]     [,172]     [,173]    [,174] #> [1,]  0.9510565  0.98768836  0.98768836      1  0.8401779  0.8910065  0.809017 #> [2,]  0.1624599 -0.08224247  0.08224247      0 -0.1564345 -0.2386769 -0.309017 #> [3,] -0.2628656 -0.13307112 -0.13307112      0 -0.5192585 -0.3861874 -0.500000 #> [4,]  1.0000000  1.00000000  1.00000000      1  1.0000000  1.0000000  1.000000 #>          [,175]     [,176]    [,177]     [,178]     [,179]     [,180]    [,181] #> [1,]  0.8910065  0.8401779  0.809017  0.9663926  0.9162441  0.9243046 0.9619384 #> [2,]  0.2386769  0.1564345  0.309017  0.2201170  0.3012589  0.3582288 0.2732666 #> [3,] -0.3861874 -0.5192585 -0.500000 -0.1327925 -0.2640827 -0.1316554 0.0000000 #> [4,]  1.0000000  1.0000000  1.000000  1.0000000  1.0000000  1.0000000 1.0000000 #>          [,182]    [,183]     [,184]    [,185]     [,186]     [,187]     [,188] #> [1,]  0.8626685 0.9150434  0.8649293 0.9904389  0.8439115  0.9162441  0.9663926 #> [2,]  0.4338886 0.4033554  0.4844417 0.1379523  0.3750386 -0.3012589 -0.2201170 #> [3,] -0.2598919 0.0000000 -0.1312004 0.0000000 -0.3836137 -0.2640827 -0.1327925 #> [4,]  1.0000000 1.0000000  1.0000000 1.0000000  1.0000000  1.0000000  1.0000000 #>          [,189]     [,190]     [,191]     [,192]     [,193]     [,194] #> [1,]  0.9243046  0.8626685  0.9619384  0.8649293  0.9150434  0.8439115 #> [2,] -0.3582288 -0.4338886 -0.2732666 -0.4844417 -0.4033554 -0.3750386 #> [3,] -0.1316554 -0.2598919  0.0000000 -0.1312004  0.0000000 -0.3836137 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,195]      [,196]      [,197]     [,198]     [,199]     [,200] #> [1,]  0.9904389  0.78020436  0.78020436  0.7029070  0.6937805  0.6937805 #> [2,] -0.1379523  0.08114184 -0.08114184  0.0000000  0.1606220 -0.1606220 #> [3,]  0.0000000 -0.62023956 -0.62023956 -0.7112817 -0.7020465 -0.7020465 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,201]      [,202]     [,203]     [,204]     [,205]     [,206] #> [1,]  0.61564207  0.61564207  0.5257311  0.7586523  0.7586523 0.91298246 #> [2,]  0.08108629 -0.08108629  0.0000000  0.2370863 -0.2370863 0.08232358 #> [3,] -0.78384298 -0.78384298 -0.8506508 -0.6068251 -0.6068251 0.39960703 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 1.00000000 #>           [,207]    [,208]    [,209]    [,210]     [,211]     [,212] #> [1,]  0.91298246 0.9638612 0.9510565 0.8506508  0.9510565 0.98768836 #> [2,] -0.08232358 0.0000000 0.1624599 0.0000000 -0.1624599 0.08224247 #> [3,]  0.39960703 0.2664047 0.2628656 0.5257311  0.2628656 0.13307112 #> [4,]  1.00000000 1.0000000 1.0000000 1.0000000  1.0000000 1.00000000 #>           [,213]    [,214]    [,215]   [,216]     [,217]     [,218]    [,219] #> [1,]  0.98768836 0.8401779 0.8910065 0.809017  0.8910065  0.8401779  0.809017 #> [2,] -0.08224247 0.1564345 0.2386769 0.309017 -0.2386769 -0.1564345 -0.309017 #> [3,]  0.13307112 0.5192585 0.3861874 0.500000  0.3861874  0.5192585  0.500000 #> [4,]  1.00000000 1.0000000 1.0000000 1.000000  1.0000000  1.0000000  1.000000 #>          [,220]     [,221]     [,222]     [,223]     [,224]     [,225] #> [1,]  0.9663926  0.9162441  0.9243046  0.8626685  0.8649293  0.8439115 #> [2,] -0.2201170 -0.3012589 -0.3582288 -0.4338886 -0.4844417 -0.3750386 #> [3,]  0.1327925  0.2640827  0.1316554  0.2598919  0.1312004  0.3836137 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>         [,226]    [,227]    [,228]    [,229]    [,230]    [,231]      [,232] #> [1,] 0.9162441 0.9663926 0.9243046 0.8626685 0.8649293 0.8439115  0.78020436 #> [2,] 0.3012589 0.2201170 0.3582288 0.4338886 0.4844417 0.3750386 -0.08114184 #> [3,] 0.2640827 0.1327925 0.1316554 0.2598919 0.1312004 0.3836137  0.62023956 #> [4,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000  1.00000000 #>          [,233]    [,234]     [,235]    [,236]      [,237]     [,238]    [,239] #> [1,] 0.78020436 0.7029070  0.6937805 0.6937805  0.61564207 0.61564207 0.5257311 #> [2,] 0.08114184 0.0000000 -0.1606220 0.1606220 -0.08108629 0.08108629 0.0000000 #> [3,] 0.62023956 0.7112817  0.7020465 0.7020465  0.78384298 0.78384298 0.8506508 #> [4,] 1.00000000 1.0000000  1.0000000 1.0000000  1.00000000 1.00000000 1.0000000 #>          [,240]    [,241]      [,242]      [,243]     [,244]     [,245] #> [1,]  0.7586523 0.7586523 -0.91298246 -0.91298246 -0.9638612 -0.9510565 #> [2,] -0.2370863 0.2370863 -0.08232358  0.08232358  0.0000000 -0.1624599 #> [3,]  0.6068251 0.6068251  0.39960703  0.39960703  0.2664047  0.2628656 #> [4,]  1.0000000 1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,246]     [,247]      [,248]      [,249] [,250]     [,251]     [,252] #> [1,] -0.8506508 -0.9510565 -0.98768836 -0.98768836     -1 -0.8401779 -0.8910065 #> [2,]  0.0000000  0.1624599 -0.08224247  0.08224247      0 -0.1564345 -0.2386769 #> [3,]  0.5257311  0.2628656  0.13307112  0.13307112      0  0.5192585  0.3861874 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000      1  1.0000000  1.0000000 #>         [,253]     [,254]     [,255]    [,256]     [,257]     [,258]     [,259] #> [1,] -0.809017 -0.8910065 -0.8401779 -0.809017 -0.9663926 -0.9162441 -0.9243046 #> [2,] -0.309017  0.2386769  0.1564345  0.309017  0.2201170  0.3012589  0.3582288 #> [3,]  0.500000  0.3861874  0.5192585  0.500000  0.1327925  0.2640827  0.1316554 #> [4,]  1.000000  1.0000000  1.0000000  1.000000  1.0000000  1.0000000  1.0000000 #>          [,260]     [,261]     [,262]     [,263]     [,264]     [,265] #> [1,] -0.9619384 -0.8626685 -0.9150434 -0.8649293 -0.9904389 -0.8439115 #> [2,]  0.2732666  0.4338886  0.4033554  0.4844417  0.1379523  0.3750386 #> [3,]  0.0000000  0.2598919  0.0000000  0.1312004  0.0000000  0.3836137 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,266]     [,267]     [,268]     [,269]     [,270]     [,271] #> [1,] -0.9162441 -0.9663926 -0.9243046 -0.8626685 -0.9619384 -0.8649293 #> [2,] -0.3012589 -0.2201170 -0.3582288 -0.4338886 -0.2732666 -0.4844417 #> [3,]  0.2640827  0.1327925  0.1316554  0.2598919  0.0000000  0.1312004 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,272]     [,273]     [,274]      [,275]      [,276]     [,277] #> [1,] -0.9150434 -0.8439115 -0.9904389 -0.78020436 -0.78020436 -0.7029070 #> [2,] -0.4033554 -0.3750386 -0.1379523  0.08114184 -0.08114184  0.0000000 #> [3,]  0.0000000  0.3836137  0.0000000  0.62023956  0.62023956  0.7112817 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,278]     [,279]      [,280]      [,281]     [,282]     [,283] #> [1,] -0.6937805 -0.6937805 -0.61564207 -0.61564207 -0.5257311 -0.7586523 #> [2,]  0.1606220 -0.1606220  0.08108629 -0.08108629  0.0000000  0.2370863 #> [3,]  0.7020465  0.7020465  0.78384298  0.78384298  0.8506508  0.6068251 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,284]      [,285]      [,286]     [,287]     [,288]     [,289] #> [1,] -0.7586523 -0.91298246 -0.91298246 -0.9638612 -0.9510565 -0.8506508 #> [2,] -0.2370863  0.08232358 -0.08232358  0.0000000  0.1624599  0.0000000 #> [3,]  0.6068251 -0.39960703 -0.39960703 -0.2664047 -0.2628656 -0.5257311 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>          [,290]      [,291]      [,292]     [,293]     [,294]    [,295] #> [1,] -0.9510565 -0.98768836 -0.98768836 -0.8401779 -0.8910065 -0.809017 #> [2,] -0.1624599  0.08224247 -0.08224247  0.1564345  0.2386769  0.309017 #> [3,] -0.2628656 -0.13307112 -0.13307112 -0.5192585 -0.3861874 -0.500000 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.000000 #>          [,296]     [,297]    [,298]     [,299]     [,300]     [,301] #> [1,] -0.8910065 -0.8401779 -0.809017 -0.9663926 -0.9162441 -0.9243046 #> [2,] -0.2386769 -0.1564345 -0.309017 -0.2201170 -0.3012589 -0.3582288 #> [3,] -0.3861874 -0.5192585 -0.500000 -0.1327925 -0.2640827 -0.1316554 #> [4,]  1.0000000  1.0000000  1.000000  1.0000000  1.0000000  1.0000000 #>          [,302]     [,303]     [,304]     [,305]     [,306]     [,307] #> [1,] -0.8626685 -0.8649293 -0.8439115 -0.9162441 -0.9663926 -0.9243046 #> [2,] -0.4338886 -0.4844417 -0.3750386  0.3012589  0.2201170  0.3582288 #> [3,] -0.2598919 -0.1312004 -0.3836137 -0.2640827 -0.1327925 -0.1316554 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,308]     [,309]     [,310]      [,311]      [,312]     [,313] #> [1,] -0.8626685 -0.8649293 -0.8439115 -0.78020436 -0.78020436 -0.7029070 #> [2,]  0.4338886  0.4844417  0.3750386 -0.08114184  0.08114184  0.0000000 #> [3,] -0.2598919 -0.1312004 -0.3836137 -0.62023956 -0.62023956 -0.7112817 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,314]     [,315]      [,316]      [,317]     [,318]     [,319] #> [1,] -0.6937805 -0.6937805 -0.61564207 -0.61564207 -0.5257311 -0.7586523 #> [2,] -0.1606220  0.1606220 -0.08108629  0.08108629  0.0000000 -0.2370863 #> [3,] -0.7020465 -0.7020465 -0.78384298 -0.78384298 -0.8506508 -0.6068251 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,320]      [,321]      [,322]     [,323]     [,324]     [,325] #> [1,] -0.7586523 -0.08232358  0.08232358  0.0000000 -0.1624599  0.0000000 #> [2,]  0.2370863 -0.39960703 -0.39960703 -0.2664047 -0.2628656 -0.5257311 #> [3,] -0.6068251  0.91298246  0.91298246  0.9638612  0.9510565  0.8506508 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>          [,326]      [,327]      [,328] [,329]     [,330]     [,331]    [,332] #> [1,]  0.1624599 -0.08224247  0.08224247      0 -0.1564345 -0.2386769 -0.309017 #> [2,] -0.2628656 -0.13307112 -0.13307112      0 -0.5192585 -0.3861874 -0.500000 #> [3,]  0.9510565  0.98768836  0.98768836      1  0.8401779  0.8910065  0.809017 #> [4,]  1.0000000  1.00000000  1.00000000      1  1.0000000  1.0000000  1.000000 #>          [,333]     [,334]    [,335]     [,336]     [,337]     [,338]    [,339] #> [1,]  0.2386769  0.1564345  0.309017  0.2201170  0.3012589  0.3582288 0.2732666 #> [2,] -0.3861874 -0.5192585 -0.500000 -0.1327925 -0.2640827 -0.1316554 0.0000000 #> [3,]  0.8910065  0.8401779  0.809017  0.9663926  0.9162441  0.9243046 0.9619384 #> [4,]  1.0000000  1.0000000  1.000000  1.0000000  1.0000000  1.0000000 1.0000000 #>          [,340]    [,341]     [,342]    [,343]     [,344]     [,345]     [,346] #> [1,]  0.4338886 0.4033554  0.4844417 0.1379523  0.3750386 -0.3012589 -0.2201170 #> [2,] -0.2598919 0.0000000 -0.1312004 0.0000000 -0.3836137 -0.2640827 -0.1327925 #> [3,]  0.8626685 0.9150434  0.8649293 0.9904389  0.8439115  0.9162441  0.9663926 #> [4,]  1.0000000 1.0000000  1.0000000 1.0000000  1.0000000  1.0000000  1.0000000 #>          [,347]     [,348]     [,349]     [,350]     [,351]     [,352] #> [1,] -0.3582288 -0.4338886 -0.2732666 -0.4844417 -0.4033554 -0.3750386 #> [2,] -0.1316554 -0.2598919  0.0000000 -0.1312004  0.0000000 -0.3836137 #> [3,]  0.9243046  0.8626685  0.9619384  0.8649293  0.9150434  0.8439115 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,353]      [,354]      [,355]     [,356]     [,357]     [,358] #> [1,] -0.1379523  0.08114184 -0.08114184  0.0000000  0.1606220 -0.1606220 #> [2,]  0.0000000 -0.62023956 -0.62023956 -0.7112817 -0.7020465 -0.7020465 #> [3,]  0.9904389  0.78020436  0.78020436  0.7029070  0.6937805  0.6937805 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,359]      [,360]     [,361]     [,362]     [,363]      [,364] #> [1,]  0.08108629 -0.08108629  0.2370863 -0.2370863 0.08232358 -0.08232358 #> [2,] -0.78384298 -0.78384298 -0.6068251 -0.6068251 0.39960703  0.39960703 #> [3,]  0.61564207  0.61564207  0.7586523  0.7586523 0.91298246  0.91298246 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000 1.00000000  1.00000000 #>         [,365]    [,366]    [,367]     [,368]     [,369]      [,370]    [,371] #> [1,] 0.0000000 0.1624599 0.0000000 -0.1624599 0.08224247 -0.08224247 0.1564345 #> [2,] 0.2664047 0.2628656 0.5257311  0.2628656 0.13307112  0.13307112 0.5192585 #> [3,] 0.9638612 0.9510565 0.8506508  0.9510565 0.98768836  0.98768836 0.8401779 #> [4,] 1.0000000 1.0000000 1.0000000  1.0000000 1.00000000  1.00000000 1.0000000 #>         [,372]   [,373]     [,374]     [,375]    [,376]     [,377]     [,378] #> [1,] 0.2386769 0.309017 -0.2386769 -0.1564345 -0.309017 -0.2201170 -0.3012589 #> [2,] 0.3861874 0.500000  0.3861874  0.5192585  0.500000  0.1327925  0.2640827 #> [3,] 0.8910065 0.809017  0.8910065  0.8401779  0.809017  0.9663926  0.9162441 #> [4,] 1.0000000 1.000000  1.0000000  1.0000000  1.000000  1.0000000  1.0000000 #>          [,379]     [,380]     [,381]     [,382]    [,383]    [,384]    [,385] #> [1,] -0.3582288 -0.4338886 -0.4844417 -0.3750386 0.3012589 0.2201170 0.3582288 #> [2,]  0.1316554  0.2598919  0.1312004  0.3836137 0.2640827 0.1327925 0.1316554 #> [3,]  0.9243046  0.8626685  0.8649293  0.8439115 0.9162441 0.9663926 0.9243046 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000 1.0000000 1.0000000 1.0000000 #>         [,386]    [,387]    [,388]      [,389]     [,390]    [,391]     [,392] #> [1,] 0.4338886 0.4844417 0.3750386 -0.08114184 0.08114184 0.0000000 -0.1606220 #> [2,] 0.2598919 0.1312004 0.3836137  0.62023956 0.62023956 0.7112817  0.7020465 #> [3,] 0.8626685 0.8649293 0.8439115  0.78020436 0.78020436 0.7029070  0.6937805 #> [4,] 1.0000000 1.0000000 1.0000000  1.00000000 1.00000000 1.0000000  1.0000000 #>         [,393]      [,394]     [,395]     [,396]    [,397]      [,398] #> [1,] 0.1606220 -0.08108629 0.08108629 -0.2370863 0.2370863 -0.08232358 #> [2,] 0.7020465  0.78384298 0.78384298  0.6068251 0.6068251  0.39960703 #> [3,] 0.6937805  0.61564207 0.61564207  0.7586523 0.7586523 -0.91298246 #> [4,] 1.0000000  1.00000000 1.00000000  1.0000000 1.0000000  1.00000000 #>           [,399]     [,400]     [,401]     [,402]     [,403]      [,404] #> [1,]  0.08232358  0.0000000 -0.1624599  0.0000000  0.1624599 -0.08224247 #> [2,]  0.39960703  0.2664047  0.2628656  0.5257311  0.2628656  0.13307112 #> [3,] -0.91298246 -0.9638612 -0.9510565 -0.8506508 -0.9510565 -0.98768836 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,405] [,406]     [,407]     [,408]    [,409]     [,410]     [,411] #> [1,]  0.08224247      0 -0.1564345 -0.2386769 -0.309017  0.2386769  0.1564345 #> [2,]  0.13307112      0  0.5192585  0.3861874  0.500000  0.3861874  0.5192585 #> [3,] -0.98768836     -1 -0.8401779 -0.8910065 -0.809017 -0.8910065 -0.8401779 #> [4,]  1.00000000      1  1.0000000  1.0000000  1.000000  1.0000000  1.0000000 #>         [,412]     [,413]     [,414]     [,415]     [,416]     [,417] #> [1,]  0.309017  0.2201170  0.3012589  0.3582288  0.2732666  0.4338886 #> [2,]  0.500000  0.1327925  0.2640827  0.1316554  0.0000000  0.2598919 #> [3,] -0.809017 -0.9663926 -0.9162441 -0.9243046 -0.9619384 -0.8626685 #> [4,]  1.000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,418]     [,419]     [,420]     [,421]     [,422]     [,423] #> [1,]  0.4033554  0.4844417  0.1379523  0.3750386 -0.3012589 -0.2201170 #> [2,]  0.0000000  0.1312004  0.0000000  0.3836137  0.2640827  0.1327925 #> [3,] -0.9150434 -0.8649293 -0.9904389 -0.8439115 -0.9162441 -0.9663926 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,424]     [,425]     [,426]     [,427]     [,428]     [,429] #> [1,] -0.3582288 -0.4338886 -0.2732666 -0.4844417 -0.4033554 -0.3750386 #> [2,]  0.1316554  0.2598919  0.0000000  0.1312004  0.0000000  0.3836137 #> [3,] -0.9243046 -0.8626685 -0.9619384 -0.8649293 -0.9150434 -0.8439115 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,430]      [,431]      [,432]     [,433]     [,434]     [,435] #> [1,] -0.1379523  0.08114184 -0.08114184  0.0000000  0.1606220 -0.1606220 #> [2,]  0.0000000  0.62023956  0.62023956  0.7112817  0.7020465  0.7020465 #> [3,] -0.9904389 -0.78020436 -0.78020436 -0.7029070 -0.6937805 -0.6937805 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,436]      [,437]     [,438]     [,439]      [,440]      [,441] #> [1,]  0.08108629 -0.08108629  0.2370863 -0.2370863  0.08232358 -0.08232358 #> [2,]  0.78384298  0.78384298  0.6068251  0.6068251 -0.39960703 -0.39960703 #> [3,] -0.61564207 -0.61564207 -0.7586523 -0.7586523 -0.91298246 -0.91298246 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.00000000  1.00000000 #>          [,442]     [,443]     [,444]     [,445]      [,446]      [,447] #> [1,]  0.0000000  0.1624599  0.0000000 -0.1624599  0.08224247 -0.08224247 #> [2,] -0.2664047 -0.2628656 -0.5257311 -0.2628656 -0.13307112 -0.13307112 #> [3,] -0.9638612 -0.9510565 -0.8506508 -0.9510565 -0.98768836 -0.98768836 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000 #>          [,448]     [,449]    [,450]     [,451]     [,452]    [,453]     [,454] #> [1,]  0.1564345  0.2386769  0.309017 -0.2386769 -0.1564345 -0.309017 -0.2201170 #> [2,] -0.5192585 -0.3861874 -0.500000 -0.3861874 -0.5192585 -0.500000 -0.1327925 #> [3,] -0.8401779 -0.8910065 -0.809017 -0.8910065 -0.8401779 -0.809017 -0.9663926 #> [4,]  1.0000000  1.0000000  1.000000  1.0000000  1.0000000  1.000000  1.0000000 #>          [,455]     [,456]     [,457]     [,458]     [,459]     [,460] #> [1,] -0.3012589 -0.3582288 -0.4338886 -0.4844417 -0.3750386  0.3012589 #> [2,] -0.2640827 -0.1316554 -0.2598919 -0.1312004 -0.3836137 -0.2640827 #> [3,] -0.9162441 -0.9243046 -0.8626685 -0.8649293 -0.8439115 -0.9162441 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,461]     [,462]     [,463]     [,464]     [,465]      [,466] #> [1,]  0.2201170  0.3582288  0.4338886  0.4844417  0.3750386 -0.08114184 #> [2,] -0.1327925 -0.1316554 -0.2598919 -0.1312004 -0.3836137 -0.62023956 #> [3,] -0.9663926 -0.9243046 -0.8626685 -0.8649293 -0.8439115 -0.78020436 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,467]     [,468]     [,469]     [,470]      [,471]      [,472] #> [1,]  0.08114184  0.0000000 -0.1606220  0.1606220 -0.08108629  0.08108629 #> [2,] -0.62023956 -0.7112817 -0.7020465 -0.7020465 -0.78384298 -0.78384298 #> [3,] -0.78020436 -0.7029070 -0.6937805 -0.6937805 -0.61564207 -0.61564207 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000 #>          [,473]     [,474]    [,475]    [,476]    [,477]    [,478]    [,479] #> [1,] -0.2370863  0.2370863 0.6465778 0.5642542 0.5133755 0.5877853 0.6881909 #> [2,] -0.6068251 -0.6068251 0.5133755 0.6465778 0.5642542 0.4253254 0.5877853 #> [3,] -0.7586523 -0.7586523 0.5642542 0.5133755 0.6465778 0.6881909 0.4253254 #> [4,]  1.0000000  1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,480]    [,481]    [,482]    [,483]    [,484]    [,485]    [,486] #> [1,] 0.4253254 0.4539905 0.3717480 0.7579354 0.7071068 0.4684299 0.6015009 #> [2,] 0.6881909 0.4684299 0.6015009 0.4539905 0.3717480 0.7579354 0.7071068 #> [3,] 0.5877853 0.7579354 0.7071068 0.4684299 0.6015009 0.4539905 0.3717480 #> [4,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,487]    [,488]    [,489]    [,490]    [,491]    [,492]    [,493] #> [1,] 0.2960046 0.3461530 0.2130228 0.6474119 0.5161216 0.5712517 0.7023098 #> [2,] 0.7023098 0.7834517 0.7926492 0.2960046 0.3461530 0.2130228 0.6474119 #> [3,] 0.6474119 0.5161216 0.5712517 0.7023098 0.7834517 0.7926492 0.2960046 #> [4,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,494]    [,495]     [,496]     [,497]     [,498]     [,499]     [,500] #> [1,] 0.7834517 0.7926493 -0.6465778 -0.5133755 -0.5642542 -0.6881909 -0.5877853 #> [2,] 0.5161216 0.5712517  0.5133755  0.5642542  0.6465778  0.5877853  0.4253254 #> [3,] 0.3461530 0.2130229  0.5642542  0.6465778  0.5133755  0.4253254  0.6881909 #> [4,] 1.0000000 1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,501]     [,502]     [,503]     [,504]     [,505]     [,506] #> [1,] -0.4253254 -0.6015009 -0.4684299 -0.7071068 -0.7579354 -0.3717480 #> [2,]  0.6881909  0.7071068  0.7579354  0.3717480  0.4539905  0.6015009 #> [3,]  0.5877853  0.3717480  0.4539905  0.6015009  0.4684299  0.7071068 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,507]     [,508]     [,509]     [,510]     [,511]     [,512] #> [1,] -0.4539905 -0.3461530 -0.2960046 -0.2130228 -0.7834517 -0.7023098 #> [2,]  0.4684299  0.7834517  0.7023098  0.7926492  0.5161216  0.6474119 #> [3,]  0.7579354  0.5161216  0.6474119  0.5712517  0.3461530  0.2960046 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,513]     [,514]     [,515]     [,516]     [,517]     [,518] #> [1,] -0.7926493 -0.5161216 -0.6474119 -0.5712517  0.6465778  0.5133755 #> [2,]  0.5712517  0.3461530  0.2960046  0.2130228  0.5133755  0.5642542 #> [3,]  0.2130229  0.7834517  0.7023098  0.7926492 -0.5642542 -0.6465778 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,519]     [,520]     [,521]     [,522]     [,523]     [,524] #> [1,]  0.5642542  0.6881909  0.5877853  0.4253254  0.6015009  0.4684299 #> [2,]  0.6465778  0.5877853  0.4253254  0.6881909  0.7071068  0.7579354 #> [3,] -0.5133755 -0.4253254 -0.6881909 -0.5877853 -0.3717480 -0.4539905 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,525]     [,526]     [,527]     [,528]     [,529]     [,530] #> [1,]  0.7071068  0.7579354  0.3717480  0.4539905  0.3461530  0.2960046 #> [2,]  0.3717480  0.4539905  0.6015009  0.4684299  0.7834517  0.7023098 #> [3,] -0.6015009 -0.4684299 -0.7071068 -0.7579354 -0.5161216 -0.6474119 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,531]     [,532]     [,533]     [,534]     [,535]     [,536] #> [1,]  0.2130228  0.7834517  0.7023098  0.7926493  0.5161216  0.6474119 #> [2,]  0.7926492  0.5161216  0.6474119  0.5712517  0.3461530  0.2960046 #> [3,] -0.5712517 -0.3461530 -0.2960046 -0.2130229 -0.7834517 -0.7023098 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,537]     [,538]     [,539]     [,540]     [,541]     [,542] #> [1,]  0.5712517 -0.6465778 -0.5642542 -0.5133755 -0.5877853 -0.6881909 #> [2,]  0.2130228  0.5133755  0.6465778  0.5642542  0.4253254  0.5877853 #> [3,] -0.7926492 -0.5642542 -0.5133755 -0.6465778 -0.6881909 -0.4253254 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,543]     [,544]     [,545]     [,546]     [,547]     [,548] #> [1,] -0.4253254 -0.4539905 -0.3717480 -0.7579354 -0.7071068 -0.4684299 #> [2,]  0.6881909  0.4684299  0.6015009  0.4539905  0.3717480  0.7579354 #> [3,] -0.5877853 -0.7579354 -0.7071068 -0.4684299 -0.6015009 -0.4539905 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,549]     [,550]     [,551]     [,552]     [,553]     [,554] #> [1,] -0.6015009 -0.2960046 -0.3461530 -0.2130228 -0.6474119 -0.5161216 #> [2,]  0.7071068  0.7023098  0.7834517  0.7926492  0.2960046  0.3461530 #> [3,] -0.3717480 -0.6474119 -0.5161216 -0.5712517 -0.7023098 -0.7834517 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,555]     [,556]     [,557]     [,558]     [,559]     [,560] #> [1,] -0.5712517 -0.7023098 -0.7834517 -0.7926493  0.6465778  0.5133755 #> [2,]  0.2130228  0.6474119  0.5161216  0.5712517 -0.5133755 -0.5642542 #> [3,] -0.7926492 -0.2960046 -0.3461530 -0.2130229  0.5642542  0.6465778 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,561]     [,562]     [,563]     [,564]     [,565]     [,566] #> [1,]  0.5642542  0.6881909  0.5877853  0.4253254  0.6015009  0.4684299 #> [2,] -0.6465778 -0.5877853 -0.4253254 -0.6881909 -0.7071068 -0.7579354 #> [3,]  0.5133755  0.4253254  0.6881909  0.5877853  0.3717480  0.4539905 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,567]     [,568]     [,569]     [,570]     [,571]     [,572] #> [1,]  0.7071068  0.7579354  0.3717480  0.4539905  0.3461530  0.2960046 #> [2,] -0.3717480 -0.4539905 -0.6015009 -0.4684299 -0.7834517 -0.7023098 #> [3,]  0.6015009  0.4684299  0.7071068  0.7579354  0.5161216  0.6474119 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,573]     [,574]     [,575]     [,576]     [,577]     [,578] #> [1,]  0.2130228  0.7834517  0.7023098  0.7926493  0.5161216  0.6474119 #> [2,] -0.7926492 -0.5161216 -0.6474119 -0.5712517 -0.3461530 -0.2960046 #> [3,]  0.5712517  0.3461530  0.2960046  0.2130229  0.7834517  0.7023098 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,579]     [,580]     [,581]     [,582]     [,583]     [,584] #> [1,]  0.5712517 -0.6465778 -0.5642542 -0.5133755 -0.5877853 -0.6881909 #> [2,] -0.2130228 -0.5133755 -0.6465778 -0.5642542 -0.4253254 -0.5877853 #> [3,]  0.7926492  0.5642542  0.5133755  0.6465778  0.6881909  0.4253254 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,585]     [,586]     [,587]     [,588]     [,589]     [,590] #> [1,] -0.4253254 -0.4539905 -0.3717480 -0.7579354 -0.7071068 -0.4684299 #> [2,] -0.6881909 -0.4684299 -0.6015009 -0.4539905 -0.3717480 -0.7579354 #> [3,]  0.5877853  0.7579354  0.7071068  0.4684299  0.6015009  0.4539905 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,591]     [,592]     [,593]     [,594]     [,595]     [,596] #> [1,] -0.6015009 -0.2960046 -0.3461530 -0.2130228 -0.6474119 -0.5161216 #> [2,] -0.7071068 -0.7023098 -0.7834517 -0.7926492 -0.2960046 -0.3461530 #> [3,]  0.3717480  0.6474119  0.5161216  0.5712517  0.7023098  0.7834517 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,597]     [,598]     [,599]     [,600]     [,601]     [,602] #> [1,] -0.5712517 -0.7023098 -0.7834517 -0.7926493  0.6465778  0.5642542 #> [2,] -0.2130228 -0.6474119 -0.5161216 -0.5712517 -0.5133755 -0.6465778 #> [3,]  0.7926492  0.2960046  0.3461530  0.2130229 -0.5642542 -0.5133755 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,603]     [,604]     [,605]     [,606]     [,607]     [,608] #> [1,]  0.5133755  0.5877853  0.6881909  0.4253254  0.4539905  0.3717480 #> [2,] -0.5642542 -0.4253254 -0.5877853 -0.6881909 -0.4684299 -0.6015009 #> [3,] -0.6465778 -0.6881909 -0.4253254 -0.5877853 -0.7579354 -0.7071068 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,609]     [,610]     [,611]     [,612]     [,613]     [,614] #> [1,]  0.7579354  0.7071068  0.4684299  0.6015009  0.2960046  0.3461530 #> [2,] -0.4539905 -0.3717480 -0.7579354 -0.7071068 -0.7023098 -0.7834517 #> [3,] -0.4684299 -0.6015009 -0.4539905 -0.3717480 -0.6474119 -0.5161216 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,615]     [,616]     [,617]     [,618]     [,619]     [,620] #> [1,]  0.2130228  0.6474119  0.5161216  0.5712517  0.7023098  0.7834517 #> [2,] -0.7926492 -0.2960046 -0.3461530 -0.2130228 -0.6474119 -0.5161216 #> [3,] -0.5712517 -0.7023098 -0.7834517 -0.7926492 -0.2960046 -0.3461530 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,621]     [,622]     [,623]     [,624]     [,625]     [,626] #> [1,]  0.7926493 -0.6465778 -0.5133755 -0.5642542 -0.6881909 -0.5877853 #> [2,] -0.5712517 -0.5133755 -0.5642542 -0.6465778 -0.5877853 -0.4253254 #> [3,] -0.2130229 -0.5642542 -0.6465778 -0.5133755 -0.4253254 -0.6881909 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,627]     [,628]     [,629]     [,630]     [,631]     [,632] #> [1,] -0.4253254 -0.6015009 -0.4684299 -0.7071068 -0.7579354 -0.3717480 #> [2,] -0.6881909 -0.7071068 -0.7579354 -0.3717480 -0.4539905 -0.6015009 #> [3,] -0.5877853 -0.3717480 -0.4539905 -0.6015009 -0.4684299 -0.7071068 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,633]     [,634]     [,635]     [,636]     [,637]     [,638] #> [1,] -0.4539905 -0.3461530 -0.2960046 -0.2130228 -0.7834517 -0.7023098 #> [2,] -0.4684299 -0.7834517 -0.7023098 -0.7926492 -0.5161216 -0.6474119 #> [3,] -0.7579354 -0.5161216 -0.6474119 -0.5712517 -0.3461530 -0.2960046 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,639]     [,640]     [,641]     [,642] #> [1,] -0.7926493 -0.5161216 -0.6474119 -0.5712517 #> [2,] -0.5712517 -0.3461530 -0.2960046 -0.2130228 #> [3,] -0.2130229 -0.7834517 -0.7023098 -0.7926492 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000 #>  #> $it #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] [,14] #> [1,]    1    4    5    6    7    9    4    6   10    12     5     4    13    15 #> [2,]    2    1    2    3    3    7    3    8    1    10     1    11     2    13 #> [3,]    3    3    1    2    8    8    7    3   11    11    10     1    14    14 #>      [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24] [,25] [,26] #> [1,]     6     5    16    19     6    20    21    23    19    20     8     9 #> [2,]     2    14    17    16    17    18    18    21    18    22    16     8 #> [3,]    13     2    18    18    16    17    22    22    21    18    24    24 #>      [,27] [,28] [,29] [,30] [,31] [,32] [,33] [,34] [,35] [,36] [,37] [,38] #> [1,]     6    19    25    15    20     6    26    29     4    30    31    33 #> [2,]    16    24    17    25    17    13    27    26    27    28    28    31 #> [3,]     8    16    13    13    25    17    28    28    26    27    32    32 #>      [,39] [,40] [,41] [,42] [,43] [,44] [,45] [,46] [,47] [,48] [,49] [,50] #> [1,]    29    30    11    12     4    29    35     9    30     4    36    39 #> [2,]    28    32    26    11    26    34    27    35    27     7    37    36 #> [3,]    31    28    34    34    11    26     7     7    35    27    38    38 #>      [,51] [,52] [,53] [,54] [,55] [,56] [,57] [,58] [,59] [,60] [,61] [,62] #> [1,]     5    40    41    43    39    40    14    15     5    39    45    12 #> [2,]    37    38    38    41    38    42    36    14    36    44    37    45 #> [3,]    36    37    42    42    41    38    44    44    14    36    10    10 #>      [,63] [,64] [,65] [,66] [,67] [,68] [,69] [,70] [,71] [,72] [,73] [,74] #> [1,]    40     5    46    49    50    51    52     9    49    51    54    56 #> [2,]    37    10    47    46    47    48    48    52    48    53    46    54 #> [3,]    45    37    48    48    46    47    53    53    52    48    55    55 #>      [,75] [,76] [,77] [,78] [,79] [,80] [,81] [,82] [,83] [,84] [,85] [,86] #> [1,]    50    49    57    59    51    50    60    30    51    63    32    33 #> [2,]    46    55    47    57    47    58    61    60    61    62    62    32 #> [3,]    54    46    58    58    57    47    62    62    60    61    64    64 #>      [,87] [,88] [,89] [,90] [,91] [,92] [,93] [,94] [,95] [,96] [,97] [,98] #> [1,]    30    63    53     9    51    30    65    59    63    51    66    69 #> [2,]    62    64    60    53    60    35    61    65    61    57    67    66 #> [3,]    32    62    35    35    53    60    57    57    65    61    68    68 #>      [,99] [,100] [,101] [,102] [,103] [,104] [,105] [,106] [,107] [,108] #> [1,]    49     19     70     23     69     19     55     56     49     69 #> [2,]    67     68     68     70     68     21     66     55     66     71 #> [3,]    66     67     21     21     70     68     71     71     55     66 #>      [,109] [,110] [,111] [,112] [,113] [,114] [,115] [,116] [,117] [,118] #> [1,]     24      9     19     49     72     75     50     76     77     79 #> [2,]     67     24     67     52     73     72     73     74     74     77 #> [3,]     52     52     24     67     74     74     72     73     78     78 #>      [,119] [,120] [,121] [,122] [,123] [,124] [,125] [,126] [,127] [,128] #> [1,]     75     76     58     59     50     75     81     56     76     50 #> [2,]     74     78     72     58     72     80     73     81     73     54 #> [3,]     77     74     80     80     58     72     54     54     81     73 #>      [,129] [,130] [,131] [,132] [,133] [,134] [,135] [,136] [,137] [,138] #> [1,]     82     85     86     87     88     90     85     87     91     93 #> [2,]     83     82     83     84     84     88     84     89     82     91 #> [3,]     84     84     82     83     89     89     88     84     92     92 #>      [,139] [,140] [,141] [,142] [,143] [,144] [,145] [,146] [,147] [,148] #> [1,]     86     85     94     96     87     86     97    100     87    101 #> [2,]     82     92     83     94     83     95     98     97     98     99 #> [3,]     91     82     95     95     94     83     99     99     97     98 #>      [,149] [,150] [,151] [,152] [,153] [,154] [,155] [,156] [,157] [,158] #> [1,]    102    104    100    101     89     90     87    100    106     96 #> [2,]     99    102     99    103     97     89     97    105     98    106 #> [3,]    103    103    102     99    105    105     89     97     94     94 #>      [,159] [,160] [,161] [,162] [,163] [,164] [,165] [,166] [,167] [,168] #> [1,]    101     87    107    110     85    111    112    114    110    111 #> [2,]     98     94    108    107    108    109    109    112    109    113 #> [3,]    106     98    109    109    107    108    113    113    112    109 #>      [,169] [,170] [,171] [,172] [,173] [,174] [,175] [,176] [,177] [,178] #> [1,]     92     93     85    110    116     90    111     85    117    120 #> [2,]    107     92    107    115    108    116    108     88    118    117 #> [3,]    115    115     92    107     88     88    116    108    119    119 #>      [,179] [,180] [,181] [,182] [,183] [,184] [,185] [,186] [,187] [,188] #> [1,]     86    121    122    124    120    121     95     96     86    120 #> [2,]    118    119    119    122    119    123    117     95    117    125 #> [3,]    117    118    123    123    122    119    125    125     95    117 #>      [,189] [,190] [,191] [,192] [,193] [,194] [,195] [,196] [,197] [,198] #> [1,]    126     93    121     86    127    130    131    132    133     90 #> [2,]    118    126    118     91    128    127    128    129    129    133 #> [3,]     91     91    126    118    129    129    127    128    134    134 #>      [,199] [,200] [,201] [,202] [,203] [,204] [,205] [,206] [,207] [,208] #> [1,]    130    132    135    137    131    130    138    140    132    131 #> [2,]    129    134    127    135    127    136    128    138    128    139 #> [3,]    133    129    136    136    135    127    139    139    138    128 #>      [,209] [,210] [,211] [,212] [,213] [,214] [,215] [,216] [,217] [,218] #> [1,]    141    111    132    144    113    114    111    144    134     90 #> [2,]    142    141    142    143    143    113    143    145    141    134 #> [3,]    143    143    141    142    145    145    113    143    116    116 #>      [,219] [,220] [,221] [,222] [,223] [,224] [,225] [,226] [,227] [,228] #> [1,]    132    111    146    140    144    132    147    150    130    100 #> [2,]    141    116    142    146    142    138    148    147    148    149 #> [3,]    134    141    138    138    146    142    149    149    147    148 #>      [,229] [,230] [,231] [,232] [,233] [,234] [,235] [,236] [,237] [,238] #> [1,]    151    104    150    100    136    137    130    150    105     90 #> [2,]    149    151    149    102    147    136    147    152    148    105 #> [3,]    102    102    151    149    152    152    136    147    133    133 #>      [,239] [,240] [,241] [,242] [,243] [,244] [,245] [,246] [,247] [,248] #> [1,]    100    130    153    156    131    157    158    160    156    157 #> [2,]    148    133    154    153    154    155    155    158    155    159 #> [3,]    105    148    155    155    153    154    159    159    158    155 #>      [,249] [,250] [,251] [,252] [,253] [,254] [,255] [,256] [,257] [,258] #> [1,]    139    140    131    156    162    137    157    131    163    166 #> [2,]    153    139    153    161    154    162    154    135    164    163 #> [3,]    161    161    139    153    135    135    162    154    165    165 #>      [,259] [,260] [,261] [,262] [,263] [,264] [,265] [,266] [,267] [,268] #> [1,]    167    168    169    171    166    168    172    174    167    166 #> [2,]    164    165    165    169    165    170    163    172    163    173 #> [3,]    163    164    170    170    169    165    173    173    172    163 #>      [,269] [,270] [,271] [,272] [,273] [,274] [,275] [,276] [,277] [,278] #> [1,]    175    177    168    167    178    181    168    182    183     43 #> [2,]    164    175    164    176    179    178    179    180    180    183 #> [3,]    176    176    175    164    180    180    178    179    184    184 #>      [,279] [,280] [,281] [,282] [,283] [,284] [,285] [,286] [,287] [,288] #> [1,]    181    182    170    171    168    181    186    177    182    168 #> [2,]    180    184    178    170    178    185    179    186    179    175 #> [3,]    183    180    185    185    170    178    175    175    186    179 #>      [,289] [,290] [,291] [,292] [,293] [,294] [,295] [,296] [,297] [,298] #> [1,]    187    190    166    191    192    124    190    191    173    174 #> [2,]    188    187    188    189    189    192    189    193    187    173 #> [3,]    189    189    187    188    193    193    192    189    194    194 #>      [,299] [,300] [,301] [,302] [,303] [,304] [,305] [,306] [,307] [,308] #> [1,]    166    190    195    171    191    166    196    199    167    200 #> [2,]    187    194    188    195    188    169    197    196    197    198 #> [3,]    173    187    169    169    195    188    198    198    196    197 #>      [,309] [,310] [,311] [,312] [,313] [,314] [,315] [,316] [,317] [,318] #> [1,]    201    203    199    200    176    177    167    199    205    174 #> [2,]    198    201    198    202    196    176    196    204    197    205 #> [3,]    202    202    201    198    204    204    176    196    172    172 #>      [,319] [,320] [,321] [,322] [,323] [,324] [,325] [,326] [,327] [,328] #> [1,]    200    167    206    209    210    211    212    171    209    211 #> [2,]    197    172    207    206    207    208    208    212    208    213 #> [3,]    205    197    208    208    206    207    213    213    212    208 #>      [,329] [,330] [,331] [,332] [,333] [,334] [,335] [,336] [,337] [,338] #> [1,]    214    216    210    209    217    219    211    210    220    191 #> [2,]    206    214    206    215    207    217    207    218    221    220 #> [3,]    215    215    214    206    218    218    217    207    222    222 #>      [,339] [,340] [,341] [,342] [,343] [,344] [,345] [,346] [,347] [,348] #> [1,]    211    223    193    124    191    223    213    171    211    191 #> [2,]    221    222    222    193    222    224    220    213    220    195 #> [3,]    220    221    224    224    193    222    195    195    213    220 #>      [,349] [,350] [,351] [,352] [,353] [,354] [,355] [,356] [,357] [,358] #> [1,]    225    219    223    211    226    229    209    181    230     43 #> [2,]    221    225    221    217    227    226    227    228    228    230 #> [3,]    217    217    225    221    228    228    226    227    183    183 #>      [,359] [,360] [,361] [,362] [,363] [,364] [,365] [,366] [,367] [,368] #> [1,]    229    181    215    216    209    229    185    171    181    209 #> [2,]    228    183    226    215    226    231    227    185    227    212 #> [3,]    230    228    231    231    215    226    212    212    185    227 #>      [,369] [,370] [,371] [,372] [,373] [,374] [,375] [,376] [,377] [,378] #> [1,]    232    235    210    236    237    239    235    236    218    219 #> [2,]    233    232    233    234    234    237    234    238    232    218 #> [3,]    234    234    232    233    238    238    237    234    240    240 #>      [,379] [,380] [,381] [,382] [,383] [,384] [,385] [,386] [,387] [,388] #> [1,]    210    235    241    216    236    210    242    245    246    247 #> [2,]    232    240    233    241    233    214    243    242    243    244 #> [3,]    218    232    214    214    241    233    244    244    242    243 #>      [,389] [,390] [,391] [,392] [,393] [,394] [,395] [,396] [,397] [,398] #> [1,]    248    250    245    247    251    253    246    245    254    256 #> [2,]    244    248    244    249    242    251    242    252    243    254 #> [3,]    249    249    248    244    252    252    251    242    255    255 #>      [,399] [,400] [,401] [,402] [,403] [,404] [,405] [,406] [,407] [,408] #> [1,]    247    246    257    260    247    261    262     79    260    261 #> [2,]    243    255    258    257    258    259    259    262    259    263 #> [3,]    254    243    259    259    257    258    263    263    262    259 #>      [,409] [,410] [,411] [,412] [,413] [,414] [,415] [,416] [,417] [,418] #> [1,]    249    250    247    260    265    256    261    247    266    269 #> [2,]    257    249    257    264    258    265    258    254    267    266 #> [3,]    264    264    249    257    254    254    265    258    268    268 #>      [,419] [,420] [,421] [,422] [,423] [,424] [,425] [,426] [,427] [,428] #> [1,]    245    270    271    160    269    270    252    253    245    269 #> [2,]    267    268    268    271    268    272    266    252    266    273 #> [3,]    266    267    272    272    271    268    273    273    252    266 #>      [,429] [,430] [,431] [,432] [,433] [,434] [,435] [,436] [,437] [,438] #> [1,]    274    250    270    245    275    278    246    279    280    282 #> [2,]    267    274    267    248    276    275    276    277    277    280 #> [3,]    248    248    274    267    277    277    275    276    281    281 #>      [,439] [,440] [,441] [,442] [,443] [,444] [,445] [,446] [,447] [,448] #> [1,]    278    279    255    256    246    278    284    253    279    246 #> [2,]    277    281    275    255    275    283    276    284    276    251 #> [3,]    280    277    283    283    255    275    251    251    284    276 #>      [,449] [,450] [,451] [,452] [,453] [,454] [,455] [,456] [,457] [,458] #> [1,]    285    288    289    290    291    250    288    290    293    295 #> [2,]    286    285    286    287    287    291    287    292    285    293 #> [3,]    287    287    285    286    292    292    291    287    294    294 #>      [,459] [,460] [,461] [,462] [,463] [,464] [,465] [,466] [,467] [,468] #> [1,]    289    288    296    298    290    289    299    270    290    302 #> [2,]    285    294    286    296    286    297    300    299    300    301 #> [3,]    293    285    297    297    296    286    301    301    299    300 #>      [,469] [,470] [,471] [,472] [,473] [,474] [,475] [,476] [,477] [,478] #> [1,]    272    160    270    302    292    250    290    270    304    298 #> [2,]    301    272    301    303    299    292    299    274    300    304 #> [3,]    303    303    272    301    274    274    292    299    296    296 #>      [,479] [,480] [,481] [,482] [,483] [,484] [,485] [,486] [,487] [,488] #> [1,]    302    290    305    308    288    260    309     79    308    260 #> [2,]    300    296    306    305    306    307    307    309    307    262 #> [3,]    304    300    307    307    305    306    262    262    309    307 #>      [,489] [,490] [,491] [,492] [,493] [,494] [,495] [,496] [,497] [,498] #> [1,]    294    295    288    308    264    250    260    288    311    314 #> [2,]    305    294    305    310    306    264    306    291    312    311 #> [3,]    310    310    294    305    291    291    264    306    313    313 #>      [,499] [,500] [,501] [,502] [,503] [,504] [,505] [,506] [,507] [,508] #> [1,]    289    315    316    318    314    315    297    298    289    314 #> [2,]    312    313    313    316    313    317    311    297    311    319 #> [3,]    311    312    317    317    316    313    319    319    297    311 #>      [,509] [,510] [,511] [,512] [,513] [,514] [,515] [,516] [,517] [,518] #> [1,]    320    295    315    289    321    324    325    326    327    329 #> [2,]    312    320    312    293    322    321    322    323    323    327 #> [3,]    293    293    320    312    323    323    321    322    328    328 #>      [,519] [,520] [,521] [,522] [,523] [,524] [,525] [,526] [,527] [,528] #> [1,]    324    326    330    332    325    324    333    335    326    325 #> [2,]    323    328    321    330    321    331    322    333    322    334 #> [3,]    327    323    331    331    330    321    334    334    333    322 #>      [,529] [,530] [,531] [,532] [,533] [,534] [,535] [,536] [,537] [,538] #> [1,]    336    339    326    340    341    239    339    340    328    329 #> [2,]    337    336    337    338    338    341    338    342    336    328 #> [3,]    338    338    336    337    342    342    341    338    343    343 #>      [,539] [,540] [,541] [,542] [,543] [,544] [,545] [,546] [,547] [,548] #> [1,]    326    339    344    335    340    326    345    348    324    349 #> [2,]    336    343    337    344    337    333    346    345    346    347 #> [3,]    328    336    333    333    344    337    347    347    345    346 #>      [,549] [,550] [,551] [,552] [,553] [,554] [,555] [,556] [,557] [,558] #> [1,]    350    282    348    349    331    332    324    348    353    329 #> [2,]    347    350    347    351    345    331    345    352    346    353 #> [3,]    351    351    350    347    352    352    331    345    327    327 #>      [,559] [,560] [,561] [,562] [,563] [,564] [,565] [,566] [,567] [,568] #> [1,]    349    324    354    357    325    358    359    104    357    358 #> [2,]    346    327    355    354    355    356    356    359    356    360 #> [3,]    353    346    356    356    354    355    360    360    359    356 #>      [,569] [,570] [,571] [,572] [,573] [,574] [,575] [,576] [,577] [,578] #> [1,]    334    335    325    357    362    332    358    325    363    366 #> [2,]    354    334    354    361    355    362    355    330    364    363 #> [3,]    361    361    334    354    330    330    362    355    365    365 #>      [,579] [,580] [,581] [,582] [,583] [,584] [,585] [,586] [,587] [,588] #> [1,]    367    368    369    329    366    368    371    373    367    366 #> [2,]    364    365    365    369    365    370    363    371    363    372 #> [3,]    363    364    370    370    369    365    372    372    371    363 #>      [,589] [,590] [,591] [,592] [,593] [,594] [,595] [,596] [,597] [,598] #> [1,]    374    376    368    367    377    349    368    380    351    282 #> [2,]    364    374    364    375    378    377    378    379    379    351 #> [3,]    375    375    374    364    379    379    377    378    381    381 #>      [,599] [,600] [,601] [,602] [,603] [,604] [,605] [,606] [,607] [,608] #> [1,]    349    380    370    329    368    349    382    376    380    368 #> [2,]    379    381    377    370    377    353    378    382    378    374 #> [3,]    351    379    353    353    370    377    374    374    382    378 #>      [,609] [,610] [,611] [,612] [,613] [,614] [,615] [,616] [,617] [,618] #> [1,]    383    386    366    339    387    239    386    339    372    373 #> [2,]    384    383    384    385    385    387    385    341    383    372 #> [3,]    385    385    383    384    341    341    387    385    388    388 #>      [,619] [,620] [,621] [,622] [,623] [,624] [,625] [,626] [,627] [,628] #> [1,]    366    386    343    329    339    366    389    392    367    393 #> [2,]    383    388    384    343    384    369    390    389    390    391 #> [3,]    372    383    369    369    343    384    391    391    389    390 #>      [,629] [,630] [,631] [,632] [,633] [,634] [,635] [,636] [,637] [,638] #> [1,]    394     33    392    393    375    376    367    392    397    373 #> [2,]    391    394    391    395    389    375    389    396    390    397 #> [3,]    395    395    394    391    396    396    375    389    371    371 #>      [,639] [,640] [,641] [,642] [,643] [,644] [,645] [,646] [,647] [,648] #> [1,]    393    367    398    401    402    403    404    406    401    403 #> [2,]    390    371    399    398    399    400    400    404    400    405 #> [3,]    397    390    400    400    398    399    405    405    404    400 #>      [,649] [,650] [,651] [,652] [,653] [,654] [,655] [,656] [,657] [,658] #> [1,]    407    409    402    401    410    412    403    402    413    416 #> [2,]    398    407    398    408    399    410    399    411    414    413 #> [3,]    408    408    407    398    411    411    410    399    415    415 #>      [,659] [,660] [,661] [,662] [,663] [,664] [,665] [,666] [,667] [,668] #> [1,]    403    417    418    203    416    417    405    406    403    416 #> [2,]    414    415    415    418    415    419    413    405    413    420 #> [3,]    413    414    419    419    418    415    420    420    405    413 #>      [,669] [,670] [,671] [,672] [,673] [,674] [,675] [,676] [,677] [,678] #> [1,]    421    412    417    403    422    425    401    426    427    318 #> [2,]    414    421    414    410    423    422    423    424    424    427 #> [3,]    410    410    421    414    424    424    422    423    428    428 #>      [,679] [,680] [,681] [,682] [,683] [,684] [,685] [,686] [,687] [,688] #> [1,]    425    426    408    409    401    425    430    406    426    401 #> [2,]    424    428    422    408    422    429    423    430    423    404 #> [3,]    427    424    429    429    408    422    404    404    430    423 #>      [,689] [,690] [,691] [,692] [,693] [,694] [,695] [,696] [,697] [,698] #> [1,]    431    434    402    435    436     23    434    435    411    412 #> [2,]    432    431    432    433    433    436    433    437    431    411 #> [3,]    433    433    431    432    437    437    436    433    438    438 #>      [,699] [,700] [,701] [,702] [,703] [,704] [,705] [,706] [,707] [,708] #> [1,]    402    434    439    409    435    402    440    443    444    445 #> [2,]    431    438    432    439    432    407    441    440    441    442 #> [3,]    411    431    407    407    439    432    442    442    440    441 #>      [,709] [,710] [,711] [,712] [,713] [,714] [,715] [,716] [,717] [,718] #> [1,]    446    406    443    445    448    450    444    443    451    453 #> [2,]    442    446    442    447    440    448    440    449    441    451 #> [3,]    447    447    446    442    449    449    448    440    452    452 #>      [,719] [,720] [,721] [,722] [,723] [,724] [,725] [,726] [,727] [,728] #> [1,]    445    444    454    426    445    457    428    318    426    457 #> [2,]    441    452    455    454    455    456    456    428    456    458 #> [3,]    451    441    456    456    454    455    458    458    428    456 #>      [,729] [,730] [,731] [,732] [,733] [,734] [,735] [,736] [,737] [,738] #> [1,]    447    406    445    426    459    453    457    445    460    463 #> [2,]    454    447    454    430    455    459    455    451    461    460 #> [3,]    430    430    447    454    451    451    459    455    462    462 #>      [,739] [,740] [,741] [,742] [,743] [,744] [,745] [,746] [,747] [,748] #> [1,]    443    416    464    203    463    416    449    450    443    463 #> [2,]    461    462    462    464    462    418    460    449    460    465 #> [3,]    460    461    418    418    464    462    465    465    449    460 #>      [,749] [,750] [,751] [,752] [,753] [,754] [,755] [,756] [,757] [,758] #> [1,]    420    406    416    443    466    469    444    470    471    114 #> [2,]    461    420    461    446    467    466    467    468    468    471 #> [3,]    446    446    420    461    468    468    466    467    472    472 #>      [,759] [,760] [,761] [,762] [,763] [,764] [,765] [,766] [,767] [,768] #> [1,]    469    470    452    453    444    469    474    450    470    444 #> [2,]    468    472    466    452    466    473    467    474    467    448 #> [3,]    471    468    473    473    452    466    448    448    474    467 #>      [,769] [,770] [,771] [,772] [,773] [,774] [,775] [,776] [,777] [,778] #> [1,]    475    478    479    480    481    373    478    480    483    216 #> [2,]    476    475    476    477    477    481    477    482    475    483 #> [3,]    477    477    475    476    482    482    481    477    484    484 #>      [,779] [,780] [,781] [,782] [,783] [,784] [,785] [,786] [,787] [,788] #> [1,]    479    478    485     12    480    479    487    393    480     29 #> [2,]    475    484    476    485    476    486    488    487    488    489 #> [3,]    483    475    486    486    485    476    489    489    487    488 #>      [,789] [,790] [,791] [,792] [,793] [,794] [,795] [,796] [,797] [,798] #> [1,]    395     33    393     29    482    373    480    393     34     12 #> [2,]    489    395    489     31    487    482    487    397    488     34 #> [3,]     31     31    395    489    397    397    482    487    485    485 #>      [,799] [,800] [,801] [,802] [,803] [,804] [,805] [,806] [,807] [,808] #> [1,]     29    480    490    236    478    386    238    239    236    386 #> [2,]    488    485    491    490    491    492    492    238    492    387 #> [3,]     34    488    492    492    490    491    387    387    238    492 #>      [,809] [,810] [,811] [,812] [,813] [,814] [,815] [,816] [,817] [,818] #> [1,]    484    216    478    236    388    373    386    478    493     40 #> [2,]    490    484    490    241    491    388    491    481    494    493 #> [3,]    241    241    484    490    481    481    388    491    495    495 #>      [,819] [,820] [,821] [,822] [,823] [,824] [,825] [,826] [,827] [,828] #> [1,]    479    229     42     43     40    229    486     12    479     40 #> [2,]    494    495    495     42    495    230    493    486    493     45 #> [3,]    493    494    230    230     42    495     45     45    486    493 #>      [,829] [,830] [,831] [,832] [,833] [,834] [,835] [,836] [,837] [,838] #> [1,]    231    216    229    479    496    499    500    501    502     59 #> [2,]    494    231    494    483    497    496    497    498    498    502 #> [3,]    483    483    231    494    498    498    496    497    503    503 #>      [,839] [,840] [,841] [,842] [,843] [,844] [,845] [,846] [,847] [,848] #> [1,]    499    501    504    256    500    499    506    376    501    500 #> [2,]    498    503    496    504    496    505    497    506    497    507 #> [3,]    502    498    505    505    504    496    507    507    506    497 #>      [,849] [,850] [,851] [,852] [,853] [,854] [,855] [,856] [,857] [,858] #> [1,]    508     63    501    392     64     33     63    392    503     59 #> [2,]    509    508    509    510    510     64    510    394    508    503 #> [3,]    510    510    508    509    394    394     64    510     65     65 #>      [,859] [,860] [,861] [,862] [,863] [,864] [,865] [,866] [,867] [,868] #> [1,]    501     63    396    376    392    501    511    261    499     75 #> [2,]    508     65    509    396    509    506    512    511    512    513 #> [3,]    503    508    506    506    396    509    513    513    511    512 #>      [,869] [,870] [,871] [,872] [,873] [,874] [,875] [,876] [,877] [,878] #> [1,]    263     79    261     75    505    256    499    261     80     59 #> [2,]    513    263    513     77    511    505    511    265    512     80 #> [3,]     77     77    263    513    265    265    505    511    502    502 #>      [,879] [,880] [,881] [,882] [,883] [,884] [,885] [,886] [,887] [,888] #> [1,]     75    499    514    380    500    278    381    282    380    278 #> [2,]    512    502    515    514    515    516    516    381    516    280 #> [3,]     80    512    516    516    514    515    280    280    381    516 #>      [,889] [,890] [,891] [,892] [,893] [,894] [,895] [,896] [,897] [,898] #> [1,]    507    376    500    380    283    256    278    500    517    520 #> [2,]    514    507    514    382    515    283    515    504    518    517 #> [3,]    382    382    507    514    504    504    283    515    519    519 #>      [,899] [,900] [,901] [,902] [,903] [,904] [,905] [,906] [,907] [,908] #> [1,]    521    522    523     15    520    522    525    177    521    520 #> [2,]    518    519    519    523    519    524    517    525    517    526 #> [3,]    517    518    524    524    523    519    526    526    525    517 #>      [,909] [,910] [,911] [,912] [,913] [,914] [,915] [,916] [,917] [,918] #> [1,]    527    412    522    521    529     20    522    434     22     23 #> [2,]    518    527    518    528    530    529    530    531    531     22 #> [3,]    528    528    527    518    531    531    529    530    436    436 #>      [,919] [,920] [,921] [,922] [,923] [,924] [,925] [,926] [,927] [,928] #> [1,]     20    434    524     15    522     20    438    412    434    522 #> [2,]    531    436    529    524    529     25    530    438    530    527 #> [3,]     22    531     25     25    524    529    527    527    438    530 #>      [,929] [,930] [,931] [,932] [,933] [,934] [,935] [,936] [,937] [,938] #> [1,]    532    182    520     39    184     43    182     39    526    177 #> [2,]    533    532    533    534    534    184    534     41    532    526 #> [3,]    534    534    532    533     41     41    184    534    186    186 #>      [,939] [,940] [,941] [,942] [,943] [,944] [,945] [,946] [,947] [,948] #> [1,]    520    182     44     15     39    520    535    417    521    199 #> [2,]    532    186    533     44    533    523    536    535    536    537 #> [3,]    526    532    523    523     44    533    537    537    535    536 #>      [,949] [,950] [,951] [,952] [,953] [,954] [,955] [,956] [,957] [,958] #> [1,]    419    203    417    199    528    412    521    417    204    177 #> [2,]    537    419    537    201    535    528    535    421    536    204 #> [3,]    201    201    419    537    421    421    528    535    525    525 #>      [,959] [,960] [,961] [,962] [,963] [,964] [,965] [,966] [,967] [,968] #> [1,]    199    521    538    541    542    543    544    409    541    543 #> [2,]    536    525    539    538    539    540    540    544    540    545 #> [3,]    204    536    540    540    538    539    545    545    544    540 #>      [,969] [,970] [,971] [,972] [,973] [,974] [,975] [,976] [,977] [,978] #> [1,]    546    295    542    541    548     56    543    542    550    435 #> [2,]    538    546    538    547    539    548    539    549    551    550 #> [3,]    547    547    546    538    549    549    548    539    552    552 #>      [,979] [,980] [,981] [,982] [,983] [,984] [,985] [,986] [,987] [,988] #> [1,]    543     69    437     23    435     69    545    409    543    435 #> [2,]    551    552    552    437    552     70    550    545    550    439 #> [3,]    550    551     70     70    437    552    439    439    545    550 #>      [,989] [,990] [,991] [,992] [,993] [,994] [,995] [,996] [,997] [,998] #> [1,]     71     56     69    543    553    315    541    425    317    318 #> [2,]    551     71    551    548    554    553    554    555    555    317 #> [3,]    548    548     71    551    555    555    553    554    427    427 #>      [,999] [,1000] [,1001] [,1002] [,1003] [,1004] [,1005] [,1006] [,1007] #> [1,]    315     425     547     295     541     315     429     409     425 #> [2,]    555     427     553     547     553     320     554     429     554 #> [3,]    317     555     320     320     547     553     544     544     429 #>      [,1008] [,1009] [,1010] [,1011] [,1012] [,1013] [,1014] [,1015] [,1016] #> [1,]     541     556      76     542     308      78      79      76     308 #> [2,]     544     557     556     557     558     558      78     558     309 #> [3,]     554     558     558     556     557     309     309      78     558 #>      [,1017] [,1018] [,1019] [,1020] [,1021] [,1022] [,1023] [,1024] [,1025] #> [1,]     549      56     542      76     310     295     308     542     559 #> [2,]     556     549     556      81     557     310     557     546     560 #> [3,]      81      81     549     556     546     546     310     557     561 #>      [,1026] [,1027] [,1028] [,1029] [,1030] [,1031] [,1032] [,1033] [,1034] #> [1,]     562     563     564     565      96     562     564     567     219 #> [2,]     559     560     561     561     565     561     566     559     567 #> [3,]     561     559     560     566     566     565     561     568     568 #>      [,1035] [,1036] [,1037] [,1038] [,1039] [,1040] [,1041] [,1042] [,1043] #> [1,]     563     562     569     335     564     563     571     101     564 #> [2,]     559     568     560     569     560     570     572     571     572 #> [3,]     567     559     570     570     569     560     573     573     571 #>      [,1044] [,1045] [,1046] [,1047] [,1048] [,1049] [,1050] [,1051] [,1052] #> [1,]     357     103     104     101     357     566      96     564     101 #> [2,]     573     573     103     573     359     571     566     571     106 #> [3,]     572     359     359     103     573     106     106     566     571 #>      [,1053] [,1054] [,1055] [,1056] [,1057] [,1058] [,1059] [,1060] [,1061] #> [1,]     361     335     357     564     574     223     562     120     224 #> [2,]     572     361     572     569     575     574     575     576     576 #> [3,]     569     569     361     572     576     576     574     575     122 #>      [,1062] [,1063] [,1064] [,1065] [,1066] [,1067] [,1068] [,1069] [,1070] #> [1,]     124     223     120     568     219     562     223     125      96 #> [2,]     224     576     122     574     568     574     225     575     125 #> [3,]     122     224     576     225     225     568     574     565     565 #>      [,1071] [,1072] [,1073] [,1074] [,1075] [,1076] [,1077] [,1078] [,1079] #> [1,]     120     562     577     340     563     235     342     239     340 #> [2,]     575     565     578     577     578     579     579     342     579 #> [3,]     125     575     579     579     577     578     237     237     342 #>      [,1080] [,1081] [,1082] [,1083] [,1084] [,1085] [,1086] [,1087] [,1088] #> [1,]     235     570     335     563     340     240     219     235     563 #> [2,]     237     577     570     577     344     578     240     578     567 #> [3,]     579     344     344     570     577     567     567     240     578 #>      [,1089] [,1090] [,1091] [,1092] [,1093] [,1094] [,1095] [,1096] [,1097] #> [1,]     580     583     584     585     586     332     583     585     588 #> [2,]     581     580     581     582     582     586     582     587     580 #> [3,]     582     582     580     581     587     587     586     582     589 #>      [,1098] [,1099] [,1100] [,1101] [,1102] [,1103] [,1104] [,1105] [,1106] #> [1,]     253     584     583     590     137     585     584     592     358 #> [2,]     588     580     589     581     590     581     591     593     592 #> [3,]     589     588     580     591     591     590     581     594     594 #>      [,1107] [,1108] [,1109] [,1110] [,1111] [,1112] [,1113] [,1114] [,1115] #> [1,]     585     150     360     104     358     150     587     332     585 #> [2,]     593     594     594     360     594     151     592     587     592 #> [3,]     592     593     151     151     360     594     362     362     587 #>      [,1116] [,1117] [,1118] [,1119] [,1120] [,1121] [,1122] [,1123] [,1124] #> [1,]     358     152     137     150     585     595     279     583     348 #> [2,]     362     593     152     593     590     596     595     596     597 #> [3,]     592     590     590     152     593     597     597     595     596 #>      [,1125] [,1126] [,1127] [,1128] [,1129] [,1130] [,1131] [,1132] [,1133] #> [1,]     281     282     279     348     589     253     583     279     352 #> [2,]     597     281     597     350     595     589     595     284     596 #> [3,]     350     350     281     597     284     284     589     595     586 #>      [,1134] [,1135] [,1136] [,1137] [,1138] [,1139] [,1140] [,1141] [,1142] #> [1,]     332     348     583     598     157     584     269     159     160 #> [2,]     352     596     586     599     598     599     600     600     159 #> [3,]     586     352     596     600     600     598     599     271     271 #>      [,1143] [,1144] [,1145] [,1146] [,1147] [,1148] [,1149] [,1150] [,1151] #> [1,]     157     269     591     137     584     157     273     253     269 #> [2,]     600     271     598     591     598     162     599     273     599 #> [3,]     159     600     162     162     591     598     588     588     273 #>      [,1152] [,1153] [,1154] [,1155] [,1156] [,1157] [,1158] [,1159] [,1160] #> [1,]     584     601     604     605     606     607     450     604     606 #> [2,]     588     602     601     602     603     603     607     603     608 #> [3,]     599     603     603     601     602     608     608     607     603 #>      [,1161] [,1162] [,1163] [,1164] [,1165] [,1166] [,1167] [,1168] [,1169] #> [1,]     609     174     605     604     611      93     606     605     613 #> [2,]     601     609     601     610     602     611     602     612     614 #> [3,]     610     610     609     601     612     612     611     602     615 #>      [,1170] [,1171] [,1172] [,1173] [,1174] [,1175] [,1176] [,1177] [,1178] #> [1,]     470     606     110     472     114     470     110     608     450 #> [2,]     613     614     615     615     472     615     112     613     608 #> [3,]     615     613     614     112     112     472     615     474     474 #>      [,1179] [,1180] [,1181] [,1182] [,1183] [,1184] [,1185] [,1186] [,1187] #> [1,]     606     470     115      93     110     606     616     200     604 #> [2,]     613     474     614     115     614     611     617     616     617 #> [3,]     608     613     611     611     115     614     618     618     616 #>      [,1188] [,1189] [,1190] [,1191] [,1192] [,1193] [,1194] [,1195] [,1196] #> [1,]     463     202     203     200     463     610     174     604     200 #> [2,]     618     618     202     618     464     616     610     616     205 #> [3,]     617     464     464     202     618     205     205     610     616 #>      [,1197] [,1198] [,1199] [,1200] [,1201] [,1202] [,1203] [,1204] [,1205] #> [1,]     465     450     463     604     619     121     605     190     123 #> [2,]     617     465     617     607     620     619     620     621     621 #> [3,]     607     607     465     617     621     621     619     620     192 #>      [,1206] [,1207] [,1208] [,1209] [,1210] [,1211] [,1212] [,1213] [,1214] #> [1,]     124     121     190     612      93     605     121     194     174 #> [2,]     123     621     192     619     612     619     126     620     194 #> [3,]     192     123     621     126     126     612     619     609     609 #>      [,1215] [,1216] [,1217] [,1218] [,1219] [,1220] [,1221] [,1222] [,1223] #> [1,]     190     605     622     625     626     627     628     140     625 #> [2,]     620     609     623     622     623     624     624     628     624 #> [3,]     194     620     624     624     622     623     629     629     628 #>      [,1224] [,1225] [,1226] [,1227] [,1228] [,1229] [,1230] [,1231] [,1232] #> [1,]     627     630     298     626     625     632     453     627     626 #> [2,]     629     622     630     622     631     623     632     623     633 #> [3,]     624     631     631     630     622     633     633     632     623 #>      [,1233] [,1234] [,1235] [,1236] [,1237] [,1238] [,1239] [,1240] [,1241] #> [1,]     634     144     627     469     145     114     144     469     629 #> [2,]     635     634     635     636     636     145     636     471     634 #> [3,]     636     636     634     635     471     471     145     636     146 #>      [,1242] [,1243] [,1244] [,1245] [,1246] [,1247] [,1248] [,1249] [,1250] #> [1,]     140     627     144     473     453     469     627     637     302 #> [2,]     629     634     146     635     473     635     632     638     637 #> [3,]     146     629     634     632     632     473     635     639     639 #>      [,1251] [,1252] [,1253] [,1254] [,1255] [,1256] [,1257] [,1258] [,1259] #> [1,]     625     156     303     160     302     156     631     298     625 #> [2,]     638     639     639     303     639     158     637     631     637 #> [3,]     637     638     158     158     303     639     304     304     631 #>      [,1260] [,1261] [,1262] [,1263] [,1264] [,1265] [,1266] [,1267] [,1268] #> [1,]     302     161     140     156     625     640     457     626     314 #> [2,]     304     638     161     638     628     641     640     641     642 #> [3,]     637     628     628     161     638     642     642     640     641 #>      [,1269] [,1270] [,1271] [,1272] [,1273] [,1274] [,1275] [,1276] [,1277] #> [1,]     458     318     457     314     633     453     626     457     319 #> [2,]     642     458     642     316     640     633     640     459     641 #> [3,]     316     316     458     642     459     459     633     640     630 #>      [,1278] [,1279] [,1280] #> [1,]     298     314     626 #> [2,]     319     641     630 #> [3,]     630     319     641 #>  #> $normals #>            [,1]        [,2]      [,3]      [,4]      [,5]       [,6]       [,7] #> [1,] 0.39804780  0.39804778 0.2698837 0.2690583 0.5156448  0.2690583 0.13761987 #> [2,] 0.91393864  0.91393864 0.9628929 0.9509901 0.8568025  0.9509901 0.98789960 #> [3,] 0.07920973 -0.07920972 0.0000000 0.1523987 0.0000000 -0.1523987 0.07152016 #> [4,] 1.00000000  1.00000000 1.0000000 1.0000000 1.0000000  1.0000000 1.00000000 #>             [,8] [,9]     [,10]     [,11]     [,12]      [,13]      [,14] #> [1,]  0.13761987    0 0.5092841 0.3935618 0.5000001  0.3935618  0.5092841 #> [2,]  0.98789960    1 0.8459364 0.8901385 0.8090169  0.8901384  0.8459364 #> [3,] -0.07152016    0 0.1581808 0.2297011 0.3090171 -0.2297012 -0.1581808 #> [4,]  1.00000000    1 1.0000000 1.0000000 1.0000000  1.0000000  1.0000000 #>           [,15]      [,16]      [,17]      [,18]         [,19]      [,20] #> [1,]  0.5000001  0.1338693  0.2615449  0.1333718  5.235228e-10  0.2538757 #> [2,]  0.8090169  0.9657155  0.9169477  0.9249716  9.601221e-01  0.8631504 #> [3,] -0.3090171 -0.2224242 -0.3013324 -0.3558643 -2.795808e-01 -0.4364845 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00  1.0000000 #>              [,21]      [,22]      [,23]         [,24]      [,25]     [,26] #> [1,] -2.132114e-09  0.1234217  0.0000000  5.270089e-10  0.3792600 0.2615449 #> [2,]  9.116833e-01  0.8645404  0.8506507  9.897372e-01  0.8448727 0.9169477 #> [3,] -4.108939e-01 -0.4871725 -0.5257313 -1.428997e-01 -0.3772957 0.3013324 #> [4,]  1.000000e+00  1.0000000  1.0000000  1.000000e+00  1.0000000 1.0000000 #>          [,27]     [,28]     [,29]        [,30]     [,31]        [,32] #> [1,] 0.1338693 0.1333718 0.2538757 5.235228e-10 0.1234217 1.066057e-09 #> [2,] 0.9657155 0.9249716 0.8631504 9.601221e-01 0.8645404 9.116833e-01 #> [3,] 0.2224242 0.3558643 0.4364845 2.795808e-01 0.4871725 4.108939e-01 #> [4,] 1.0000000 1.0000000 1.0000000 1.000000e+00 1.0000000 1.000000e+00 #>          [,33]     [,34]        [,35]       [,36]      [,37]     [,38] #> [1,] 0.0000000 0.3792600 5.270089e-10  0.62143493 0.62143493 0.7091719 #> [2,] 0.8506507 0.8448727 9.897372e-01  0.77948201 0.77948201 0.7050356 #> [3,] 0.5257313 0.3772958 1.428997e-01 -0.07890788 0.07890789 0.0000000 #> [4,] 1.0000000 1.0000000 1.000000e+00  1.00000000 1.00000000 1.0000000 #>           [,39]     [,40]       [,41]      [,42]     [,43]      [,44]     [,45] #> [1,]  0.7062466 0.7062466  0.78826165 0.78826165 0.8506507  0.6104770 0.6104770 #> [2,]  0.6903601 0.6903601  0.61059409 0.61059409 0.5257313  0.7565556 0.7565557 #> [3,] -0.1569037 0.1569037 -0.07627852 0.07627852 0.0000000 -0.2343958 0.2343958 #> [4,]  1.0000000 1.0000000  1.00000000 1.00000000 1.0000000  1.0000000 1.0000000 #>            [,46]       [,47]      [,48]      [,49]      [,50]      [,51] #> [1,] -0.39804780 -0.39804778 -0.2698837 -0.2690583 -0.5156448 -0.2690583 #> [2,]  0.91393864  0.91393864  0.9628929  0.9509901  0.8568025  0.9509901 #> [3,] -0.07920973  0.07920972  0.0000000 -0.1523987  0.0000000  0.1523987 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000 #>            [,52]       [,53]      [,54]      [,55]      [,56]      [,57] #> [1,] -0.13761987 -0.13761987 -0.5092841 -0.3935618 -0.5000001 -0.3935618 #> [2,]  0.98789960  0.98789960  0.8459364  0.8901385  0.8090169  0.8901384 #> [3,] -0.07152016  0.07152016 -0.1581808 -0.2297011 -0.3090171  0.2297012 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,58]      [,59]      [,60]      [,61]      [,62]      [,63] #> [1,] -0.5092841 -0.5000001 -0.1338693 -0.2615449 -0.1333718 -0.2538757 #> [2,]  0.8459364  0.8090169  0.9657155  0.9169477  0.9249716  0.8631504 #> [3,]  0.1581808  0.3090171  0.2224242  0.3013324  0.3558643  0.4364845 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,64]      [,65]      [,66]      [,67]      [,68]      [,69] #> [1,] -0.1234217 -0.3792600 -0.2615449 -0.1338693 -0.1333718 -0.2538757 #> [2,]  0.8645404  0.8448727  0.9169477  0.9657155  0.9249716  0.8631504 #> [3,]  0.4871725  0.3772957 -0.3013324 -0.2224242 -0.3558643 -0.4364845 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,70]      [,71]       [,72]       [,73]      [,74]      [,75] #> [1,] -0.1234217 -0.3792600 -0.62143493 -0.62143493 -0.7091719 -0.7062466 #> [2,]  0.8645404  0.8448727  0.77948201  0.77948201  0.7050356  0.6903601 #> [3,] -0.4871725 -0.3772958  0.07890788 -0.07890789  0.0000000  0.1569037 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>           [,76]       [,77]       [,78]      [,79]      [,80]      [,81] #> [1,] -0.7062466 -0.78826165 -0.78826165 -0.8506507 -0.6104770 -0.6104770 #> [2,]  0.6903601  0.61059409  0.61059409  0.5257313  0.7565556  0.7565557 #> [3,] -0.1569037  0.07627852 -0.07627852  0.0000000  0.2343958 -0.2343958 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>            [,82]       [,83]      [,84]      [,85]      [,86]      [,87] #> [1,]  0.39804780  0.39804778  0.2698837  0.2690583  0.5156448  0.2690583 #> [2,] -0.91393864 -0.91393864 -0.9628929 -0.9509901 -0.8568025 -0.9509901 #> [3,] -0.07920973  0.07920972  0.0000000 -0.1523987  0.0000000  0.1523987 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000 #>            [,88]       [,89] [,90]      [,91]      [,92]      [,93]      [,94] #> [1,]  0.13761987  0.13761987     0  0.5092841  0.3935618  0.5000001  0.3935618 #> [2,] -0.98789960 -0.98789960    -1 -0.8459364 -0.8901385 -0.8090169 -0.8901384 #> [3,] -0.07152016  0.07152016     0 -0.1581808 -0.2297011 -0.3090171  0.2297012 #> [4,]  1.00000000  1.00000000     1  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,95]      [,96]      [,97]      [,98]      [,99]        [,100] #> [1,]  0.5092841  0.5000001  0.1338693  0.2615449  0.1333718  5.235228e-10 #> [2,] -0.8459364 -0.8090169 -0.9657155 -0.9169477 -0.9249716 -9.601221e-01 #> [3,]  0.1581808  0.3090171  0.2224242  0.3013324  0.3558643  2.795808e-01 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00 #>          [,101]        [,102]     [,103]     [,104]        [,105]     [,106] #> [1,]  0.2538757 -2.132114e-09  0.1234217  0.0000000  5.270089e-10  0.3792600 #> [2,] -0.8631504 -9.116833e-01 -0.8645404 -0.8506507 -9.897372e-01 -0.8448727 #> [3,]  0.4364845  4.108939e-01  0.4871725  0.5257313  1.428997e-01  0.3772957 #> [4,]  1.0000000  1.000000e+00  1.0000000  1.0000000  1.000000e+00  1.0000000 #>          [,107]     [,108]     [,109]     [,110]        [,111]     [,112] #> [1,]  0.2615449  0.1338693  0.1333718  0.2538757  5.235228e-10  0.1234217 #> [2,] -0.9169477 -0.9657155 -0.9249716 -0.8631504 -9.601221e-01 -0.8645404 #> [3,] -0.3013324 -0.2224242 -0.3558643 -0.4364845 -2.795808e-01 -0.4871725 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00  1.0000000 #>             [,113]     [,114]     [,115]        [,116]      [,117]      [,118] #> [1,]  1.066057e-09  0.0000000  0.3792600  5.270089e-10  0.62143493  0.62143493 #> [2,] -9.116833e-01 -0.8506507 -0.8448727 -9.897372e-01 -0.77948201 -0.77948201 #> [3,] -4.108939e-01 -0.5257313 -0.3772958 -1.428997e-01  0.07890788 -0.07890789 #> [4,]  1.000000e+00  1.0000000  1.0000000  1.000000e+00  1.00000000  1.00000000 #>          [,119]     [,120]     [,121]      [,122]      [,123]     [,124] #> [1,]  0.7091719  0.7062466  0.7062466  0.78826165  0.78826165  0.8506507 #> [2,] -0.7050356 -0.6903601 -0.6903601 -0.61059409 -0.61059409 -0.5257313 #> [3,]  0.0000000  0.1569037 -0.1569037  0.07627852 -0.07627852  0.0000000 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,125]     [,126]      [,127]      [,128]     [,129]     [,130] #> [1,]  0.6104770  0.6104770 -0.39804780 -0.39804778 -0.2698837 -0.2690583 #> [2,] -0.7565556 -0.7565557 -0.91393864 -0.91393864 -0.9628929 -0.9509901 #> [3,]  0.2343958 -0.2343958  0.07920973 -0.07920972  0.0000000  0.1523987 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,131]     [,132]      [,133]      [,134]     [,135]     [,136] #> [1,] -0.5156448 -0.2690583 -0.13761987 -0.13761987 -0.5092841 -0.3935618 #> [2,] -0.8568025 -0.9509901 -0.98789960 -0.98789960 -0.8459364 -0.8901385 #> [3,]  0.0000000 -0.1523987  0.07152016 -0.07152016  0.1581808  0.2297011 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,137]     [,138]     [,139]     [,140]     [,141]     [,142] #> [1,] -0.5000001 -0.3935618 -0.5092841 -0.5000001 -0.1338693 -0.2615449 #> [2,] -0.8090169 -0.8901384 -0.8459364 -0.8090169 -0.9657155 -0.9169477 #> [3,]  0.3090171 -0.2297012 -0.1581808 -0.3090171 -0.2224242 -0.3013324 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,143]     [,144]     [,145]     [,146]     [,147]     [,148] #> [1,] -0.1333718 -0.2538757 -0.1234217 -0.3792600 -0.2615449 -0.1338693 #> [2,] -0.9249716 -0.8631504 -0.8645404 -0.8448727 -0.9169477 -0.9657155 #> [3,] -0.3558643 -0.4364845 -0.4871725 -0.3772957  0.3013324  0.2224242 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,149]     [,150]     [,151]     [,152]      [,153]      [,154] #> [1,] -0.1333718 -0.2538757 -0.1234217 -0.3792600 -0.62143493 -0.62143493 #> [2,] -0.9249716 -0.8631504 -0.8645404 -0.8448727 -0.77948201 -0.77948201 #> [3,]  0.3558643  0.4364845  0.4871725  0.3772958 -0.07890788  0.07890789 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000 #>          [,155]     [,156]     [,157]      [,158]      [,159]     [,160] #> [1,] -0.7091719 -0.7062466 -0.7062466 -0.78826165 -0.78826165 -0.8506507 #> [2,] -0.7050356 -0.6903601 -0.6903601 -0.61059409 -0.61059409 -0.5257313 #> [3,]  0.0000000 -0.1569037  0.1569037 -0.07627852  0.07627852  0.0000000 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,161]     [,162]      [,163]      [,164]     [,165]     [,166] #> [1,] -0.6104770 -0.6104770  0.91393858  0.91393864  0.9628929  0.9509901 #> [2,] -0.7565556 -0.7565557 -0.07920986  0.07920986  0.0000000 -0.1523988 #> [3,] -0.2343958  0.2343958 -0.39804778 -0.39804778 -0.2698837 -0.2690584 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000 #>          [,167]     [,168]      [,169]      [,170] [,171]     [,172]     [,173] #> [1,]  0.8568025  0.9509901  0.98789960  0.98789960      1  0.8459365  0.8901384 #> [2,]  0.0000000  0.1523988 -0.07152016  0.07152016      0 -0.1581809 -0.2297011 #> [3,] -0.5156448 -0.2690584 -0.13761987 -0.13761987      0 -0.5092840 -0.3935618 #> [4,]  1.0000000  1.0000000  1.00000000  1.00000000      1  1.0000000  1.0000000 #>          [,174]     [,175]     [,176]     [,177]     [,178]     [,179] #> [1,]  0.8090170  0.8901384  0.8459365  0.8090170  0.9657155  0.9169477 #> [2,] -0.3090171  0.2297011  0.1581809  0.3090171  0.2224242  0.3013323 #> [3,] -0.5000000 -0.3935618 -0.5092840 -0.5000000 -0.1338693 -0.2615451 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,180]        [,181]     [,182]       [,183]     [,184]        [,185] #> [1,]  0.9249716  9.601221e-01  0.8631504 9.116833e-01  0.8645404  9.897372e-01 #> [2,]  0.3558643  2.795808e-01  0.4364843 4.108939e-01  0.4871725  1.428997e-01 #> [3,] -0.1333718 -5.235228e-10 -0.2538757 2.132114e-09 -0.1234216 -5.270089e-10 #> [4,]  1.0000000  1.000000e+00  1.0000000 1.000000e+00  1.0000000  1.000000e+00 #>          [,186]     [,187]     [,188]     [,189]     [,190]        [,191] #> [1,]  0.8448727  0.9169477  0.9657155  0.9249716  0.8631504  9.601221e-01 #> [2,]  0.3772956 -0.3013323 -0.2224242 -0.3558643 -0.4364843 -2.795808e-01 #> [3,] -0.3792600 -0.2615451 -0.1338693 -0.1333718 -0.2538757 -5.235228e-10 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00 #>          [,192]        [,193]     [,194]        [,195]      [,196]      [,197] #> [1,]  0.8645404  9.116833e-01  0.8448727  9.897372e-01  0.77948201  0.77948201 #> [2,] -0.4871725 -4.108939e-01 -0.3772956 -1.428997e-01  0.07890788 -0.07890789 #> [3,] -0.1234216 -1.066057e-09 -0.3792600 -5.270089e-10 -0.62143493 -0.62143493 #> [4,]  1.0000000  1.000000e+00  1.0000000  1.000000e+00  1.00000000  1.00000000 #>          [,198]     [,199]     [,200]      [,201]      [,202]     [,203] #> [1,]  0.7050356  0.6903600  0.6903600  0.61059409  0.61059409  0.5257313 #> [2,]  0.0000000  0.1569038 -0.1569038  0.07627863 -0.07627863  0.0000000 #> [3,] -0.7091719 -0.7062467 -0.7062467 -0.78826165 -0.78826165 -0.8506507 #> [4,]  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000  1.0000000 #>          [,204]     [,205]     [,206]      [,207]    [,208]    [,209]    [,210] #> [1,]  0.7565557  0.7565557 0.91393858  0.91393864 0.9628929 0.9509901 0.8568025 #> [2,]  0.2343958 -0.2343958 0.07920986 -0.07920986 0.0000000 0.1523988 0.0000000 #> [3,] -0.6104770 -0.6104770 0.39804778  0.39804778 0.2698837 0.2690584 0.5156448 #> [4,]  1.0000000  1.0000000 1.00000000  1.00000000 1.0000000 1.0000000 1.0000000 #>          [,211]     [,212]      [,213]    [,214]    [,215]    [,216]     [,217] #> [1,]  0.9509901 0.98789960  0.98789960 0.8459365 0.8901384 0.8090170  0.8901384 #> [2,] -0.1523988 0.07152016 -0.07152016 0.1581809 0.2297011 0.3090171 -0.2297011 #> [3,]  0.2690584 0.13761987  0.13761987 0.5092840 0.3935618 0.5000000  0.3935618 #> [4,]  1.0000000 1.00000000  1.00000000 1.0000000 1.0000000 1.0000000  1.0000000 #>          [,218]     [,219]     [,220]     [,221]     [,222]     [,223] #> [1,]  0.8459365  0.8090170  0.9657155  0.9169477  0.9249716  0.8631504 #> [2,] -0.1581809 -0.3090171 -0.2224242 -0.3013323 -0.3558643 -0.4364843 #> [3,]  0.5092840  0.5000000  0.1338693  0.2615451  0.1333718  0.2538757 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,224]     [,225]    [,226]    [,227]    [,228]    [,229]    [,230] #> [1,]  0.8645404  0.8448727 0.9169477 0.9657155 0.9249716 0.8631504 0.8645404 #> [2,] -0.4871725 -0.3772956 0.3013323 0.2224242 0.3558643 0.4364843 0.4871725 #> [3,]  0.1234216  0.3792600 0.2615451 0.1338693 0.1333718 0.2538757 0.1234216 #> [4,]  1.0000000  1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,231]      [,232]     [,233]    [,234]     [,235]    [,236] #> [1,] 0.8448727  0.77948201 0.77948201 0.7050356  0.6903600 0.6903600 #> [2,] 0.3772956 -0.07890788 0.07890789 0.0000000 -0.1569038 0.1569038 #> [3,] 0.3792600  0.62143493 0.62143493 0.7091719  0.7062467 0.7062467 #> [4,] 1.0000000  1.00000000 1.00000000 1.0000000  1.0000000 1.0000000 #>           [,237]     [,238]    [,239]     [,240]    [,241]      [,242] #> [1,]  0.61059409 0.61059409 0.5257313  0.7565557 0.7565557 -0.91393858 #> [2,] -0.07627863 0.07627863 0.0000000 -0.2343958 0.2343958 -0.07920986 #> [3,]  0.78826165 0.78826165 0.8506507  0.6104770 0.6104770  0.39804778 #> [4,]  1.00000000 1.00000000 1.0000000  1.0000000 1.0000000  1.00000000 #>           [,243]     [,244]     [,245]     [,246]     [,247]      [,248] #> [1,] -0.91393864 -0.9628929 -0.9509901 -0.8568025 -0.9509901 -0.98789960 #> [2,]  0.07920986  0.0000000 -0.1523988  0.0000000  0.1523988 -0.07152016 #> [3,]  0.39804778  0.2698837  0.2690584  0.5156448  0.2690584  0.13761987 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,249] [,250]     [,251]     [,252]     [,253]     [,254]     [,255] #> [1,] -0.98789960     -1 -0.8459365 -0.8901384 -0.8090170 -0.8901384 -0.8459365 #> [2,]  0.07152016      0 -0.1581809 -0.2297011 -0.3090171  0.2297011  0.1581809 #> [3,]  0.13761987      0  0.5092840  0.3935618  0.5000000  0.3935618  0.5092840 #> [4,]  1.00000000      1  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,256]     [,257]     [,258]     [,259]        [,260]     [,261] #> [1,] -0.8090170 -0.9657155 -0.9169477 -0.9249716 -9.601221e-01 -0.8631504 #> [2,]  0.3090171  0.2224242  0.3013323  0.3558643  2.795808e-01  0.4364843 #> [3,]  0.5000000  0.1338693  0.2615451  0.1333718  5.235228e-10  0.2538757 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00  1.0000000 #>             [,262]     [,263]        [,264]     [,265]     [,266]     [,267] #> [1,] -9.116833e-01 -0.8645404 -9.897372e-01 -0.8448727 -0.9169477 -0.9657155 #> [2,]  4.108939e-01  0.4871725  1.428997e-01  0.3772956 -0.3013323 -0.2224242 #> [3,] -2.132114e-09  0.1234216  5.270089e-10  0.3792600  0.2615451  0.1338693 #> [4,]  1.000000e+00  1.0000000  1.000000e+00  1.0000000  1.0000000  1.0000000 #>          [,268]     [,269]        [,270]     [,271]        [,272]     [,273] #> [1,] -0.9249716 -0.8631504 -9.601221e-01 -0.8645404 -9.116833e-01 -0.8448727 #> [2,] -0.3558643 -0.4364843 -2.795808e-01 -0.4871725 -4.108939e-01 -0.3772956 #> [3,]  0.1333718  0.2538757  5.235228e-10  0.1234216  1.066057e-09  0.3792600 #> [4,]  1.0000000  1.0000000  1.000000e+00  1.0000000  1.000000e+00  1.0000000 #>             [,274]      [,275]      [,276]     [,277]     [,278]     [,279] #> [1,] -9.897372e-01 -0.77948201 -0.77948201 -0.7050356 -0.6903600 -0.6903600 #> [2,] -1.428997e-01  0.07890788 -0.07890789  0.0000000  0.1569038 -0.1569038 #> [3,]  5.270089e-10  0.62143493  0.62143493  0.7091719  0.7062467  0.7062467 #> [4,]  1.000000e+00  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,280]      [,281]     [,282]     [,283]     [,284]      [,285] #> [1,] -0.61059409 -0.61059409 -0.5257313 -0.7565557 -0.7565557 -0.91393858 #> [2,]  0.07627863 -0.07627863  0.0000000  0.2343958 -0.2343958  0.07920986 #> [3,]  0.78826165  0.78826165  0.8506507  0.6104770  0.6104770 -0.39804778 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,286]     [,287]     [,288]     [,289]     [,290]      [,291] #> [1,] -0.91393864 -0.9628929 -0.9509901 -0.8568025 -0.9509901 -0.98789960 #> [2,] -0.07920986  0.0000000  0.1523988  0.0000000 -0.1523988  0.07152016 #> [3,] -0.39804778 -0.2698837 -0.2690584 -0.5156448 -0.2690584 -0.13761987 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,292]     [,293]     [,294]     [,295]     [,296]     [,297] #> [1,] -0.98789960 -0.8459365 -0.8901384 -0.8090170 -0.8901384 -0.8459365 #> [2,] -0.07152016  0.1581809  0.2297011  0.3090171 -0.2297011 -0.1581809 #> [3,] -0.13761987 -0.5092840 -0.3935618 -0.5000000 -0.3935618 -0.5092840 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,298]     [,299]     [,300]     [,301]     [,302]     [,303] #> [1,] -0.8090170 -0.9657155 -0.9169477 -0.9249716 -0.8631504 -0.8645404 #> [2,] -0.3090171 -0.2224242 -0.3013323 -0.3558643 -0.4364843 -0.4871725 #> [3,] -0.5000000 -0.1338693 -0.2615451 -0.1333718 -0.2538757 -0.1234216 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,304]     [,305]     [,306]     [,307]     [,308]     [,309] #> [1,] -0.8448727 -0.9169477 -0.9657155 -0.9249716 -0.8631504 -0.8645404 #> [2,] -0.3772956  0.3013323  0.2224242  0.3558643  0.4364843  0.4871725 #> [3,] -0.3792600 -0.2615451 -0.1338693 -0.1333718 -0.2538757 -0.1234216 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,310]      [,311]      [,312]     [,313]     [,314]     [,315] #> [1,] -0.8448727 -0.77948201 -0.77948201 -0.7050356 -0.6903600 -0.6903600 #> [2,]  0.3772956 -0.07890788  0.07890789  0.0000000 -0.1569038  0.1569038 #> [3,] -0.3792600 -0.62143493 -0.62143493 -0.7091719 -0.7062467 -0.7062467 #> [4,]  1.0000000  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,316]      [,317]     [,318]     [,319]     [,320]      [,321] #> [1,] -0.61059409 -0.61059409 -0.5257313 -0.7565557 -0.7565557 -0.07920986 #> [2,] -0.07627863  0.07627863  0.0000000 -0.2343958  0.2343958 -0.39804778 #> [3,] -0.78826165 -0.78826165 -0.8506507 -0.6104770 -0.6104770  0.91393858 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,322]     [,323]     [,324]     [,325]     [,326]      [,327] #> [1,]  0.07920986  0.0000000 -0.1523988  0.0000000  0.1523988 -0.07152016 #> [2,] -0.39804778 -0.2698837 -0.2690584 -0.5156448 -0.2690584 -0.13761987 #> [3,]  0.91393864  0.9628929  0.9509901  0.8568025  0.9509901  0.98789960 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,328] [,329]     [,330]     [,331]     [,332]     [,333]     [,334] #> [1,]  0.07152016      0 -0.1581809 -0.2297011 -0.3090171  0.2297011  0.1581809 #> [2,] -0.13761987      0 -0.5092840 -0.3935618 -0.5000000 -0.3935618 -0.5092840 #> [3,]  0.98789960      1  0.8459365  0.8901384  0.8090170  0.8901384  0.8459365 #> [4,]  1.00000000      1  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,335]     [,336]     [,337]     [,338]        [,339]     [,340] #> [1,]  0.3090171  0.2224242  0.3013323  0.3558643  2.795808e-01  0.4364845 #> [2,] -0.5000000 -0.1338693 -0.2615451 -0.1333718 -5.235228e-10 -0.2538757 #> [3,]  0.8090170  0.9657155  0.9169477  0.9249716  9.601221e-01  0.8631504 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00  1.0000000 #>            [,341]     [,342]        [,343]     [,344]     [,345]     [,346] #> [1,] 4.108939e-01  0.4871725  1.428997e-01  0.3772956 -0.3013323 -0.2224242 #> [2,] 2.132114e-09 -0.1234217 -5.270089e-10 -0.3792600 -0.2615451 -0.1338693 #> [3,] 9.116833e-01  0.8645403  9.897372e-01  0.8448727  0.9169477  0.9657155 #> [4,] 1.000000e+00  1.0000000  1.000000e+00  1.0000000  1.0000000  1.0000000 #>          [,347]     [,348]        [,349]     [,350]        [,351]     [,352] #> [1,] -0.3558643 -0.4364845 -2.795808e-01 -0.4871725 -4.108939e-01 -0.3772956 #> [2,] -0.1333718 -0.2538757 -5.235228e-10 -0.1234217 -1.066057e-09 -0.3792600 #> [3,]  0.9249716  0.8631504  9.601221e-01  0.8645403  9.116833e-01  0.8448727 #> [4,]  1.0000000  1.0000000  1.000000e+00  1.0000000  1.000000e+00  1.0000000 #>             [,353]      [,354]      [,355]     [,356]     [,357]     [,358] #> [1,] -1.428997e-01  0.07890788 -0.07890789  0.0000000  0.1569038 -0.1569038 #> [2,] -5.270089e-10 -0.62143493 -0.62143493 -0.7091719 -0.7062467 -0.7062467 #> [3,]  9.897372e-01  0.77948201  0.77948201  0.7050356  0.6903600  0.6903600 #> [4,]  1.000000e+00  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,359]      [,360]     [,361]     [,362]     [,363]      [,364] #> [1,]  0.07627863 -0.07627863  0.2343958 -0.2343958 0.07920986 -0.07920986 #> [2,] -0.78826165 -0.78826165 -0.6104770 -0.6104770 0.39804778  0.39804778 #> [3,]  0.61059409  0.61059409  0.7565557  0.7565557 0.91393858  0.91393864 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000 1.00000000  1.00000000 #>         [,365]    [,366]    [,367]     [,368]     [,369]      [,370]    [,371] #> [1,] 0.0000000 0.1523988 0.0000000 -0.1523988 0.07152016 -0.07152016 0.1581809 #> [2,] 0.2698837 0.2690584 0.5156448  0.2690584 0.13761987  0.13761987 0.5092840 #> [3,] 0.9628929 0.9509901 0.8568025  0.9509901 0.98789960  0.98789960 0.8459365 #> [4,] 1.0000000 1.0000000 1.0000000  1.0000000 1.00000000  1.00000000 1.0000000 #>         [,372]    [,373]     [,374]     [,375]     [,376]     [,377]     [,378] #> [1,] 0.2297011 0.3090171 -0.2297011 -0.1581809 -0.3090171 -0.2224242 -0.3013323 #> [2,] 0.3935618 0.5000000  0.3935618  0.5092840  0.5000000  0.1338693  0.2615451 #> [3,] 0.8901384 0.8090170  0.8901384  0.8459365  0.8090170  0.9657155  0.9169477 #> [4,] 1.0000000 1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,379]     [,380]     [,381]     [,382]    [,383]    [,384]    [,385] #> [1,] -0.3558643 -0.4364845 -0.4871725 -0.3772956 0.3013323 0.2224242 0.3558643 #> [2,]  0.1333718  0.2538757  0.1234217  0.3792600 0.2615451 0.1338693 0.1333718 #> [3,]  0.9249716  0.8631504  0.8645403  0.8448727 0.9169477 0.9657155 0.9249716 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000 1.0000000 1.0000000 1.0000000 #>         [,386]    [,387]    [,388]      [,389]     [,390]    [,391]     [,392] #> [1,] 0.4364845 0.4871725 0.3772956 -0.07890788 0.07890789 0.0000000 -0.1569038 #> [2,] 0.2538757 0.1234217 0.3792600  0.62143493 0.62143493 0.7091719  0.7062467 #> [3,] 0.8631504 0.8645403 0.8448727  0.77948201 0.77948201 0.7050356  0.6903600 #> [4,] 1.0000000 1.0000000 1.0000000  1.00000000 1.00000000 1.0000000  1.0000000 #>         [,393]      [,394]     [,395]     [,396]    [,397]      [,398] #> [1,] 0.1569038 -0.07627863 0.07627863 -0.2343958 0.2343958 -0.07920986 #> [2,] 0.7062467  0.78826165 0.78826165  0.6104770 0.6104770  0.39804778 #> [3,] 0.6903600  0.61059409 0.61059409  0.7565557 0.7565557 -0.91393858 #> [4,] 1.0000000  1.00000000 1.00000000  1.0000000 1.0000000  1.00000000 #>           [,399]     [,400]     [,401]     [,402]     [,403]      [,404] #> [1,]  0.07920986  0.0000000 -0.1523988  0.0000000  0.1523988 -0.07152016 #> [2,]  0.39804778  0.2698837  0.2690584  0.5156448  0.2690584  0.13761987 #> [3,] -0.91393864 -0.9628929 -0.9509901 -0.8568025 -0.9509901 -0.98789960 #> [4,]  1.00000000  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,405] [,406]     [,407]     [,408]     [,409]     [,410]     [,411] #> [1,]  0.07152016      0 -0.1581809 -0.2297011 -0.3090171  0.2297011  0.1581809 #> [2,]  0.13761987      0  0.5092840  0.3935618  0.5000000  0.3935618  0.5092840 #> [3,] -0.98789960     -1 -0.8459365 -0.8901384 -0.8090170 -0.8901384 -0.8459365 #> [4,]  1.00000000      1  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,412]     [,413]     [,414]     [,415]        [,416]     [,417] #> [1,]  0.3090171  0.2224242  0.3013323  0.3558643  2.795808e-01  0.4364845 #> [2,]  0.5000000  0.1338693  0.2615451  0.1333718  5.235228e-10  0.2538757 #> [3,] -0.8090170 -0.9657155 -0.9169477 -0.9249716 -9.601221e-01 -0.8631504 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.000000e+00  1.0000000 #>             [,418]     [,419]        [,420]     [,421]     [,422]     [,423] #> [1,]  4.108939e-01  0.4871725  1.428997e-01  0.3772956 -0.3013323 -0.2224242 #> [2,] -2.132114e-09  0.1234217  5.270089e-10  0.3792600  0.2615451  0.1338693 #> [3,] -9.116833e-01 -0.8645403 -9.897372e-01 -0.8448727 -0.9169477 -0.9657155 #> [4,]  1.000000e+00  1.0000000  1.000000e+00  1.0000000  1.0000000  1.0000000 #>          [,424]     [,425]        [,426]     [,427]        [,428]     [,429] #> [1,] -0.3558643 -0.4364845 -2.795808e-01 -0.4871725 -4.108939e-01 -0.3772956 #> [2,]  0.1333718  0.2538757  5.235228e-10  0.1234217  1.066057e-09  0.3792600 #> [3,] -0.9249716 -0.8631504 -9.601221e-01 -0.8645403 -9.116833e-01 -0.8448727 #> [4,]  1.0000000  1.0000000  1.000000e+00  1.0000000  1.000000e+00  1.0000000 #>             [,430]      [,431]      [,432]     [,433]     [,434]     [,435] #> [1,] -1.428997e-01  0.07890788 -0.07890789  0.0000000  0.1569038 -0.1569038 #> [2,]  5.270089e-10  0.62143493  0.62143493  0.7091719  0.7062467  0.7062467 #> [3,] -9.897372e-01 -0.77948201 -0.77948201 -0.7050356 -0.6903600 -0.6903600 #> [4,]  1.000000e+00  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000 #>           [,436]      [,437]     [,438]     [,439]      [,440]      [,441] #> [1,]  0.07627863 -0.07627863  0.2343958 -0.2343958  0.07920986 -0.07920986 #> [2,]  0.78826165  0.78826165  0.6104770  0.6104770 -0.39804778 -0.39804778 #> [3,] -0.61059409 -0.61059409 -0.7565557 -0.7565557 -0.91393858 -0.91393864 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.00000000  1.00000000 #>          [,442]     [,443]     [,444]     [,445]      [,446]      [,447] #> [1,]  0.0000000  0.1523988  0.0000000 -0.1523988  0.07152016 -0.07152016 #> [2,] -0.2698837 -0.2690584 -0.5156448 -0.2690584 -0.13761987 -0.13761987 #> [3,] -0.9628929 -0.9509901 -0.8568025 -0.9509901 -0.98789960 -0.98789960 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.00000000  1.00000000 #>          [,448]     [,449]     [,450]     [,451]     [,452]     [,453] #> [1,]  0.1581809  0.2297011  0.3090171 -0.2297011 -0.1581809 -0.3090171 #> [2,] -0.5092840 -0.3935618 -0.5000000 -0.3935618 -0.5092840 -0.5000000 #> [3,] -0.8459365 -0.8901384 -0.8090170 -0.8901384 -0.8459365 -0.8090170 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,454]     [,455]     [,456]     [,457]     [,458]     [,459] #> [1,] -0.2224242 -0.3013323 -0.3558643 -0.4364845 -0.4871725 -0.3772956 #> [2,] -0.1338693 -0.2615451 -0.1333718 -0.2538757 -0.1234217 -0.3792600 #> [3,] -0.9657155 -0.9169477 -0.9249716 -0.8631504 -0.8645403 -0.8448727 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,460]     [,461]     [,462]     [,463]     [,464]     [,465] #> [1,]  0.3013323  0.2224242  0.3558643  0.4364845  0.4871725  0.3772956 #> [2,] -0.2615451 -0.1338693 -0.1333718 -0.2538757 -0.1234217 -0.3792600 #> [3,] -0.9169477 -0.9657155 -0.9249716 -0.8631504 -0.8645403 -0.8448727 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>           [,466]      [,467]     [,468]     [,469]     [,470]      [,471] #> [1,] -0.07890788  0.07890789  0.0000000 -0.1569038  0.1569038 -0.07627863 #> [2,] -0.62143493 -0.62143493 -0.7091719 -0.7062467 -0.7062467 -0.78826165 #> [3,] -0.77948201 -0.77948201 -0.7050356 -0.6903600 -0.6903600 -0.61059409 #> [4,]  1.00000000  1.00000000  1.0000000  1.0000000  1.0000000  1.00000000 #>           [,472]     [,473]     [,474]    [,475]    [,476]    [,477]    [,478] #> [1,]  0.07627863 -0.2343958  0.2343958 0.6440551 0.5648451 0.5158906 0.5877444 #> [2,] -0.78826165 -0.6104770 -0.6104770 0.5158906 0.6440551 0.5648451 0.4353451 #> [3,] -0.61059409 -0.7565557 -0.7565557 0.5648451 0.5158906 0.6440551 0.6819319 #> [4,]  1.00000000  1.0000000  1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,479]    [,480]    [,481]    [,482]    [,483]    [,484]    [,485] #> [1,] 0.6819320 0.4353451 0.4523747 0.3808543 0.7525187 0.7083167 0.4786155 #> [2,] 0.5877444 0.6819320 0.4786155 0.5943379 0.4523747 0.3808543 0.7525187 #> [3,] 0.4353451 0.5877444 0.7525187 0.7083167 0.4786155 0.5943379 0.4523747 #> [4,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,486]    [,487]    [,488]    [,489]    [,490]    [,491]    [,492] #> [1,] 0.5943379 0.2955131 0.3442806 0.2158000 0.6456128 0.5179372 0.5716640 #> [2,] 0.7083167 0.7041705 0.7830785 0.7916001 0.2955131 0.3442806 0.2158000 #> [3,] 0.3808543 0.6456128 0.5179372 0.5716640 0.7041705 0.7830785 0.7916001 #> [4,] 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 1.0000000 #>         [,493]    [,494]    [,495]     [,496]     [,497]     [,498]     [,499] #> [1,] 0.7041703 0.7830785 0.7916001 -0.6440551 -0.5158905 -0.5648451 -0.6819320 #> [2,] 0.6456128 0.5179371 0.5716640  0.5158905  0.5648451  0.6440551  0.5877443 #> [3,] 0.2955131 0.3442807 0.2158000  0.5648451  0.6440551  0.5158905  0.4353451 #> [4,] 1.0000000 1.0000000 1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,500]     [,501]     [,502]     [,503]     [,504]     [,505] #> [1,] -0.5877443 -0.4353451 -0.5943379 -0.4786155 -0.7083167 -0.7525187 #> [2,]  0.4353451  0.6819320  0.7083167  0.7525187  0.3808543  0.4523746 #> [3,]  0.6819320  0.5877443  0.3808543  0.4523746  0.5943379  0.4786155 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,506]     [,507]     [,508]     [,509]     [,510]     [,511] #> [1,] -0.3808543 -0.4523746 -0.3442806 -0.2955130 -0.2158000 -0.7830785 #> [2,]  0.5943379  0.4786155  0.7830785  0.7041705  0.7916001  0.5179371 #> [3,]  0.7083167  0.7525187  0.5179371  0.6456128  0.5716640  0.3442807 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,512]     [,513]     [,514]     [,515]     [,516]     [,517] #> [1,] -0.7041705 -0.7916001 -0.5179371 -0.6456128 -0.5716640  0.6440551 #> [2,]  0.6456128  0.5716640  0.3442806  0.2955130  0.2158000  0.5158905 #> [3,]  0.2955131  0.2158000  0.7830785  0.7041705  0.7916001 -0.5648451 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,518]     [,519]     [,520]     [,521]     [,522]     [,523] #> [1,]  0.5158905  0.5648451  0.6819320  0.5877443  0.4353451  0.5943379 #> [2,]  0.5648451  0.6440551  0.5877443  0.4353451  0.6819320  0.7083167 #> [3,] -0.6440551 -0.5158905 -0.4353451 -0.6819320 -0.5877443 -0.3808543 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,524]     [,525]     [,526]     [,527]     [,528]     [,529] #> [1,]  0.4786155  0.7083167  0.7525187  0.3808543  0.4523746  0.3442806 #> [2,]  0.7525187  0.3808543  0.4523746  0.5943379  0.4786155  0.7830785 #> [3,] -0.4523746 -0.5943379 -0.4786155 -0.7083167 -0.7525187 -0.5179371 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,530]     [,531]     [,532]     [,533]     [,534]     [,535] #> [1,]  0.2955130  0.2158000  0.7830785  0.7041705  0.7916001  0.5179371 #> [2,]  0.7041705  0.7916001  0.5179371  0.6456128  0.5716640  0.3442806 #> [3,] -0.6456128 -0.5716640 -0.3442807 -0.2955131 -0.2158000 -0.7830785 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,536]     [,537]     [,538]     [,539]     [,540]     [,541] #> [1,]  0.6456128  0.5716640 -0.6440551 -0.5648451 -0.5158906 -0.5877444 #> [2,]  0.2955130  0.2158000  0.5158906  0.6440551  0.5648451  0.4353451 #> [3,] -0.7041705 -0.7916001 -0.5648451 -0.5158906 -0.6440551 -0.6819319 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,542]     [,543]     [,544]     [,545]     [,546]     [,547] #> [1,] -0.6819320 -0.4353451 -0.4523747 -0.3808543 -0.7525187 -0.7083167 #> [2,]  0.5877444  0.6819320  0.4786155  0.5943379  0.4523747  0.3808543 #> [3,] -0.4353451 -0.5877444 -0.7525187 -0.7083167 -0.4786155 -0.5943379 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,548]     [,549]     [,550]     [,551]     [,552]     [,553] #> [1,] -0.4786155 -0.5943379 -0.2955131 -0.3442806 -0.2158000 -0.6456128 #> [2,]  0.7525187  0.7083167  0.7041705  0.7830785  0.7916001  0.2955131 #> [3,] -0.4523747 -0.3808543 -0.6456128 -0.5179372 -0.5716640 -0.7041705 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,554]     [,555]     [,556]     [,557]     [,558]     [,559] #> [1,] -0.5179372 -0.5716640 -0.7041703 -0.7830785 -0.7916001  0.6440551 #> [2,]  0.3442806  0.2158000  0.6456128  0.5179371  0.5716640 -0.5158905 #> [3,] -0.7830785 -0.7916001 -0.2955131 -0.3442807 -0.2158000  0.5648451 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,560]     [,561]     [,562]     [,563]     [,564]     [,565] #> [1,]  0.5158905  0.5648451  0.6819320  0.5877443  0.4353451  0.5943379 #> [2,] -0.5648451 -0.6440551 -0.5877443 -0.4353451 -0.6819320 -0.7083167 #> [3,]  0.6440551  0.5158905  0.4353451  0.6819320  0.5877443  0.3808543 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,566]     [,567]     [,568]     [,569]     [,570]     [,571] #> [1,]  0.4786155  0.7083167  0.7525187  0.3808543  0.4523746  0.3442806 #> [2,] -0.7525187 -0.3808543 -0.4523746 -0.5943379 -0.4786155 -0.7830785 #> [3,]  0.4523746  0.5943379  0.4786155  0.7083167  0.7525187  0.5179371 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,572]     [,573]     [,574]     [,575]     [,576]     [,577] #> [1,]  0.2955130  0.2158000  0.7830785  0.7041705  0.7916001  0.5179371 #> [2,] -0.7041705 -0.7916001 -0.5179371 -0.6456128 -0.5716640 -0.3442806 #> [3,]  0.6456128  0.5716640  0.3442807  0.2955131  0.2158000  0.7830785 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,578]     [,579]     [,580]     [,581]     [,582]     [,583] #> [1,]  0.6456128  0.5716640 -0.6440551 -0.5648451 -0.5158906 -0.5877444 #> [2,] -0.2955130 -0.2158000 -0.5158906 -0.6440551 -0.5648451 -0.4353451 #> [3,]  0.7041705  0.7916001  0.5648451  0.5158906  0.6440551  0.6819319 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,584]     [,585]     [,586]     [,587]     [,588]     [,589] #> [1,] -0.6819320 -0.4353451 -0.4523747 -0.3808543 -0.7525187 -0.7083167 #> [2,] -0.5877444 -0.6819320 -0.4786155 -0.5943379 -0.4523747 -0.3808543 #> [3,]  0.4353451  0.5877444  0.7525187  0.7083167  0.4786155  0.5943379 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,590]     [,591]     [,592]     [,593]     [,594]     [,595] #> [1,] -0.4786155 -0.5943379 -0.2955131 -0.3442806 -0.2158000 -0.6456128 #> [2,] -0.7525187 -0.7083167 -0.7041705 -0.7830785 -0.7916001 -0.2955131 #> [3,]  0.4523747  0.3808543  0.6456128  0.5179372  0.5716640  0.7041705 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,596]     [,597]     [,598]     [,599]     [,600]     [,601] #> [1,] -0.5179372 -0.5716640 -0.7041703 -0.7830785 -0.7916001  0.6440551 #> [2,] -0.3442806 -0.2158000 -0.6456128 -0.5179371 -0.5716640 -0.5158906 #> [3,]  0.7830785  0.7916001  0.2955131  0.3442807  0.2158000 -0.5648451 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,602]     [,603]     [,604]     [,605]     [,606]     [,607] #> [1,]  0.5648451  0.5158906  0.5877444  0.6819320  0.4353451  0.4523747 #> [2,] -0.6440551 -0.5648451 -0.4353451 -0.5877444 -0.6819320 -0.4786155 #> [3,] -0.5158906 -0.6440551 -0.6819319 -0.4353451 -0.5877444 -0.7525187 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,608]     [,609]     [,610]     [,611]     [,612]     [,613] #> [1,]  0.3808543  0.7525187  0.7083167  0.4786155  0.5943379  0.2955131 #> [2,] -0.5943379 -0.4523747 -0.3808543 -0.7525187 -0.7083167 -0.7041705 #> [3,] -0.7083167 -0.4786155 -0.5943379 -0.4523747 -0.3808543 -0.6456128 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,614]     [,615]     [,616]     [,617]     [,618]     [,619] #> [1,]  0.3442806  0.2158000  0.6456128  0.5179372  0.5716640  0.7041703 #> [2,] -0.7830785 -0.7916001 -0.2955131 -0.3442806 -0.2158000 -0.6456128 #> [3,] -0.5179372 -0.5716640 -0.7041705 -0.7830785 -0.7916001 -0.2955131 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,620]     [,621]     [,622]     [,623]     [,624]     [,625] #> [1,]  0.7830785  0.7916001 -0.6440551 -0.5158905 -0.5648451 -0.6819320 #> [2,] -0.5179371 -0.5716640 -0.5158905 -0.5648451 -0.6440551 -0.5877443 #> [3,] -0.3442807 -0.2158000 -0.5648451 -0.6440551 -0.5158905 -0.4353451 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,626]     [,627]     [,628]     [,629]     [,630]     [,631] #> [1,] -0.5877443 -0.4353451 -0.5943379 -0.4786155 -0.7083167 -0.7525187 #> [2,] -0.4353451 -0.6819320 -0.7083167 -0.7525187 -0.3808543 -0.4523746 #> [3,] -0.6819320 -0.5877443 -0.3808543 -0.4523746 -0.5943379 -0.4786155 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,632]     [,633]     [,634]     [,635]     [,636]     [,637] #> [1,] -0.3808543 -0.4523746 -0.3442806 -0.2955130 -0.2158000 -0.7830785 #> [2,] -0.5943379 -0.4786155 -0.7830785 -0.7041705 -0.7916001 -0.5179371 #> [3,] -0.7083167 -0.7525187 -0.5179371 -0.6456128 -0.5716640 -0.3442807 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>          [,638]     [,639]     [,640]     [,641]     [,642] #> [1,] -0.7041705 -0.7916001 -0.5179371 -0.6456128 -0.5716640 #> [2,] -0.6456128 -0.5716640 -0.3442806 -0.2955130 -0.2158000 #> [3,] -0.2955131 -0.2158000 -0.7830785 -0.7041705 -0.7916001 #> [4,]  1.0000000  1.0000000  1.0000000  1.0000000  1.0000000 #>  #> attr(,\"class\") #> [1] \"mesh3d\""},{"path":"https://dipterix.org/ravetools/reference/vcg_uniform_remesh.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a surface mesh uniformly — vcg_uniform_remesh","title":"Sample a surface mesh uniformly — vcg_uniform_remesh","text":"Sample surface mesh uniformly","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_uniform_remesh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a surface mesh uniformly — vcg_uniform_remesh","text":"","code":"vcg_uniform_remesh(   x,   voxel_size = NULL,   offset = 0,   discretize = FALSE,   multi_sample = FALSE,   absolute_distance = FALSE,   merge_clost = FALSE,   verbose = TRUE )"},{"path":"https://dipterix.org/ravetools/reference/vcg_uniform_remesh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a surface mesh uniformly — vcg_uniform_remesh","text":"x surface voxel_size 'voxel' size space 'discretization' offset offset position shift new surface input discretize whether use step function (TRUE) instead linear interpolation (FALSE) calculate position intersected edge marching cube; default FALSE multi_sample whether calculate multiple samples accurate results (expense computing time) remove artifacts; default FALSE absolute_distance whether unsigned distance field computed. set TRUE, non-zero offsets set, double-surfaces built around original surface, like sandwich. merge_clost whether merge close vertices; default TRUE verbose whether verbose progress; default TRUE","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_uniform_remesh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a surface mesh uniformly — vcg_uniform_remesh","text":"triangular mesh class 'mesh3d'","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_uniform_remesh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a surface mesh uniformly — vcg_uniform_remesh","text":"","code":"sphere <- vcg_sphere() mesh <- vcg_uniform_remesh(sphere, voxel_size = 0.45) #> Resampling mesh using a volume of 5 x 5 x 5 #>   VoxelSize is 0.450000, offset is 0.000000 #>   Mesh Box is 2.000000 2.000000 2.000000  if(is_not_cran()) {  rgl_view({    rgl_call(\"mfrow3d\", 1, 2)    rgl_call(\"title3d\", \"Input\")   rgl_call(\"wire3d\", sphere, col = 2)   rgl_call(\"next3d\")    rgl_call(\"title3d\", \"Re-meshed to 0.1mm edge distance\")   rgl_call(\"wire3d\", mesh, col = 3) })  } #> Package `rgl` is not installed. Please install `rgl` to use this function. #> Error in loadNamespace(name): there is no package called ‘rgl’"},{"path":"https://dipterix.org/ravetools/reference/vcg_update_normals.html","id":null,"dir":"Reference","previous_headings":"","what":"Update vertex normal — vcg_update_normals","title":"Update vertex normal — vcg_update_normals","text":"Update vertex normal","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_update_normals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update vertex normal — vcg_update_normals","text":"","code":"vcg_update_normals(   mesh,   weight = c(\"area\", \"angle\"),   pointcloud = c(10, 0),   verbose = FALSE )"},{"path":"https://dipterix.org/ravetools/reference/vcg_update_normals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update vertex normal — vcg_update_normals","text":"mesh triangular mesh point-cloud (matrix 3 columns) weight method compute per-vertex normal vectors: \"area\" weighted average surrounding face normal, \"angle\" weighted vertex normal vectors. pointcloud integer vector length 2: containing optional parameters normal calculation point clouds; first entry specifies number neighboring points consider; second entry specifies amount smoothing iterations performed. verbose whether verbose progress","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_update_normals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update vertex normal — vcg_update_normals","text":"'mesh3d' object normal vectors.","code":""},{"path":"https://dipterix.org/ravetools/reference/vcg_update_normals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update vertex normal — vcg_update_normals","text":"","code":"if(is_not_cran()) {  # Prepare mesh with no normal data(\"left_hippocampus_mask\") mesh <- vcg_isosurface(left_hippocampus_mask) mesh$normals <- NULL  # Start: examples new_mesh <- vcg_update_normals(mesh, weight = \"angle\",                                pointcloud = c(10, 10))  rgl_view({   rgl_call(\"mfrow3d\", 1, 2)   rgl_call(\"shade3d\", mesh, col = 2)    rgl_call(\"next3d\")   rgl_call(\"shade3d\", new_mesh, col = 2) }) } #> Package `rgl` is not installed. Please install `rgl` to use this function. #> Error in loadNamespace(name): there is no package called ‘rgl’"},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":null,"dir":"Reference","previous_headings":"","what":"'Morlet' wavelet transform (Discrete) — wavelet","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"Transform analog voltage signals 'Morlet' wavelets: complex wavelet kernels \\(\\pi/2\\) phase differences.","code":""},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"","code":"wavelet_kernels(freqs, srate, wave_num)  morlet_wavelet(   data,   freqs,   srate,   wave_num,   precision = c(\"float\", \"double\"),   trend = c(\"constant\", \"linear\", \"none\"),   signature = NULL,   ... )  wavelet_cycles_suggest(   freqs,   frequency_range = c(2, 200),   cycle_range = c(3, 20) )"},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"freqs frequency data projected srate sample rate, number time points per second wave_num desired number cycles wavelet kernels balance precision time amplitude (control smoothness); positive integers strongly suggested data numerical vector analog voltage signals precision precision computation; choices 'float' (default) 'double'. trend choices 'constant': center signal zero; 'linear': remove linear trend; 'none' nothing signature signature calculate kernel path save, internally used ... passed detrend; frequency_range frequency range calculate, default 2 200 cycle_range number cycles corresponding frequency_range. default frequency range (2 - 200), default cycle_range 3 20. , 3 wavelet kernel cycles 2 Hertz, 20 cycles 200 Hertz.","code":""},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"wavelet_kernels returns wavelet kernels used wavelet function; morlet_wavelet returns file-based array precision 'float', list real imaginary arrays precision 'double'","code":""},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"","code":"if(interactive()){  # generate sine waves time <- seq(0, 3, by = 0.01) x <- sin(time * 20*pi) + exp(-time^2) * cos(time * 10*pi)  plot(time, x, type = 'l')  # freq from 1 - 15 Hz; wavelet using float precision freq <- seq(1, 15, 0.2) coef <- morlet_wavelet(x, freq, 100, c(2,3))  # to get coefficients in complex number from 1-10 time points coef[1:10, ]  # power power <- Mod(coef[])^2  # Power peaks at 5Hz and 10Hz at early stages # After 1.0 second, 5Hz component fade away image(power, x = time, y = freq, ylab = \"frequency\")  # wavelet using double precision coef2 <- morlet_wavelet(x, freq, 100, c(2,3), precision = \"double\") power2 <- (coef2$real[])^2 + (coef2$imag[])^2  image(power2, x = time, y = freq, ylab = \"frequency\")  # The maximum relative change of power with different precisions max(abs(power/power2 - 1))  # display kernels freq <- seq(1, 15, 1) kern <- wavelet_kernels(freq, 100, c(2,3)) print(kern)  plot(kern)  }"},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-014","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.4","title":"ravetools 0.1.4","text":"Implemented dijkstra find shortest paths mesh Migrated incorporated vcglib Fixed C++ template issue via type explicit calls Fixed fir1 filter band-passing signals incorrect n","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-013","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.3","title":"ravetools 0.1.3","text":"CRAN release: 2023-12-04 Rewrote band_pass2 avoid NA generated upper band frequency Nyquist Added Vector3, Matrix4, Quaternion -place calculation Added support WASM Fixed issues reported CRAN: “format string string literal (potentially insecure)”","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-012","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.2","title":"ravetools 0.1.2","text":"CRAN release: 2023-07-16 Compatible latest filearray Exported grow_volume mesh_from_volume longer throw errors mesh form manifold","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-011","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.1","title":"ravetools 0.1.1","text":"CRAN release: 2023-04-19 Fixed precision issue caused test failure machine","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-010","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.0","title":"ravetools 0.1.0","text":"CRAN release: 2023-02-18 Added fill_surface fill volume based given surface mesh Added mesh_from_volume generate mesh volume. function can used together fill_surface generate surface envelope Added register_volume align two imaging data using linear non-linear registration Added fftw 2D image 3D volume data Added convolution 1D, 2D, 3D data using FFT","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-009","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.9","title":"ravetools 0.0.9","text":"CRAN release: 2023-01-20 Fixed pwelch frequency starting zero issue Upgraded TinyThread using latest pull-request RcppParallel","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-008","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.8","title":"ravetools 0.0.8","text":"CRAN release: 2022-10-14 Added interpolate_stimulation detect stimulation signals within response interpolate smooth signals package now imports splines Added fast_quantile fast_mvquantile improve quantile/median calculation speed Fixed plot_signals plotting range large signals large values (stimulation) Fixed TinyThreads library memory leak issues Simplified diagnose_channel, avoid duplicated pwelch calculation","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-007","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.7","title":"ravetools 0.0.7","text":"CRAN release: 2022-09-19 Added signal filter, filtfilt produce results Matlab (precision error) Added two ways perform band-pass filters Allows multiple channels pwelch row-major matrix speed calculation Added wavelet_cycles_suggest provide default calculation wavelet cycles Added internal argument signature wavelet resolve potential cache conflicts running multiple processes. (allows RAVE run wavelet multiple subjects time)","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-006","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.6","title":"ravetools 0.0.6","text":"CRAN release: 2022-08-25 Added decibel average pwelch Allowed pwelch sampling frequency greater signal length Adjusted parameters diagnostic plot pwelch plot properly handle graph text, margin, axis Added plot_signals plot multiple functional data within canvas","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-005","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.5","title":"ravetools 0.0.5","text":"CRAN release: 2022-08-06 Exposed C++ code inst/includes users can dynamically link functions (https://github.com/dipterix/ravetools/issues/5) Removed confusing -place arguments fftw related code Corrected fftw plans respect flags Added C++ convert raw binary bytes uint, int, float, string","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-004","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.4","title":"ravetools 0.0.4","text":"CRAN release: 2022-05-29 Parallel processes might use different temporary directory paths. improve performance, recommended set shared temporary directory, hence version Allows temporary directories set via environment variable RAVETOOLS_TEMPDIR option ravetools.tempdir.","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-003","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.3","title":"ravetools 0.0.3","text":"CRAN release: 2022-02-16 version fixes memory issue reported CRAN check (gcc-UBSAN). potential integer overflow NA_INTEGER subtracted one converted R_xlen_t type. update fixes issue Removed RcppParallel copied part inst/include folder, TBB removed GPL-3 license framework.","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-002","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.2","title":"ravetools 0.0.2","text":"CRAN release: 2022-02-14 initial version ravetools. Although bare minimal set signal processing functions provided, sufficient perform preprocess pipelines iEEG signals. functions added dipsaus package, considerable performance improvement. C++ functions tested major platforms, different architectures (ARM, i386, x64).","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"documentation-0-0-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"ravetools 0.0.2","text":"Added README file demonstrate basic usage Added NEWS.md file track changes package.","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"signal-processing-functions-0-0-2","dir":"Changelog","previous_headings":"","what":"Signal processing functions","title":"ravetools 0.0.2","text":"Re-implemented decimate FIR filters creating results Matlab Added detrend function Added diagnose_channel visually inspect channel signals Added morlet_wavelet enable fast memory efficient wavelet decomposition; result agrees existing Matlab code floating errors (10^-7) Added multitaper Added pwelch (Welch periodogram) Added notch_filter remove line noise","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"high-performance-functions-0-0-2","dir":"Changelog","previous_headings":"","what":"High-performance functions","title":"ravetools 0.0.2","text":"following functions implemented C++ parallel. tend faster normal base-R implementations, depending number CPU cores used. Added collapse collapse arrays Added shift_array shift array along certain indices Added fast_cov calculate pearson covariance matrix parallel Added baseline_array calculate baseline arrays multiple margins","code":""}]
