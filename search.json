[{"path":"https://dipterix.org/ravetools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Zhengjia Wang. Author, maintainer, copyright holder. Beauchamp lab. Copyright holder. Karim Rahim. Copyright holder.            R package fftwtools Prerau Lab. Copyright holder.            Multitaper Spectrogram Code RcppParallel Authors. Copyright holder.            TinyParallel Code comes RcppParallel Marcus Geelnard. Copyright holder.            TinyThread library","code":""},{"path":"https://dipterix.org/ravetools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Magnotti, JF, Wang, Z, Beauchamp, MS. RAVE: comprehensive open-source software reproducible analysis visualization intracranial EEG data. NeuroImage, 223, p.117341.","code":"@Article{,   title = {{RAVE}: Comprehensive open-source software for reproducible analysis and visualization of intracranial EEG data},   author = {John F. Magnotti and Zhengjia Wang and Michael S. Beauchamp},   journal = {NeuroImage},   year = {2020},   volume = {223},   pages = {117341},   doi = {10.1016/j.neuroimage.2020.117341}, }"},{"path":"https://dipterix.org/ravetools/index.html","id":"ravetools","dir":"","previous_headings":"","what":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"goal ravetools provide memory-efficient signal & image processing toolbox intracranial Electroencephalography. Highlighted features include: Notch filter (remove electrical line frequencies) Welch Periodogram (averaged power frequencies) Wavelet (frequency-time decomposition) 2D, 3D image convolution via FFT CT/MRI MRI image alignment","code":""},{"path":"https://dipterix.org/ravetools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"package available CRAN. install compiled version, simply run: Installing package source requires installation proper compilers C libraries; see document details.","code":"install.packages(\"ravetools\")"},{"path":"https://dipterix.org/ravetools/index.html","id":"ieeg-preprocess-pipeline","dir":"","previous_headings":"","what":"iEEG preprocess pipeline","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"basic example shows preprocess iEEG signal. goal : Plot diagnostic graphs inspect channels Apply Notch filters remove electrical line noise Frequency-time decomposition show power densities * Channel referencing included","code":""},{"path":"https://dipterix.org/ravetools/index.html","id":"id_1-generate-toy-examples","dir":"","previous_headings":"iEEG preprocess pipeline","what":"1. Generate toy examples:","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"","code":"library(ravetools)  # Generate 20 second data at 2000 Hz time <- seq(0, 20, by = 1 / 2000) signal <- sin( 120 * pi * time) +    sin(time * 20*pi) +    exp(-time^2) *    cos(time * 10*pi) +   rnorm(length(time))  diagnose_channel(signal, srate = 2000)"},{"path":"https://dipterix.org/ravetools/index.html","id":"id_2-apply-notch-filters-and-inspect-periodograms","dir":"","previous_headings":"iEEG preprocess pipeline","what":"2. Apply Notch filters and inspect Periodograms","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"","code":"## ------- Notch filter -------- signal2 <- notch_filter(signal, sample_rate = 2000)  diagnose_channel(signal, signal2, srate = 2000,                  name = c(\"Raw\", \"Filtered\"))"},{"path":"https://dipterix.org/ravetools/index.html","id":"id_3-frequency-time-decomposition","dir":"","previous_headings":"iEEG preprocess pipeline","what":"3. Frequency-time decomposition","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"Current version ravetools provides two approaches: Wavelet Multi-taper. Wavelet uses Morlet wavelet obtains amplitude phase data, Multi-taper generate phase data. However, amplitude obtained Multi-taper smoother Wavelet.","code":""},{"path":"https://dipterix.org/ravetools/index.html","id":"using-wavelet","dir":"","previous_headings":"iEEG preprocess pipeline > 3. Frequency-time decomposition","what":"Using Wavelet:","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"","code":"## ---------- Wavelet ----------- coef <- morlet_wavelet(   signal2, freqs = seq(1, 100, by = 1),    srate = 2000, wave_num = c(2, 15)) amplitude <- 20 * log10(Mod(coef[]))  # For each frequency, decimate to 100 Hz downsample_amp <- apply(amplitude, 2, decimate, q = 20) downsample_time <- decimate(time, q = 20)  par(mfrow = c(1,1)) image(   z = downsample_amp,   x = downsample_time,   y = seq(1, 100, by = 1),   xlab = \"Time (s)\",   ylab = \"Frequency (Hz)\",   main = \"Amplitude (dB)\",   sub = \"Wavelet at 2000 Hz, then down-sampled to 100 Hz\",    col = matlab_palette() )"},{"path":"https://dipterix.org/ravetools/index.html","id":"multi-taper","dir":"","previous_headings":"iEEG preprocess pipeline > 3. Frequency-time decomposition","what":"Multi-taper","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"Alternatively can use Multi-tapers obtain amplitude data. algorithm modified source code . Please credit well adopt approach.","code":"## ---------- Multitaper ----------- res <- multitaper(   data = signal2,   fs = 2000,   frequency_range = c(1, 100),   time_bandwidth = 1.5,   window_params = c(2, 0.01),   nfft = 100 )  par(mfrow = c(1,1)) image(   x = res$time,   y = res$frequency,   z = 10 * log10(res$spec),   xlab = \"Time (s)\",   ylab = 'Frequency (Hz)',   col = matlab_palette(),   main = \"Amplitude (dB)\" )"},{"path":"https://dipterix.org/ravetools/index.html","id":"image-alignment","dir":"","previous_headings":"iEEG preprocess pipeline > 3. Frequency-time decomposition","what":"Image alignment","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"ravetools provides imaging co-registration via NiftyReg (doi.org/10.1117/1.JMI.1.2.024003). can align CT MRI, MRI (T2) MRI (T1). method can body rigid, affine, non-linear.","code":"source <- system.file(\"extdata\", \"epi_t2.nii.gz\", package=\"RNiftyReg\") target <- system.file(\"extdata\", \"flash_t1.nii.gz\", package=\"RNiftyReg\") aligned <- register_volume(source, target, verbose = FALSE)  source_img <- aligned$source[[1]] target_img <- aligned$target aligned_img <- aligned$image  par(mfrow = c(2, 2), mar = c(0.1, 0.1, 3.1, 0.1))  pal <- grDevices::grey.colors(256, alpha = 1) image(source_img[,,30], asp = 1, axes = FALSE,       col = pal, main = \"Source image\") image(target_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Target image\") image(aligned_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Aligned image\")  # bucket fill and calculate differences aligned_img[is.nan(aligned_img) | aligned_img <= 1] <- 1 target_img[is.nan(target_img) | aligned_img <= 1] <- 1 diff <- abs(aligned_img / target_img - 1) image(diff[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Percentage Difference\")"},{"path":[]},{"path":"https://dipterix.org/ravetools/index.html","id":"to-cite-ravetools-in-publications-use-please-cite-the-rave-paper-from-beauchamps-lab","dir":"","previous_headings":"References","what":"To cite ravetools in publications use, please cite the RAVE paper from Beauchamp's lab","title":"Signal and Image Processing Toolbox for Analyzing Intracranial Electroencephalography Data","text":"multitaper function (MIT License) uses script derived Prerau's lab. TinyParallel script derived RcppParallel package (GPL License) TBB features removed (use tinythreads). register_volume function uses NiftyReg (BSD License) developed CMIC University College London, UK (R implementation released GPL license).","code":"Magnotti, JF, and Wang, Z, and Beauchamp, MS. RAVE: comprehensive   open-source software for reproducible analysis and visualization of   intracranial EEG data. NeuroImage, 223, p.117341. [1] Magnotti, JF, and Wang, Z, and Beauchamp, MS. RAVE: comprehensive     open-source software for reproducible analysis and visualization of     intracranial EEG data. NeuroImage, 223, p.117341. [2] Prerau, Michael J, and Brown, Ritchie E, and Bianchi, Matt T, and     Ellenbogen, Jeffrey M, and Purdon, Patrick L. Sleep Neurophysiological     Dynamics Through the Lens of Multitaper Spectral Analysis. Physiology,     December 7, 2016, 60-92. [3] Modat, M., Cash, D.M., Daga, P., Winston, G.P., Duncan, J.S. and      Ourselin, S., 2014. Global image registration using a symmetric      block-matching approach. Journal of medical imaging, 1(2), pp.024003-024003. [4] JJ Allaire, Romain Francois, Kevin Ushey, Gregory Vandenbrouck, Marcus     Geelnard and Intel (2022). RcppParallel: Parallel Programming Tools for     'Rcpp'. R package version 5.1.5.     https://CRAN.R-project.org/package=RcppParallel"},{"path":"https://dipterix.org/ravetools/installation.html","id":null,"dir":"","previous_headings":"","what":"Full Installation-from-Source Guide for ravetools","title":"Full Installation-from-Source Guide for ravetools","text":"package ravetools contains C++ code requires general compilers gcc clang compile. addition, signal processing code requires FFTW3 library, installed easily. guide contains three parts. first part, install proper compilers machine. already installed , please skip proceed second part, install FFTW3 library. last part simply installs ravetools.","code":""},{"path":"https://dipterix.org/ravetools/installation.html","id":"prerequisite","dir":"","previous_headings":"","what":"Prerequisite","title":"Full Installation-from-Source Guide for ravetools","text":"development ravetools always latest version R. try best maximize backward compatibility, unlikely test ravetools every single old versions R. Choosing latest R always best choice.","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_1-install-building-tools","dir":"","previous_headings":"Installing on Windows","what":"1. Install Building Tools","title":"Full Installation-from-Source Guide for ravetools","text":"Please go website follow instructions download Rtools. ravetools developed (R version 4.1.2), latest Rtools version 4. Rtools downloaded installed, please open R console, copy-paste following R command hit return:","code":"write('PATH=\"${RTOOLS40_HOME}\\\\usr\\\\bin;${PATH}\"', file = \"~/.Renviron\", append = TRUE)"},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_2-install-fftw3","dir":"","previous_headings":"Installing on Windows","what":"2. Install FFTW3","title":"Full Installation-from-Source Guide for ravetools","text":"start menu, Rtools Bash application icon purple letter M Open Windows start menu, search Rtools Bash. Rtools installed successfully, see application purple icon letter M. Open application, see terminal window. terminal, paste following script execute. prompted question Proceed installation? (Y/n). Please enter Y agree. FFTW3 library added system.","code":"pacman -S  mingw-w64-{i686,x86_64}-fftw"},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_3-install-ravetools","dir":"","previous_headings":"Installing on Windows","what":"3. Install ravetools","title":"Full Installation-from-Source Guide for ravetools","text":"previously opened , please close just case. Open R RStudio. newly opened R console, paste following code return line--line.","code":"if(system.file(package = 'remotes') == \"\"){ install.packages('remotes') }  remotes::install_github('dipterix/ravetools')"},{"path":[]},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_1-check-your-r-architecture","dir":"","previous_headings":"Installing on MacOSX","what":"1. Check your R architecture","title":"Full Installation-from-Source Guide for ravetools","text":"Open R. start-message, see text similar Alternatively, can run following R command: Check architecture keywords Platform. see aarch64, ARM CPU (M1 chip), ARM version R installed. see x86_64, Intel version R installed (even ARM chips, R still Intel-based). ARM CPU (like M1-chip), always (strongly) recommended install R architecture, compilers need consistent architectures. Intel-based R installed, set whole compiler chain Intel-based. (tutorial cover advanced case)","code":"R version 4.1.2 (2021-11-01) -- \"Bird Hippie\" Copyright (C) 2021 The R Foundation for Statistical Computing Platform: aarch64-apple-darwin20 (64-bit) R.version$platform ##> [1] \"aarch64-apple-darwin20\""},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_2-install-command-line-tools","dir":"","previous_headings":"Installing on MacOSX","what":"2. Install command-line tools","title":"Full Installation-from-Source Guide for ravetools","text":"Open Terminal.app. can easily found /Application folder, pressing command key space key time, type “terminal”. Run xcode-select --install terminal hit return/enter key. prompted “Agreement” window. Please accept wait installation process finish. see message: code-select: error: command line tools already installed, use \"Software Update\" install updates, means command-line tools already installed machine past, safe proceed next step.","code":""},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_3-install-homebrew","dir":"","previous_headings":"Installing on MacOSX","what":"3. Install HomeBrew","title":"Full Installation-from-Source Guide for ravetools","text":"Please go HomeBrew’s installation site install HomeBrew. don’t like read, simply paste following command terminal window hit return key: Please answer prompted questions wait till brew brew .","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\""},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_4-install-pkg-config-and-fftw3","dir":"","previous_headings":"Installing on MacOSX","what":"4. Install pkg-config and FFTW3","title":"Full Installation-from-Source Guide for ravetools","text":"Open new terminal window. using ARM CPU, type Intel-based machine, type","code":"eval \"$(/opt/homebrew/bin/brew shellenv)\" brew install pkg-config fftw eval \"$(/usr/local/bin/brew shellenv)\" brew install pkg-config fftw"},{"path":"https://dipterix.org/ravetools/installation.html","id":"id_5-install-ravetools","dir":"","previous_headings":"Installing on MacOSX","what":"5. Install ravetools","title":"Full Installation-from-Source Guide for ravetools","text":"previously opened , please close just case. Open R RStudio. newly opened R console, paste following code return line--line.","code":"if(system.file(package = 'remotes') == \"\"){ install.packages('remotes') }  remotes::install_github('dipterix/ravetools')"},{"path":"https://dipterix.org/ravetools/installation.html","id":"installing-on-ubuntu","dir":"","previous_headings":"","what":"Installing on Ubuntu","title":"Full Installation-from-Source Guide for ravetools","text":"following command install essential build tools, system package configuration tools, FFTW3 Please search alternatives using Linux systems RedHat CentOS. installation, type R terminal, hit return/enter key open R environment, run following R commands.","code":"sudo apt-get install build-essential pkg-config libfftw3-dev if(system.file(package = 'remotes') == \"\"){ install.packages('remotes') }  remotes::install_github('dipterix/ravetools')"},{"path":"https://dipterix.org/ravetools/installation.html","id":"installing-with-docker","dir":"","previous_headings":"","what":"Installing with Docker","title":"Full Installation-from-Source Guide for ravetools","text":"Please check Dockerfile. takes 24 minutes compile everything source 2 CPUs, 1 GB RAM","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":null,"dir":"Reference","previous_headings":"","what":"Band-pass signals — band_pass","title":"Band-pass signals — band_pass","text":"Band-pass signals","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Band-pass signals — band_pass","text":"","code":"band_pass1(x, sample_rate, lb, ub, domain = 1, ...)  band_pass2(   x,   sample_rate,   lb,   ub,   order,   method = c(\"fir\", \"butter\"),   direction = c(\"both\", \"forward\", \"backward\"),   window = \"hamming\",   ... )"},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Band-pass signals — band_pass","text":"x input signals, numeric vector matrix. x must row-major input matrix: row channel, column time-point. sample_rate sampling frequency lb lower frequency bound band-passing filter, must positive ub upper frequency bound band-passing filter, must greater lower bound smaller half sampling frequency domain 1 x time-domain, 0 x frequency domain ... ignored order order filter, must positive integer less one-third sample rate method filter type, choices 'fir' 'butter' direction filter direction, choices 'forward', 'backward', '' directions window window type, can character, function, vector. character, window function name signal package, example, 'hanning'; function, window takes one integer argument returns numeric vector length input; vectors, window numeric vector o length order+1.","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Band-pass signals — band_pass","text":"Filtered signals, vector x vector, matrix dimension x","code":""},{"path":"https://dipterix.org/ravetools/reference/band_pass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Band-pass signals — band_pass","text":"","code":"t <- seq(0, 1, by = 0.0005) x <- sin(t * 0.4 * pi) + sin(t * 4 * pi) + 2 * sin(t * 120 * pi)  y1 <- band_pass1(x, 2000, 0.1, 1) y2 <- band_pass1(x, 2000, 1, 5) y3 <- band_pass1(x, 2000, 10, 80)  order <- floor(2000 / 3) z1 <- band_pass2(x, 2000, 0.1, 1, method = \"fir\", order = order) z2 <- band_pass2(x, 2000, 1, 5, method = \"fir\", order = order) z3 <- band_pass2(x, 2000, 10, 80, method = \"fir\", order = order)  par(mfrow = c(1, 2)) plot(t, x, type = 'l', xlab = \"Time\", ylab = \"\",      main = \"Mixture of 0.2, 2, and 60Hz\") lines(t, y1, col = 'red') lines(t, y2, col = 'blue') lines(t, y3, col = 'green') legend(   \"topleft\", c(\"Input\", \"Pass: 0.1-1Hz\", \"Pass 1-5Hz\", \"Pass 10-80Hz\"),   col = c(par(\"fg\"), \"red\", \"blue\", \"green\"), lty = 1 )  plot(t, x, type = 'l', xlab = \"Time\", ylab = \"\",      main = \"Mixture of 0.2, 2, and 60Hz\") lines(t, z1, col = 'red') lines(t, z2, col = 'blue') lines(t, z3, col = 'green') legend(   \"topleft\", c(\"Input\", \"Pass: 0.1-1Hz\", \"Pass 1-5Hz\", \"Pass 10-80Hz\"),   col = c(par(\"fg\"), \"red\", \"blue\", \"green\"), lty = 1 )"},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Contrasts of Arrays in Different Methods — baseline_array","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"Provides five methods baseline array calculate contrast.","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"","code":"baseline_array(x, along_dim, unit_dims = seq_along(dim(x))[-along_dim], ...)  # S3 method for array baseline_array(   x,   along_dim,   unit_dims = seq_along(dim(x))[-along_dim],   method = c(\"percentage\", \"sqrt_percentage\", \"decibel\", \"zscore\", \"sqrt_zscore\",     \"subtract_mean\"),   baseline_indexpoints = NULL,   baseline_subarray = NULL,   ... )"},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"x array (tensor) calculate contrast along_dim integer range 1 maximum dimension x. baseline along dimension, usually time dimension. unit_dims integer vector, baseline unit: see Details. ... passed methods method character, baseline method options : \"percentage\", \"sqrt_percentage\", \"decibel\", \"zscore\", \"sqrt_zscore\" baseline_indexpoints integer vector, index points counted baseline window? index ranges 1 dim(x)[[along_dim]]. See Details. baseline_subarray sub-arrays used calculate baseline; default NULL (automatically determined baseline_indexpoints).","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"Contrast array dimension x.","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"Consider scenario want baseline bunch signals recorded different locations. location, record n sessions. session, signal decomposed frequency-time domain. case, input x following form: $$session x frequency x time x location$$ Now want calibrate signals session, frequency location using first 100 time points baseline points, code $$baseline_array(x, along_dim=3, baseline_window=1:100, unit_dims=c(1,2,4))$$ along_dim=3 dimension time, case, third dimension x. baseline_indexpoints=1:100, meaning first 100 time points used calculate baseline. unit_dims defines unit signal. value c(1,2,4) means unit signal per session (first dimension), per frequency (second) per location (fourth). cases, might want calculate baseline across frequencies unit signal \\(frequency x time\\), .e. signals share session location also share baseline. case, assign unit_dims=c(1,4). five baseline methods. fit different types data. Denote \\(z\\) unit signal, \\(z_0\\) baseline slice. baseline methods : \"percentage\" $$   \\frac{z - \\bar{z_{0}}}{\\bar{z_{0}}} \\times 100\\% $$ \"sqrt_percentage\" $$   \\frac{\\sqrt{z} - \\bar{\\sqrt{z_{0}}}}{\\bar{\\sqrt{z_{0}}}} \\times 100\\% $$ \"decibel\" $$   10 \\times ( \\log_{10}(z) - \\bar{\\log_{10}(z_{0})} ) $$ \"zscore\" $$   \\frac{z-\\bar{z_{0}}}{sd(z_{0})} $$ \"sqrt_zscore\" $$   \\frac{\\sqrt{z}-\\bar{\\sqrt{z_{0}}}}{sd(\\sqrt{z_{0}})} $$","code":""},{"path":"https://dipterix.org/ravetools/reference/baseline_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Contrasts of Arrays in Different Methods — baseline_array","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)   library(ravetools) set.seed(1)  # Generate sample data dims = c(10,20,30,2) x = array(rnorm(prod(dims))^2, dims)  # Set baseline window to be arbitrary 10 timepoints baseline_window = sample(30, 10)  # ----- baseline percentage change ------  # Using base functions re1 <- aperm(apply(x, c(1,2,4), function(y){   m <- mean(y[baseline_window])   (y/m - 1) * 100 }), c(2,3,1,4))  # Using ravetools re2 <- baseline_array(x, 3, c(1,2,4),                       baseline_indexpoints = baseline_window,                       method = 'percentage')  # Check different, should be very tiny (double precisions) range(re2 - re1) #> [1] -5.684342e-13  1.818989e-12  # Check speed for large dataset if(interactive()){  ravetools_threads(n_threads = -1)  dims <- c(200,20,300,2) x <- array(rnorm(prod(dims))^2, dims) # Set baseline window to be arbitrary 10 timepoints baseline_window <- seq_len(100) f1 <- function(){   aperm(apply(x, c(1,2,4), function(y){     m <- mean(y[baseline_window])     (y/m - 1) * 100   }), c(2,3,1,4)) } f2 <- function(){   # equivalent as bl = x[,,baseline_window, ]   #   baseline_array(x, along_dim = 3,                  baseline_indexpoints = baseline_window,                  unit_dims = c(1,2,4), method = 'percentage') } range(f1() - f2()) microbenchmark::microbenchmark(f1(), f2(), times = 10L)  }"},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":null,"dir":"Reference","previous_headings":"","what":"Collapse array — collapse","title":"Collapse array — collapse","text":"Collapse array","code":""},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collapse array — collapse","text":"","code":"collapse(x, keep, ...)  # S3 method for array collapse(   x,   keep,   average = TRUE,   transform = c(\"asis\", \"10log10\", \"square\", \"sqrt\"),   ... )"},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collapse array — collapse","text":"x numeric multi-mode tensor (array), without NA keep dimension keep ... passed methods average collapse sum mean transform transform data applying collapsing; choices 'asis' (change), '10log10' (used calculate decibel), 'square' (sum-squared), 'sqrt' (square-root collapse)","code":""},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collapse array — collapse","text":"collapsed array values mean summation along collapsing dimensions","code":""},{"path":"https://dipterix.org/ravetools/reference/collapse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collapse array — collapse","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)  # Example 1 x = matrix(1:16, 4)  # Keep the first dimension and calculate sums along the rest collapse(x, keep = 1) #> [1]  7  8  9 10 rowMeans(x)  # Should yield the same result #> [1]  7  8  9 10  # Example 2 x = array(1:120, dim = c(2,3,4,5)) result = collapse(x, keep = c(3,2)) compare = apply(x, c(3,2), mean) sum(abs(result - compare)) # The same, yield 0 or very small number (1e-10) #> [1] 5.684342e-14   if(interactive()){ ravetools_threads(n_threads = -1)  # Example 3 (performance)  # Small data, no big difference x = array(rnorm(240), dim = c(4,5,6,2)) microbenchmark::microbenchmark(   result = collapse(x, keep = c(3,2)),   compare = apply(x, c(3,2), mean),   times = 1L, check = function(v){     max(abs(range(do.call('-', v)))) < 1e-10   } )  # large data big difference x = array(rnorm(prod(300,200,105)), c(300,200,105,1)) microbenchmark::microbenchmark(   result = collapse(x, keep = c(3,2)),   compare = apply(x, c(3,2), mean),   times = 1L , check = function(v){     max(abs(range(do.call('-', v)))) < 1e-10   })  }"},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Convolution of 1D, 2D, 3D data via FFT — convolve","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"Use 'Fast-Fourier' transform compute convolutions two data zero padding.","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"","code":"convolve_signal(x, filter)  convolve_image(x, filter)  convolve_volume(x, filter)"},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"x one-dimensional signal vector, two-dimensional image, three-dimensional volume; numeric complex filter kernel number dimensions x","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"Convolution results length dimensions x. x complex, results complex, otherwise results real numbers.","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"implementation uses 'Fast-Fourier' transform perform 1D, 2D, 3D convolution. Compared implementations using original mathematical definition convolution, approach much faster, especially image volume convolutions. input x zero-padded beyond edges. common image volume convolution, less optimal periodic one-dimensional signals. Please use implementations non-zero padding needed. convolution results might different ground truth precision error, usually 1e-13 level, depending 'FFTW3' library precision implementation.","code":""},{"path":"https://dipterix.org/ravetools/reference/convolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convolution of 1D, 2D, 3D data via FFT — convolve","text":"","code":"# ---- 1D convolution ------------------------------------ x <- cumsum(rnorm(100)) filter <- dnorm(-2:2) # normalize filter <- filter / sum(filter) smoothed <- convolve_signal(x, filter)  plot(x, pch = 20) lines(smoothed, col = 'red')   # ---- 2D convolution ------------------------------------ x <- array(0, c(100, 100)) x[   floor(runif(10, min = 1, max = 100)),   floor(runif(10, min = 1, max = 100)) ] <- 1  # smooth kernel <- outer(dnorm(-2:2), dnorm(-2:2), FUN = \"*\") kernel <- kernel / sum(kernel)  y <- convolve_image(x, kernel)  par(mfrow = c(1,2)) image(x, asp = 1, axes = FALSE, main = \"Origin\") image(y, asp = 1, axes = FALSE, main = \"Smoothed\")"},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Decimate with 'FIR' or 'IIR' filter — decimate","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"Decimate 'FIR' 'IIR' filter","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"","code":"decimate(x, q, n = if (ftype == \"iir\") 8 else 30, ftype = \"fir\")"},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"x signal decimated q integer factor -sample n filter order used -sampling; default 30 ftype='fir', 8 ftype='iir' ftype filter type, choices 'fir' (default) 'iir'","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"Decimated signal","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"function migrated signal package, bugs fixed 'FIR' filters. result agrees 'Matlab' decimate function 'FIR' filters. 'IIR' filters, function identical signal::decimate, slightly different 'Matlab' version.","code":""},{"path":"https://dipterix.org/ravetools/reference/decimate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Decimate with 'FIR' or 'IIR' filter — decimate","text":"","code":"x <- 1:100 y <- decimate(x, 2, ftype = \"fir\") y #>  [1]  1  3  5  7  9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 #> [26] 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99  # compare with signal package z <- signal::decimate(x, 2, ftype = \"fir\")  # Compare decimated results plot(x, type = 'l') points(seq(1,100, 2), y, col = \"green\") points(seq(1,100, 2), z, col = \"red\")"},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove the trend for one or more signals — detrend","title":"Remove the trend for one or more signals — detrend","text":"'Detrending' often used signal power calculation.","code":""},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove the trend for one or more signals — detrend","text":"","code":"detrend(x, trend = c(\"constant\", \"linear\"), break_points = NULL)"},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove the trend for one or more signals — detrend","text":"x numerical complex, vector matrix trend trend signal; choices 'constant' 'linear' break_points integer vector, NULL; used trend 'linear' remove piecewise linear trend; throw warnings trend 'constant'","code":""},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove the trend for one or more signals — detrend","text":"signals trend removed matrix form; number columns number signals, number rows length signals","code":""},{"path":"https://dipterix.org/ravetools/reference/detrend.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove the trend for one or more signals — detrend","text":"","code":"x <- rnorm(100, mean = 1) + c(   seq(0, 5, length.out = 50),   seq(5, 3, length.out = 50)) plot(x)   plot(detrend(x, 'constant'))  plot(detrend(x, 'linear'))  plot(detrend(x, 'linear', 50))"},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":null,"dir":"Reference","previous_headings":"","what":"Show channel signals with diagnostic plots — diagnose_channel","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"diagnostic plots include 'Welch Periodogram' (pwelch) histogram (hist)","code":""},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"","code":"diagnose_channel(   s1,   s2 = NULL,   sc = NULL,   srate,   name = \"\",   try_compress = TRUE,   max_freq = 300,   window = ceiling(srate * 2),   noverlap = window/2,   std = 3,   which = NULL,   main = \"Channel Inspection\",   col = c(\"black\", \"red\"),   cex = 1.2,   cex.lab = 1,   lwd = 0.5,   plim = NULL,   nclass = 100,   start_time = 0,   boundary = NULL,   mar = c(3.1, 4.1, 2.1, 0.8) * (0.25 + cex * 0.75) + 0.1,   mgp = cex * c(2, 0.5, 0),   xaxs = \"i\",   yaxs = \"i\",   xline = 1.66 * cex,   yline = 2.66 * cex,   tck = -0.005 * (3 + cex),   ... )"},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"s1 main signal draw s2 comparing signal draw; usually s1 filters; must sampling rate s1; can NULL sc decimated s1 show srate high; automatically generated NULL srate sampling rate name name s1, vector two names s1 s2 s2 provided try_compress whether try compress (decimate) s1 srate high performance concerns max_freq maximum frequency display 'Welch Periodograms' window, noverlap see pwelch std standard deviation channel signals used determine boundary; default plus-minus 3 standard deviation NULL integer 1 4; NULL, plots displayed; otherwise subplot displayed main title signal plot col colors s1 s2 cex, lwd, mar, cex.lab, mgp, xaxs, yaxs, tck, ... graphical parameters; see par plim y-axis limit draw 'Welch Periodograms' nclass number classes show histogram (hist) start_time starting time channel (used draw signals) boundary red boundary show channel plot; default automatically determined std xline, yline distance axis labels towards ticks","code":""},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"list boundary y-axis limit used draw channel","code":""},{"path":"https://dipterix.org/ravetools/reference/diagnose_channel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show channel signals with diagnostic plots — diagnose_channel","text":"","code":"library(ravetools)  # Generate 20 second data at 2000 Hz time <- seq(0, 20, by = 1 / 2000) signal <- sin( 120 * pi * time) +   sin(time * 20*pi) +   exp(-time^2) *   cos(time * 10*pi) +   rnorm(length(time))  signal2 <- notch_filter(signal, 2000)  diagnose_channel(signal, signal2, srate = 2000,                  name = c(\"Raw\", \"Filtered\"), cex = 1)"},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate massive covariance matrix in parallel — fast_cov","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"Speed covariance calculation large matrices. default behavior cov ('pearson', NA handling).","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"","code":"fast_cov(x, y = NULL, col_x = NULL, col_y = NULL, df = NA)"},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"x numeric vector, matrix data frame; matrix highly recommended maximize performance y NULL (default) vector, matrix data frame compatible dimensions x; default equivalent y = x col_x integers indicating subset indices (columns) x calculate covariance, NULL include columns; default NULL col_y integers indicating subset indices (columns) y calculate covariance, NULL include columns; default NULL df scalar indicating degrees freedom; default nrow(x)-1","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"covariance matrix x y. Note NA handling. missing values lead NA resulting covariance matrices.","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate massive covariance matrix in parallel — fast_cov","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)  x <- matrix(rnorm(400), nrow = 100)  # Call `cov(x)` to compare fast_cov(x) #>               [,1]          [,2]        [,3]        [,4] #> [1,]  1.1321822823 -0.0006807909 -0.07296124  0.06428697 #> [2,] -0.0006807909  0.9599183501 -0.02087449  0.08282645 #> [3,] -0.0729612415 -0.0208744907  1.15553794 -0.05393736 #> [4,]  0.0642869733  0.0828264516 -0.05393736  0.96517229  # Calculate covariance of subsets fast_cov(x, col_x = 1, col_y = 1:2) #>          [,1]          [,2] #> [1,] 1.132182 -0.0006807909  if(interactive()){  # Speed comparison, better to use multiple cores (4, 8, or more) # to show the differences.  ravetools_threads(n_threads = -1) x <- matrix(rnorm(100000), nrow = 1000) microbenchmark::microbenchmark(   fast_cov = {     fast_cov(x, col_x = 1:50, col_y = 51:100)   },   cov = {     cov(x[,1:50], x[,51:100])   },   unit = 'ms', times = 10 )  }"},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute quantiles — fast_quantile","title":"Compute quantiles — fast_quantile","text":"Compute quantiles","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute quantiles — fast_quantile","text":"","code":"fast_quantile(x, prob = 0.5, na.rm = FALSE, ...)  fast_median(x, na.rm = FALSE, ...)  fast_mvquantile(x, prob = 0.5, na.rm = FALSE, ...)  fast_mvmedian(x, na.rm = FALSE, ...)"},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute quantiles — fast_quantile","text":"x numerical-value vector fast_quantile fast_median, column-major matrix fast_mvquantile fast_mvmedian prob probability value 0 1 na.rm logical; true, NA removed x quantiles computed ... reserved future use","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute quantiles — fast_quantile","text":"fast_quantile fast_median calculate univariate quantiles (single-value return); fast_mvquantile fast_mvmedian calculate multivariate quantiles (column, result lengths equal number columns).","code":""},{"path":"https://dipterix.org/ravetools/reference/fast_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute quantiles — fast_quantile","text":"","code":"fast_quantile(runif(1000), 0.1) #> [1] 0.08398884 fast_median(1:100) #> [1] 50.5  x <- matrix(rnorm(100), ncol = 2) fast_mvquantile(x, 0.2) #> [1] -0.4647119 -0.9357731 fast_mvmedian(x) #> [1] 0.25158133 0.02348051  # Compare speed for vectors (usually 30% faster) x <- rnorm(10000) microbenchmark::microbenchmark(   fast_median = fast_median(x),   base_median = median(x),   # bioc_median = Biobase::rowMedians(matrix(x, nrow = 1)),   times = 100, unit = \"milliseconds\" ) #> Unit: milliseconds #>         expr    min      lq     mean  median      uq    max neval #>  fast_median 0.0937 0.14355 0.172133 0.16290 0.20325 0.2456   100 #>  base_median 0.2537 0.26585 0.306183 0.29195 0.34300 0.3750   100  # Multivariate cases # (5~7x faster than base R) # (3~5x faster than Biobase rowMedians) x <- matrix(rnorm(100000), ncol = 20) microbenchmark::microbenchmark(   fast_median = fast_mvmedian(x),   base_median = apply(x, 2, median),   # bioc_median = Biobase::rowMedians(t(x)),   times = 10, unit = \"milliseconds\" ) #> Unit: milliseconds #>         expr    min     lq    mean  median     uq    max neval #>  fast_median 0.8808 0.9206 1.04103 0.97020 1.0495 1.6322    10 #>  base_median 3.7614 3.8660 4.28579 4.02145 4.0783 5.7043    10"},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill a volume cube based on water-tight surface — fill_surface","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"Create cube volume (256 'voxels' margin), fill 'voxels' inside surface.","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"","code":"fill_surface(   surface,   inflate = 0,   IJK2RAS = NULL,   preview = FALSE,   preview_frame = 128 )"},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"surface surface mesh, can mesh objects rgl freesurferformats packages inflate amount 'voxels' inflate final result; must non-negative integer. zero inflate value means resulting volume tightly close surface IJK2RAS volume 'IJK' (zero-indexed coordinate index) 'tkrRAS' transform, default automatically determined leave `NULL` know set preview whether preview results; default false preview_frame integer 1 256 depth frame used generate preview.","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"list containing filled volume parameters used generate volume","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"function creates volume (256 margin) fill volume surface mesh. surface vertex points embedded volume first. points may connected together, hence 'voxel', cube patch applied grow volume. , volume bucket-filled corner, forming negated mask \"outside--surface\" area. inverted bucket-filled volume shrunk mask boundary tightly fits surface","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"Zhengjia Wang","code":""},{"path":"https://dipterix.org/ravetools/reference/fill_surface.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fill a volume cube based on water-tight surface — fill_surface","text":"","code":"if(interactive()) { # takes > 5s to run example  # Generate a sphere surface <- Rvcg::vcgSphere() surface$vb[1:3, ] <- surface$vb[1:3, ] * 50  fill_surface(surface, preview = TRUE)  }"},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter one-dimensional signal — filter_signal","title":"Filter one-dimensional signal — filter_signal","text":"function written scratch. result compared 'Matlab' filter function one-dimensional real inputs. situations matrix b multi-dimensional x implemented.","code":""},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter one-dimensional signal — filter_signal","text":"","code":"filter_signal(b, a, x, z)"},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter one-dimensional signal — filter_signal","text":"b one-dimensional real numerical vector, moving-average coefficients ARMA filter auto-regressive (recursive) coefficients ARMA filter x numerical vector input (real value) z initial condition, must length n-1, n maximum lengths b; default zeros","code":""},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter one-dimensional signal — filter_signal","text":"list two vectors: first vector filtered signal; second vector final state z","code":""},{"path":"https://dipterix.org/ravetools/reference/filter_signal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter one-dimensional signal — filter_signal","text":"","code":"t <- seq(0, 1, by = 0.01) x <- sin(2 * pi * t * 2.3) bf <- signal::butter(2, c(0.15, 0.3))  res <- filter_signal(bf$b, bf$a, x) y <- res[[1]] z <- res[[2]]  ## Matlab (2022a) equivalent: # t = [0:0.01:1]; # x = sin(2 * pi * t * 2.3); # [b,a] = butter(2,[.15,.3]); # [y,z] = filter(b, a, x)"},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":null,"dir":"Reference","previous_headings":"","what":"Forward and reverse filter a one-dimensional signal — filtfilt","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"result tested 'Matlab' filtfilt function. Currently function supports one filter time.","code":""},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"","code":"filtfilt(b, a, x)"},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"b one-dimensional real numerical vector, moving-average coefficients ARMA filter auto-regressive (recursive) coefficients ARMA filter x numerical vector input (real value)","code":""},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"filtered signal, normally length input signal x.","code":""},{"path":"https://dipterix.org/ravetools/reference/filtfilt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Forward and reverse filter a one-dimensional signal — filtfilt","text":"","code":"t <- seq(0, 1, by = 0.01) x <- sin(2 * pi * t * 2.3) bf <- signal::butter(2, c(0.15, 0.3))  res <- filtfilt(bf$b, bf$a, x)  ## Matlab (2022a) equivalent: # t = [0:0.01:1]; # x = sin(2 * pi * t * 2.3); # [b,a] = butter(2,[.15,.3]); # res = filtfilt(b, a, x)"},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Grow volume mask — grow_volume","title":"Grow volume mask — grow_volume","text":"Grow volume mask","code":""},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grow volume mask — grow_volume","text":"","code":"grow_volume(volume, x, y = x, z = x, threshold = 0.5)"},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grow volume mask — grow_volume","text":"volume volume mask array, must 3-dimensional array x, y, z size grow along direction threshold threshold convolution","code":""},{"path":"https://dipterix.org/ravetools/reference/grow_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grow volume mask — grow_volume","text":"","code":"par(mfrow = c(2,3), mar = c(0.1,0.1,3.1,0.1))  mask <- array(0, c(21,21,21)) mask[11,11,11] <- 1 image(mask[11,,], asp = 1,       main = \"Original mask\", axes = FALSE) image(grow_volume(mask, 2)[11,,], asp = 1,       main = \"Dilated (size=2) mask\", axes = FALSE) image(grow_volume(mask, 5)[11,,], asp = 1,       main = \"Dilated (size=5) mask\", axes = FALSE)  mask[11, sample(11,2), sample(11,2)] <- 1 image(mask[11,,], asp = 1,       main = \"Original mask\", axes = FALSE) image(grow_volume(mask, 2)[11,,], asp = 1,       main = \"Dilated (size=2) mask\", axes = FALSE) image(grow_volume(mask, 5)[11,,], asp = 1,       main = \"Dilated (size=5) mask\", axes = FALSE)"},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":null,"dir":"Reference","previous_headings":"","what":"Find and interpolate stimulation signals — interpolate_stimulation","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"Find interpolate stimulation signals","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"","code":"interpolate_stimulation(   x,   sample_rate,   duration = 40/sample_rate,   ord = 4L,   nknots = 100,   nsd = 1,   nstim = NULL,   regularization = 0.5 )"},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"x numerical vector representing analog signal sample_rate sampling frequency duration time second: duration interpolation ord spline order, default 4 nknots rough number knots use, default 100 nsd number standard deviation detect stimulation signals, default 1 nstim number stimulation pulses, default auto-detect regularization regularization parameter case inverting singular matrices, default 0.5","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"Interpolated signal attribute sample points interpolated","code":""},{"path":"https://dipterix.org/ravetools/reference/interpolate_stimulation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find and interpolate stimulation signals — interpolate_stimulation","text":"","code":"x0 <- rnorm(1000) / 5 + sin(1:1000 / 300)  # Simulates pulase signals x <- x0 x[400:410] <- -100 x[420:430] <- 100  fitted <- interpolate_stimulation(x, 100, duration = 0.3, nknots = 10, nsd = 2)  par(mfrow = c(2, 1))  plot(fitted, type = 'l', col = 'blue', lwd = 2) lines(x, col = 'red') lines(x0, col = 'black') legend(\"topleft\", c(\"Interpolated\", \"Observed\", \"Underlying\"),        lty = 1, col = c(\"blue\", \"red\", \"black\"))  pwelch(x0, 100, 200, 100, plot = 1, col = 'black', ylim = c(-50, 50)) pwelch(x, 100, 200, 100, plot = 2, col = 'red') pwelch(fitted, 100, 200, 100, plot = 2, col = 'blue')"},{"path":"https://dipterix.org/ravetools/reference/matlab_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"'Matlab' heat-map plot palette — matlab_palette","title":"'Matlab' heat-map plot palette — matlab_palette","text":"'Matlab' heat-map plot palette","code":""},{"path":"https://dipterix.org/ravetools/reference/matlab_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Matlab' heat-map plot palette — matlab_palette","text":"","code":"matlab_palette()"},{"path":"https://dipterix.org/ravetools/reference/matlab_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Matlab' heat-map plot palette — matlab_palette","text":"vector 64 colors","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 3D mesh surface from volume data — mesh_from_volume","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"Internally calls vcgIsosurface, optionally calls vcgUniformRemesh vcgSmooth.","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"","code":"mesh_from_volume(   volume,   output_format = c(\"rgl\", \"freesurfer\"),   IJK2RAS = NULL,   threshold = 0,   verbose = TRUE,   remesh = TRUE,   remesh_voxel_size = 1,   remesh_multisample = TRUE,   remesh_automerge = TRUE,   smooth = FALSE,   smooth_lambda = 10,   smooth_delta = 20,   smooth_method = \"surfPreserveLaplace\" )"},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"volume 3-dimensional volume array output_format resulting data format, choices 'rgl' 'freesurfer' IJK2RAS volume 'IJK' (zero-indexed coordinate index) 'tkrRAS' transform, default automatically determined threshold threshold used create volume mask; surface created fit mask boundaries verbose whether verbose progress remesh whether re-sample mesh using vcgUniformRemesh remesh_voxel_size, remesh_multisample, remesh_automerge see arguments vcgUniformRemesh smooth whether smooth mesh via vcgSmooth smooth_lambda, smooth_delta, smooth_method see vcgSmooth","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"'mesh3d' surface output_format 'rgl', 'fs.surface' surface otherwise.","code":""},{"path":"https://dipterix.org/ravetools/reference/mesh_from_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 3D mesh surface from volume data — mesh_from_volume","text":"","code":"volume <- array(0, dim = c(8,8,8)) volume[4:5, 4:5, 4:5] <- 1  graphics::image(x = volume[4,,])   # you can use rgl::wire3d(mesh) to visualize the mesh mesh <- mesh_from_volume(volume, verbose = FALSE)"},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute 'multitaper' spectral densities of time-series data — multitaper","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"Compute 'multitaper' spectral densities time-series data","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"","code":"multitaper_config(   data_length,   fs,   frequency_range = NULL,   time_bandwidth = 5,   num_tapers = NULL,   window_params = c(5, 1),   nfft = NA,   detrend_opt = \"linear\" )  multitaper(   data,   fs,   frequency_range = NULL,   time_bandwidth = 5,   num_tapers = NULL,   window_params = c(5, 1),   nfft = NA,   detrend_opt = \"linear\" )"},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"data_length length data fs sampling frequency 'Hz' frequency_range frequency range look ; length two time_bandwidth number indicating time-half bandwidth product; .e. window duration times half bandwidth main lobe; default 5 num_tapers number 'DPSS' tapers use; default NULL automatically computed floor(2*time_bandwidth - 1) window_params vector two numbers; first number window size seconds; second number step size; default c(5, 1) nfft 'NFFT' size, positive; see 'Details' detrend_opt want remove trend data window; options 'linear' (default), 'constant', '' data numerical vector, signal traces","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"multitaper_config returns list configuration parameters filters; multitaper also returns time, frequency corresponding spectral power.","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"original source code comes 'Prerau' Lab (see 'Github' repository 'multitaper_toolbox' user 'preraulab'). results tend agree 'Python' implementation precision order 1E-7 standard deviation 1E-5. original copy licensed Creative Commons Attribution 'NC'-'SA' 4.0 International License (https://creativecommons.org/licenses/-nc-sa/4.0/). package ('ravetools') redistributes multitaper function minor modifications nfft. original copy parameter control exact numbers nfft, nfft always power 2. choosing nfft power 2 always recommended, modified code allows choices.","code":""},{"path":"https://dipterix.org/ravetools/reference/multitaper.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute 'multitaper' spectral densities of time-series data — multitaper","text":"","code":"if(interactive()) {  time <- seq(0, 3, by = 0.001) x <- sin(time * 20*pi) + exp(-time^2) * cos(time * 10*pi)  res <- multitaper(   x, 1000, frequency_range = c(0,15),   time_bandwidth=1.5,   window_params=c(2,0.01) )   image(   x = res$time,   y = res$frequency,   z = 10 * log10(res$spec),   xlab = \"Time (s)\",   ylab = 'Frequency (Hz)',   col = matlab_palette() )  }"},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"Create Matrix4 instance 'Affine' transform","code":""},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"","code":"new_matrix4()  as_matrix4(m)"},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"m matrix vector converted Matrix4 instance; m must one followings: matrices, dimension must 4x4, 3x4 (last row 0 0 0 1), 3x3 (linear transform); vectors, length must 16, 12 (append 0 0 0 1 internally), 3 (translation), 1 (scale).","code":""},{"path":"https://dipterix.org/ravetools/reference/new_matrix4.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Matrix4 instance for 'Affine' transform — new_matrix4","text":"Matrix4 instance","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Quaternion instance to store '3D' rotation — new_quaternion","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"Create instances mimic 'three.js' syntax.","code":""},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"","code":"new_quaternion(x = 0, y = 0, z = 0, w = 1)  as_quaternion(q)"},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"x, y, z, w numeric length one q R object converted Quaternion","code":""},{"path":"https://dipterix.org/ravetools/reference/new_quaternion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Quaternion instance to store '3D' rotation — new_quaternion","text":"Quaternion instance","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Vector3 instance to store '3D' points — new_vector3","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"Create instances mimic 'three.js' syntax.","code":""},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"","code":"new_vector3(x = 0, y = 0, z = 0)  as_vector3(v)"},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"x, y, z numeric, must length, 'xyz' positions v R object converted Vector3 instance","code":""},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"Vector3 instance","code":""},{"path":[]},{"path":"https://dipterix.org/ravetools/reference/new_vector3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Vector3 instance to store '3D' points — new_vector3","text":"","code":"vec3 <- new_vector3(   x = 1:9,   y = 9:1,   z = rep(c(1,2,3), 3) )  vec3[] #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,]    1    2    3    4    5    6    7    8    9 #> [2,]    9    8    7    6    5    4    3    2    1 #> [3,]    1    2    3    1    2    3    1    2    3  # transform m <- new_matrix4()  # rotation xy plane by 30 degrees m$make_rotation_z(pi / 6) #> <Matrix4> #>           [,1]       [,2] [,3] [,4] #> [1,] 0.8660254 -0.5000000    0    0 #> [2,] 0.5000000  0.8660254    0    0 #> [3,] 0.0000000  0.0000000    1    0 #> [4,] 0.0000000  0.0000000    0    1  vec3$apply_matrix4(m) #> <Vector3: len=9> #>            x        y z #> 1 -3.6339746 8.294229 1 #> 2 -2.2679492 7.928203 2 #> 3 -0.9019238 7.562178 3 #> 4  0.4641016 7.196152 1 #> 5  1.8301270 6.830127 2 #> ...  vec3[] #>           [,1]      [,2]       [,3]      [,4]     [,5]     [,6]     [,7] #> [1,] -3.633975 -2.267949 -0.9019238 0.4641016 1.830127 3.196152 4.562178 #> [2,]  8.294229  7.928203  7.5621778 7.1961524 6.830127 6.464102 6.098076 #> [3,]  1.000000  2.000000  3.0000000 1.0000000 2.000000 3.000000 1.000000 #>          [,8]     [,9] #> [1,] 5.928203 7.294229 #> [2,] 5.732051 5.366025 #> [3,] 2.000000 3.000000  as_vector3(c(1,2,3)) #> <Vector3: len=1> #>   x y z #> 1 1 2 3"},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply 'Notch' filter — notch_filter","title":"Apply 'Notch' filter — notch_filter","text":"Apply 'Notch' filter","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply 'Notch' filter — notch_filter","text":"","code":"notch_filter(   s,   sample_rate,   lb = c(59, 118, 178),   ub = c(61, 122, 182),   domain = 1 )"},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply 'Notch' filter — notch_filter","text":"s numerical vector domain=1 (voltage signals), complex vector domain=0 sample_rate sample rate lb filter lower bound frequencies remove ub filter upper bound frequencies remove; shares length lb domain 1 input signal time domain, 0 frequency domain","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply 'Notch' filter — notch_filter","text":"filtered signal time domain (real numerical vector)","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply 'Notch' filter — notch_filter","text":"Mainly used remove electrical line frequencies 60, 120, 180 Hz.","code":""},{"path":"https://dipterix.org/ravetools/reference/notch_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply 'Notch' filter — notch_filter","text":"","code":"time <- seq(0, 3, 0.005) s <- sin(120 * pi * time) + rnorm(length(time))  # Welch periodogram shows a peak at 60Hz pwelch(s, 200, plot = 1, log = \"y\")  # notch filter to remove 60Hz s1 <- notch_filter(s, 200, lb = 59, ub = 61) pwelch(s1, 200, plot = 2, log = \"y\", col = \"red\")"},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":null,"dir":"Reference","previous_headings":"","what":"Set or get thread options — parallel-options","title":"Set or get thread options — parallel-options","text":"Set get thread options","code":""},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set or get thread options — parallel-options","text":"","code":"detect_threads()  ravetools_threads(n_threads = \"auto\", stack_size = \"auto\")"},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set or get thread options — parallel-options","text":"n_threads number threads set stack_size Stack size (bytes) use worker threads. default used \"auto\" 2MB 32-bit systems 4MB 64-bit systems.","code":""},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set or get thread options — parallel-options","text":"detect_threads returns integer default threads determined number CPU cores; ravetools_threads returns nothing.","code":""},{"path":"https://dipterix.org/ravetools/reference/parallel-options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set or get thread options — parallel-options","text":"","code":"if(interactive()){   detect_threads()   ravetools_threads(n_threads = 2) }"},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot one or more signal traces in the same figure — plot_signals","title":"Plot one or more signal traces in the same figure — plot_signals","text":"Plot one signal traces figure","code":""},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot one or more signal traces in the same figure — plot_signals","text":"","code":"plot_signals(   signals,   sample_rate = 1,   col = graphics::par(\"fg\"),   space = 0.995,   space_mode = c(\"quantile\", \"absolute\"),   start_time = 0,   duration = NULL,   compress = TRUE,   channel_names = NULL,   time_shift = 0,   xlab = \"Time (s)\",   ylab = \"Electrode\",   lwd = 0.5,   new_plot = TRUE,   xlim = NULL,   cex = 1,   cex.lab = 1,   mar = c(3.1, 2.1, 2.1, 0.8) * (0.25 + cex * 0.75) + 0.1,   mgp = cex * c(2, 0.5, 0),   xaxs = \"r\",   yaxs = \"i\",   xline = 1.5 * cex,   yline = 1 * cex,   tck = -0.005 * (3 + cex),   ... )"},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot one or more signal traces in the same figure — plot_signals","text":"signals numerical matrix row signal trace column contains signal values time point sample_rate sampling frequency col signal color, can vector one space vertical spacing among traces; values greater 1, spacing absolute; default 0.995; values less equal 1, percentile whole data. However, quantile mode can manually turned \"absolute\" required; see space_mode space_mode mode spacing, used space less equal one; default quantile start_time time start drawing relative first column duration duration signal draw compress whether compress signals data large channel_names NULL character vector channel names time_shift actual start time signal. Unlike start_time, actual physical time represented first column xlab, ylab, lwd, xlim, cex, cex.lab, mar, mgp, xaxs, yaxs, tck, ... plot parameters; see plot par new_plot whether draw new plot; default true xline, yline gap axis label","code":""},{"path":"https://dipterix.org/ravetools/reference/plot_signals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot one or more signal traces in the same figure — plot_signals","text":"","code":"n <- 1000 base_signal <- c(rep(0, n/2), sin(seq(0,10,length.out = n/2))) * 10 signals <- rbind(rnorm(n) + base_signal,                  rbinom(n, 10, 0.3) + base_signal,                  rt(n, 5) + base_signal) plot_signals(signals, sample_rate = 100)  plot_signals(signals, sample_rate = 100, start_time = 5)  plot_signals(signals, sample_rate = 100,              start_time = 5, time_shift = 100)"},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate 'Welch Periodogram' — pwelch","title":"Calculate 'Welch Periodogram' — pwelch","text":"pwelch single signal trace ; mv_pwelch multiple traces. Currently mv_pwelch experimental called directly.","code":""},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate 'Welch Periodogram' — pwelch","text":"","code":"pwelch(   x,   fs,   window = 64,   noverlap = 8,   nfft = 256,   col = \"black\",   xlim = NULL,   ylim = NULL,   main = \"Welch periodogram\",   plot = 0,   log = c(\"xy\", \"\", \"x\", \"y\"),   ... )  # S3 method for pwelch print(x, ...)  # S3 method for pwelch plot(   x,   log = c(\"xy\", \"x\", \"y\", \"\"),   se = FALSE,   xticks,   type = \"l\",   add = FALSE,   col = graphics::par(\"fg\"),   col.se = \"orange\",   alpha.se = 0.5,   lty = 1,   lwd = 1,   cex = 1,   las = 1,   main = \"Welch periodogram\",   xlab,   ylab,   xlim = NULL,   ylim = NULL,   xaxs = \"i\",   yaxs = \"i\",   xline = 1.2 * cex,   yline = 2 * cex,   mar = c(2.6, 3.8, 2.1, 0.6) * (0.5 + cex/2),   mgp = cex * c(2, 0.5, 0),   tck = -0.02 * cex,   grid = TRUE,   ... )  mv_pwelch(x, margin, fs, nfft)"},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate 'Welch Periodogram' — pwelch","text":"x 'pwelch' instance returned pwelch function fs sample rate, average number time points per second window window length time points, default size 64 noverlap overlap two adjacent windows, measured time points; default 8 nfft number basis functions apply col, xlim, ylim, main, type, cex, las, xlab, ylab, lty, lwd, xaxs, yaxs, mar, mgp, tck parameters passed plot.default plot integer, whether plot result ; choices 0, plot; 1 plot new canvas; 2 add existing canvas log indicates axis log10-transformed, used plot function. 'x' axis, log10-transform; 'y' axis, 10log10-transform (decibel unit). Choices \"xy\", \"x\", \"y\", \"\". ... passed plot.pwelch ignored se logical positive number indicating whether plot standard error mean; default false. provided number, multiple standard error drawn. option available power log-scale (decibel unit) xticks ticks show frequency axis add logical, whether plot added existing canvas col.se, alpha.se controls color opacity standard error xline, yline controls close axis labels corresponding axes grid whether draw rectangular grid lines plot; respected add=FALSE; default true margin margin pwelch applied ","code":""},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate 'Welch Periodogram' — pwelch","text":"list class 'ravetools-pwelch' contains following items: freq frequencies used calculate 'periodogram' spec resulting spectral power frequency window window function (numerical vector) used noverlap number overlapping time-points two adjacent windows nfft number basis functions fs sample rate x_len input signal length method character string 'Welch'","code":""},{"path":"https://dipterix.org/ravetools/reference/pwelch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate 'Welch Periodogram' — pwelch","text":"","code":"x <- rnorm(1000) pwel <- pwelch(x, 100) pwel #> Welch Periodogram: #>   # channels: 1 #>   time points: 1000 #>   sample rate: 100.00 #>   window size: 64 #>   window overlaps: 8 #>   filter count: 256  plot(pwel, log = \"xy\")"},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert raw vectors to R vectors — raw-to-sexp","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"Convert raw vectors R vectors","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"","code":"raw_to_uint8(x)  raw_to_uint16(x)  raw_to_uint32(x)  raw_to_int8(x)  raw_to_int16(x)  raw_to_int32(x)  raw_to_int64(x)  raw_to_float(x)  raw_to_string(x)"},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"x raw vector bytes","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"Numeric vectors, except raw_to_string, returns string.","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"numeric conversions, function names straightforward. example, raw_to_uintN converts raw vectors unsigned integers, raw_to_intN converts raw vectors signed integers. number 'N' stands number bits used store integer. example raw_to_uint8 uses 8 bits (1 byte) store integer, hence value range 0-255. input data length must multiple element size represented underlying data. example uint16 integer uses 16 bites, one raw number uses 8 bits, hence two raw vectors can form one unsigned integer-16. , raw_to_uint16 requires length input multiple two. easy calculation : length x times 8, must divided 'N' (see last paragraph definition). returned data uses closest available R native data type can fully represent data. example, R single float type, hence raw_to_float returns double type, can represent possible values float. raw_to_uint32, potential value range 0 - (2^32-1). exceeds limit R integer type (-2^31) - (2^31-1). Therefore, returned values real (double float) data type. native data type can store integer-64 data R, package bit64 provides integer64 type, used raw_to_int64. Currently solution convert raw unsigned integer-64 type. raw_to_string converts raw character string. function respects null character, hence slightly different native rawToChar, translates raw byte--byte. raw byte represents valid character, two functions returns result. However, characters represented raw bytes invalid, raw_to_string stop parsing returns valid characters, rawToChar still try parse, likely result errors. Please see Examples comparisons.","code":""},{"path":"https://dipterix.org/ravetools/reference/raw-to-sexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert raw vectors to R vectors — raw-to-sexp","text":"","code":"# 0x00, 0x7f, 0x80, 0xFF x <- as.raw(c(0, 127, 128, 255))  raw_to_uint8(x) #> [1]   0 127 128 255  # The first bit becomes the integer sign # 128 -> -128, 255 -> -1 raw_to_int8(x) #> [1]    0  127 -128   -1  ## Comments based on little endian system  # 0x7f00 (32512), 0xFF80 (65408 unsigned, or -128 signed) raw_to_uint16(x) #> [1] 32512 65408 raw_to_int16(x) #> [1] 32512  -128  # 0xFF807F00 (4286611200 unsigned, -8356096 signed) raw_to_uint32(x) #> [1] 4286611200 raw_to_int32(x) #> [1] -8356096  # ---------------------------- String ---------------------------  # ASCII case: all valid x <- charToRaw(\"This is an ASCII string\")  raw_to_string(x) #> [1] \"This is an ASCII string\" rawToChar(x) #> [1] \"This is an ASCII string\"  x <- c(charToRaw(\"This is the end.\"),        as.raw(0),        charToRaw(\"*** is invalid\"))  # rawToChar will raise error raw_to_string(x) #> [1] \"This is the end.\"  # ---------------------------- Integer64 ------------------------ # Runs on little endian system x <- as.raw(c(0x80, 0x00, 0x7f, 0x80, 0xFF, 0x50, 0x7f, 0x00))  # Calculate bitstring, which concaternates the followings # 10000000 (0x80), 00000000 (0x00), 01111111 (0x7f), 10000000 (0x80), # 11111111 (0xFF), 01010000 (0x50), 01111111 (0x7f), 00000000 (0x00)  if(.Platform$endian == \"little\") {   bitstring <- paste0(     \"00000000011111110101000011111111\",     \"10000000011111110000000010000000\"   ) } else {   bitstring <- paste0(     \"00000001000000001111111000000001\",     \"11111111000010101111111000000000\"   ) }  # This is expected value bit64::as.integer64(structure(   bitstring,   class = \"bitstring\" )) #> integer64 #> [1] 35836380344942720  # This is actual value raw_to_int64(x) #> integer64 #> [1] 35836380344942720"},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":null,"dir":"Reference","previous_headings":"","what":"Imaging registration using 'NiftyReg' — register_volume","title":"Imaging registration using 'NiftyReg' — register_volume","text":"Registers 'CT' 'MRI', 'MRI' another 'MRI'","code":""},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Imaging registration using 'NiftyReg' — register_volume","text":"","code":"register_volume(   source,   target,   method = c(\"rigid\", \"affine\", \"nonlinear\"),   interpolation = c(\"cubic\", \"trilinear\", \"nearest\"),   threads = detect_threads(),   symmetric = TRUE,   verbose = TRUE,   ... )"},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Imaging registration using 'NiftyReg' — register_volume","text":"source source imaging data, 'nifti' file path; example, 'CT' target target imaging data align ; example, 'MRI' method method transformation, choices 'rigid', 'affine', 'nonlinear' interpolation volumes interpolated, choices 'cubic', 'trilinear', 'nearest' threads, symmetric, verbose, ... see niftyreg","code":""},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Imaging registration using 'NiftyReg' — register_volume","text":"See niftyreg","code":""},{"path":"https://dipterix.org/ravetools/reference/register_volume.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Imaging registration using 'NiftyReg' — register_volume","text":"","code":"if(interactive()) {  source <- system.file(\"extdata\", \"epi_t2.nii.gz\", package=\"RNiftyReg\") target <- system.file(\"extdata\", \"flash_t1.nii.gz\", package=\"RNiftyReg\") aligned <- register_volume(source, target, verbose = FALSE)  source_img <- aligned$source[[1]] target_img <- aligned$target aligned_img <- aligned$image  par(mfrow = c(2, 2), mar = c(0.1, 0.1, 3.1, 0.1))  pal <- grDevices::grey.colors(256, alpha = 1) image(source_img[,,30], asp = 1, axes = FALSE,       col = pal, main = \"Source image\") image(target_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Target image\") image(aligned_img[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Aligned image\")  # bucket fill and calculate differences aligned_img[is.nan(aligned_img) | aligned_img <= 1] <- 1 target_img[is.nan(target_img) | aligned_img <= 1] <- 1 diff <- abs(aligned_img / target_img - 1) image(diff[,,64], asp = 1, axes = FALSE,       col = pal, main = \"Percentage Difference\")  }"},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":null,"dir":"Reference","previous_headings":"","what":"Shift array by index — shift_array","title":"Shift array by index — shift_array","text":"Re-arrange arrays parallel","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shift array by index — shift_array","text":"","code":"shift_array(x, along_margin, unit_margin, shift_amount)"},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shift array by index — shift_array","text":"x array, must least matrix along_margin index shifted unit_margin dimension decides shift_amount shift_amount shift amount along along_margin","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shift array by index — shift_array","text":"array dimensions input x, index shifted. missing elements filled NA.","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shift array by index — shift_array","text":"simple use-case function think matrix row signal columns stand time. objective align (time-lock) signal according certain events. signal, want shift time points certain amount. case, shift amount defined shift_amount, whose length equals number signals. along_margin=2 want shift time points (column, second dimension) signal. unit_margin=1 shift amount depend signal number.","code":""},{"path":"https://dipterix.org/ravetools/reference/shift_array.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shift array by index — shift_array","text":"","code":"# Set ncores = 2 to comply to CRAN policy. Please don't run this line ravetools_threads(n_threads = 2L)    x <- matrix(1:10, nrow = 2, byrow = TRUE) z <- shift_array(x, 2, 1, c(1,2))  y <- NA * x y[1,1:4] = x[1,2:5] y[2,1:3] = x[2,3:5]  # Check if z ang y are the same z - y #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0    0   NA #> [2,]    0    0    0   NA   NA  # array case # x is Trial x Frequency x Time x <- array(1:27, c(3,3,3))  # Shift time for each trial, amount is 1, -1, 0 shift_amount <- c(1,-1,0) z <- shift_array(x, 3, 1, shift_amount)  if(interactive()){  par(mfrow = c(3, 2), mai = c(0.8, 0.6, 0.4, 0.1)) for( ii in 1:3 ){   image(t(x[ii, ,]), ylab = 'Frequency', xlab = 'Time',         main = paste('Trial', ii))   image(t(z[ii, ,]), ylab = 'Frequency', xlab = 'Time',         main = paste('Shifted amount:', shift_amount[ii])) }  }"},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":null,"dir":"Reference","previous_headings":"","what":"'Morlet' wavelet transform (Discrete) — wavelet","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"Transform analog voltage signals 'Morlet' wavelets: complex wavelet kernels \\(\\pi/2\\) phase differences.","code":""},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"","code":"wavelet_kernels(freqs, srate, wave_num)  morlet_wavelet(   data,   freqs,   srate,   wave_num,   precision = c(\"float\", \"double\"),   trend = c(\"constant\", \"linear\", \"none\"),   signature = NULL,   ... )  wavelet_cycles_suggest(   freqs,   frequency_range = c(2, 200),   cycle_range = c(3, 20) )"},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"freqs frequency data projected srate sample rate, number time points per second wave_num desired number cycles wavelet kernels balance precision time amplitude (control smoothness); positive integers strongly suggested data numerical vector analog voltage signals precision precision computation; choices 'float' (default) 'double'. trend choices 'constant': center signal zero; 'linear': remove linear trend; 'none' nothing signature signature calculate kernel path save, internally used ... passed detrend; frequency_range frequency range calculate, default 2 200 cycle_range number cycles corresponding frequency_range. default frequency range (2 - 200), default cycle_range 3 20. , 3 wavelet kernel cycles 2 Hertz, 20 cycles 200 Hertz.","code":""},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"wavelet_kernels returns wavelet kernels used wavelet function; morlet_wavelet returns file-based array precision 'float', list real imaginary arrays precision 'double'","code":""},{"path":"https://dipterix.org/ravetools/reference/wavelet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'Morlet' wavelet transform (Discrete) — wavelet","text":"","code":"if(interactive()){  # generate sine waves time <- seq(0, 3, by = 0.01) x <- sin(time * 20*pi) + exp(-time^2) * cos(time * 10*pi)  plot(time, x, type = 'l')  # freq from 1 - 15 Hz; wavelet using float precision freq <- seq(1, 15, 0.2) coef <- morlet_wavelet(x, freq, 100, c(2,3))  # to get coefficients in complex number from 1-10 time points coef[1:10, ]  # power power <- Mod(coef[])^2  # Power peaks at 5Hz and 10Hz at early stages # After 1.0 second, 5Hz component fade away image(power, x = time, y = freq, ylab = \"frequency\")  # wavelet using double precision coef2 <- morlet_wavelet(x, freq, 100, c(2,3), precision = \"double\") power2 <- (coef2$real[])^2 + (coef2$imag[])^2  image(power2, x = time, y = freq, ylab = \"frequency\")  # The maximum relative change of power with different precisions max(abs(power/power2 - 1))  # display kernels freq <- seq(1, 15, 1) kern <- wavelet_kernels(freq, 100, c(2,3)) print(kern)  plot(kern)  }"},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-012","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.2","title":"ravetools 0.1.2","text":"CRAN release: 2023-07-16 Compatible latest filearray Exported grow_volume mesh_from_volume longer throw errors mesh form manifold","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-011","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.1","title":"ravetools 0.1.1","text":"CRAN release: 2023-04-19 Fixed precision issue caused test failure machine","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-010","dir":"Changelog","previous_headings":"","what":"ravetools 0.1.0","title":"ravetools 0.1.0","text":"CRAN release: 2023-02-18 Added fill_surface fill volume based given surface mesh Added mesh_from_volume generate mesh volume. function can used together fill_surface generate surface envelope Added register_volume align two imaging data using linear non-linear registration Added fftw 2D image 3D volume data Added convolution 1D, 2D, 3D data using FFT","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-009","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.9","title":"ravetools 0.0.9","text":"CRAN release: 2023-01-20 Fixed pwelch frequency starting zero issue Upgraded TinyThread using latest pull-request RcppParallel","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-008","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.8","title":"ravetools 0.0.8","text":"CRAN release: 2022-10-14 Added interpolate_stimulation detect stimulation signals within response interpolate smooth signals package now imports splines Added fast_quantile fast_mvquantile improve quantile/median calculation speed Fixed plot_signals plotting range large signals large values (stimulation) Fixed TinyThreads library memory leak issues Simplified diagnose_channel, avoid duplicated pwelch calculation","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-007","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.7","title":"ravetools 0.0.7","text":"CRAN release: 2022-09-19 Added signal filter, filtfilt produce results Matlab (precision error) Added two ways perform band-pass filters Allows multiple channels pwelch row-major matrix speed calculation Added wavelet_cycles_suggest provide default calculation wavelet cycles Added internal argument signature wavelet resolve potential cache conflicts running multiple processes. (allows RAVE run wavelet multiple subjects time)","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-006","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.6","title":"ravetools 0.0.6","text":"CRAN release: 2022-08-25 Added decibel average pwelch Allowed pwelch sampling frequency greater signal length Adjusted parameters diagnostic plot pwelch plot properly handle graph text, margin, axis Added plot_signals plot multiple functional data within canvas","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-005","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.5","title":"ravetools 0.0.5","text":"CRAN release: 2022-08-06 Exposed C++ code inst/includes users can dynamically link functions (https://github.com/dipterix/ravetools/issues/5) Removed confusing -place arguments fftw related code Corrected fftw plans respect flags Added C++ convert raw binary bytes uint, int, float, string","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-004","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.4","title":"ravetools 0.0.4","text":"CRAN release: 2022-05-29 Parallel processes might use different temporary directory paths. improve performance, recommended set shared temporary directory, hence version Allows temporary directories set via environment variable RAVETOOLS_TEMPDIR option ravetools.tempdir.","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-003","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.3","title":"ravetools 0.0.3","text":"CRAN release: 2022-02-16 version fixes memory issue reported CRAN check (gcc-UBSAN). potential integer overflow NA_INTEGER subtracted one converted R_xlen_t type. update fixes issue Removed RcppParallel copied part inst/include folder, TBB removed GPL-3 license framework.","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"ravetools-002","dir":"Changelog","previous_headings":"","what":"ravetools 0.0.2","title":"ravetools 0.0.2","text":"CRAN release: 2022-02-14 initial version ravetools. Although bare minimal set signal processing functions provided, sufficient perform preprocess pipelines iEEG signals. functions added dipsaus package, considerable performance improvement. C++ functions tested major platforms, different architectures (ARM, i386, x64).","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"documentation-0-0-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"ravetools 0.0.2","text":"Added README file demonstrate basic usage Added NEWS.md file track changes package.","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"signal-processing-functions-0-0-2","dir":"Changelog","previous_headings":"","what":"Signal processing functions","title":"ravetools 0.0.2","text":"Re-implemented decimate FIR filters creating results Matlab Added detrend function Added diagnose_channel visually inspect channel signals Added morlet_wavelet enable fast memory efficient wavelet decomposition; result agrees existing Matlab code floating errors (10^-7) Added multitaper Added pwelch (Welch periodogram) Added notch_filter remove line noise","code":""},{"path":"https://dipterix.org/ravetools/news/index.html","id":"high-performance-functions-0-0-2","dir":"Changelog","previous_headings":"","what":"High-performance functions","title":"ravetools 0.0.2","text":"following functions implemented C++ parallel. tend faster normal base-R implementations, depending number CPU cores used. Added collapse collapse arrays Added shift_array shift array along certain indices Added fast_cov calculate pearson covariance matrix parallel Added baseline_array calculate baseline arrays multiple margins","code":""}]
